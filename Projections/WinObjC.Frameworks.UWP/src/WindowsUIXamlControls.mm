//******************************************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
// This code is licensed under the MIT License (MIT).
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//******************************************************************************

// WindowsUIXamlControls.mm
// Generated from winmd2objc

#include <COMIncludes.h>
#undef GetCurrentTime
#include <Windows.UI.Xaml.Controls.h>
#include <COMIncludes_End.h>
#include <UWP/RTHelpers.h>
#include "Starboard.h"
#include "WindowsUIXamlControls.h"
#include "WindowsUIXamlControls_priv.h"

@implementation WXCIInsertionPanel

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInsertionPanel> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (void)getInsertionIndexes:(WFPoint*)position first:(int*)first second:(int*)second {
    int firstOutUnmarshaled;
    int secondOutUnmarshaled;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInsertionPanel>(self);
    THROW_NS_IF_FAILED(_comInst->GetInsertionIndexes(*[position internalStruct], &firstOutUnmarshaled, &secondOutUnmarshaled));
    *first = firstOutUnmarshaled;
    *second = secondOutUnmarshaled;
}

@end

@implementation WXCIItemContainerMapping

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemContainerMapping> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (RTObject*)itemFromContainer:(WXDependencyObject*)container {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerMapping>(self);
    THROW_NS_IF_FAILED(_comInst->ItemFromContainer(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(container).Get(),
                                                   unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (WXDependencyObject*)containerFromItem:(RTObject*)item {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerMapping>(self);
    THROW_NS_IF_FAILED(_comInst->ContainerFromItem([item comObj].Get(), unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (int)indexFromContainer:(WXDependencyObject*)container {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerMapping>(self);
    THROW_NS_IF_FAILED(
        _comInst->IndexFromContainer(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(container).Get(), &unmarshalledReturn));
    return unmarshalledReturn;
}

- (WXDependencyObject*)containerFromIndex:(int)index {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerMapping>(self);
    THROW_NS_IF_FAILED(_comInst->ContainerFromIndex(index, unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

@end

@implementation WXCINavigate

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::INavigate> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (BOOL)navigate:(WUXITypeName*)sourcePageType {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::INavigate>(self);
    THROW_NS_IF_FAILED(_comInst->Navigate(*[sourcePageType internalStruct], &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

@end

@implementation WXCISemanticZoomInformation

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WXCSemanticZoom*)semanticZoomOwner {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoom> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->get_SemanticZoomOwner(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCSemanticZoom>(unmarshalledReturn.Get());
}

- (void)setSemanticZoomOwner:(WXCSemanticZoom*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->put_SemanticZoomOwner(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(value).Get()));
}

- (BOOL)isActiveView {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsActiveView(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsActiveView:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsActiveView((boolean)value));
}

- (BOOL)isZoomedInView {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsZoomedInView(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsZoomedInView:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsZoomedInView((boolean)value));
}

- (void)initializeViewChange {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->InitializeViewChange());
}

- (void)completeViewChange {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->CompleteViewChange());
}

- (void)makeVisible:(WXCSemanticZoomLocation*)item {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->MakeVisible(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(item).Get()));
}

- (void)startViewChangeFrom:(WXCSemanticZoomLocation*)source destination:(WXCSemanticZoomLocation*)destination {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(
        _comInst->StartViewChangeFrom(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(source).Get(),
                                      _getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(destination).Get()));
}

- (void)startViewChangeTo:(WXCSemanticZoomLocation*)source destination:(WXCSemanticZoomLocation*)destination {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(
        _comInst->StartViewChangeTo(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(source).Get(),
                                    _getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(destination).Get()));
}

- (void)completeViewChangeFrom:(WXCSemanticZoomLocation*)source destination:(WXCSemanticZoomLocation*)destination {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(
        _comInst->CompleteViewChangeFrom(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(source).Get(),
                                         _getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(destination).Get()));
}

- (void)completeViewChangeTo:(WXCSemanticZoomLocation*)source destination:(WXCSemanticZoomLocation*)destination {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(
        _comInst->CompleteViewChangeTo(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(source).Get(),
                                       _getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(destination).Get()));
}

@end

@implementation WXCICommandBarElement

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBarElement> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (BOOL)isCompact {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsCompact(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsCompact:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsCompact((boolean)value));
}

@end

@implementation WXCICommandBarElement2

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (BOOL)isInOverflow {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsInOverflow(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (int)dynamicOverflowOrder {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2>(self);
    THROW_NS_IF_FAILED(_comInst->get_DynamicOverflowOrder(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setDynamicOverflowOrder:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2>(self);
    THROW_NS_IF_FAILED(_comInst->put_DynamicOverflowOrder(value));
}

@end

@implementation WXCBackClickEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IBackClickEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.BackClickEventArgs").Get(), &out));
    return [_createRtProxy<WXCBackClickEventArgs>(out.Get()) retain];
}

- (BOOL)handled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBackClickEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Handled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setHandled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBackClickEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Handled((boolean)value));
}

@end

@implementation WXCDragItemsStartingEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.DragItemsStartingEventArgs").Get(), &out));
    return [_createRtProxy<WXCDragItemsStartingEventArgs>(out.Get()) retain];
}

- (BOOL)cancel {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Cancel(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setCancel:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Cancel((boolean)value));
}

- (NSMutableArray* /* RTObject* */)items {
    ComPtr<IVector<IInspectable*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Items(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_RTObject_create(unmarshalledReturn.Get());
}

- (WADDataPackage*)data {
    ComPtr<ABI::Windows::ApplicationModel::DataTransfer::IDataPackage> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Data(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WADDataPackage>(unmarshalledReturn.Get());
}

@end

@implementation WXCNotifyEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::INotifyEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (NSString*)value {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::INotifyEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Value(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (WFUri*)callingUri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::INotifyEventArgs2>(self);
    THROW_NS_IF_FAILED(_comInst->get_CallingUri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

@end

@implementation WXCSemanticZoomViewChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs").Get(),
                                              &out));
    return [_createRtProxy<WXCSemanticZoomViewChangedEventArgs>(out.Get()) retain];
}

- (BOOL)isSourceZoomedInView {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSourceZoomedInView(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSourceZoomedInView:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSourceZoomedInView((boolean)value));
}

- (WXCSemanticZoomLocation*)sourceItem {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_SourceItem(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCSemanticZoomLocation>(unmarshalledReturn.Get());
}

- (void)setSourceItem:(WXCSemanticZoomLocation*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_SourceItem(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(value).Get()));
}

- (WXCSemanticZoomLocation*)destinationItem {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_DestinationItem(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCSemanticZoomLocation>(unmarshalledReturn.Get());
}

- (void)setDestinationItem:(WXCSemanticZoomLocation*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_DestinationItem(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(value).Get()));
}

@end

@implementation WXCTextControlPasteEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextControlPasteEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (BOOL)handled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Handled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setHandled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Handled((boolean)value));
}

@end

@implementation WXCContainerContentChangingEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs").Get(),
                                              &out));
    return [_createRtProxy<WXCContainerContentChangingEventArgs>(out.Get()) retain];
}

- (WUXCPSelectorItem*)itemContainer {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::ISelectorItem> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemContainer(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPSelectorItem>(unmarshalledReturn.Get());
}

- (BOOL)inRecycleQueue {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_InRecycleQueue(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (int)itemIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (RTObject*)item {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Item(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (unsigned int)phase {
    unsigned int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Phase(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (BOOL)handled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Handled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setHandled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Handled((boolean)value));
}

- (void)registerUpdateCallback:(void (^)(WXCListViewBase*, WXCContainerContentChangingEventArgs*))callback {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->RegisterUpdateCallback(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_ListViewBase_Windows_UI_Xaml_Controls_ContainerContentChangingEventArgs>(callback)
            .Get()));
}

- (void)registerUpdateCallbackWithPhase:(unsigned int)callbackPhase
                               callback:(void (^)(WXCListViewBase*, WXCContainerContentChangingEventArgs*))callback {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->RegisterUpdateCallbackWithPhase(
        callbackPhase,
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_ListViewBase_Windows_UI_Xaml_Controls_ContainerContentChangingEventArgs>(callback)
            .Get()));
}

@end

@implementation WXCSemanticZoomLocation

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.SemanticZoomLocation").Get(), &out));
    return [_createRtProxy<WXCSemanticZoomLocation>(out.Get()) retain];
}

- (RTObject*)item {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(self);
    THROW_NS_IF_FAILED(_comInst->get_Item(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setItem:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(self);
    THROW_NS_IF_FAILED(_comInst->put_Item([value comObj].Get()));
}

- (WFRect*)bounds {
    ABI::Windows::Foundation::Rect unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(self);
    THROW_NS_IF_FAILED(_comInst->get_Bounds(&unmarshalledReturn));
    return WFRect_create(unmarshalledReturn);
}

- (void)setBounds:(WFRect*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(self);
    THROW_NS_IF_FAILED(_comInst->put_Bounds(*[value internalStruct]));
}

@end

@implementation WXCCandidateWindowBoundsChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFRect*)bounds {
    ABI::Windows::Foundation::Rect unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Bounds(&unmarshalledReturn));
    return WFRect_create(unmarshalledReturn);
}

@end

@implementation WXCChoosingGroupHeaderContainerEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs").Get(), &out));
    return [_createRtProxy<WXCChoosingGroupHeaderContainerEventArgs>(out.Get()) retain];
}

- (WXCListViewBaseHeaderItem*)groupHeaderContainer {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBaseHeaderItem> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_GroupHeaderContainer(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCListViewBaseHeaderItem>(unmarshalledReturn.Get());
}

- (void)setGroupHeaderContainer:(WXCListViewBaseHeaderItem*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_GroupHeaderContainer(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>(value).Get()));
}

- (int)groupIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_GroupIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (RTObject*)group {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Group(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

@end

@implementation WXCChoosingItemContainerEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ChoosingItemContainerEventArgs").Get(),
                                              &out));
    return [_createRtProxy<WXCChoosingItemContainerEventArgs>(out.Get()) retain];
}

- (int)itemIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (RTObject*)item {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Item(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (WUXCPSelectorItem*)itemContainer {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::ISelectorItem> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemContainer(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPSelectorItem>(unmarshalledReturn.Get());
}

- (void)setItemContainer:(WUXCPSelectorItem*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ItemContainer(_getRtInterface<ABI::Windows::UI::Xaml::Controls::Primitives::ISelectorItem>(value).Get()));
}

- (BOOL)isContainerPrepared {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsContainerPrepared(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsContainerPrepared:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsContainerPrepared((boolean)value));
}

@end

@implementation WXCColumnDefinitionCollection {
    RTMutableArrayObj<ABI::Windows::UI::Xaml::Controls::IColumnDefinition*,
                      IVector<ABI::Windows::UI::Xaml::Controls::ColumnDefinition*>,
                      WXCColumnDefinition,
                      ABI::Windows::UI::Xaml::Controls::ColumnDefinition*,
                      dummyObjCCreator,
                      dummyWRLCreator>
        _array;
}
INTEROP_IMPL_VECTOR_FULL(self.comObj,
                         WXCColumnDefinition,
                         ABI::Windows::UI::Xaml::Controls::IColumnDefinition*,
                         ABI::Windows::UI::Xaml::Controls::ColumnDefinition*)

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Controls::ColumnDefinition*>> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCDataTemplateSelector

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.DataTemplateSelector").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIDataTemplateSelectorOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIDataTemplateSelectorOverrides)]) {
        typedOuter = Make<WXCIDataTemplateSelectorOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCDataTemplateSelector* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

- (WXDataTemplate*)selectTemplate:(RTObject*)item container:(WXDependencyObject*)container {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector>(self);
    THROW_NS_IF_FAILED(_comInst->SelectTemplate([item comObj].Get(),
                                                _getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(container).Get(),
                                                unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (WXDataTemplate*)selectTemplateCore:(RTObject*)item container:(WXDependencyObject*)container {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->SelectTemplateCore([item comObj].Get(),
                                                    _getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(container).Get(),
                                                    unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (WXDataTemplate*)selectTemplateForItem:(RTObject*)item {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector2>(self);
    THROW_NS_IF_FAILED(_comInst->SelectTemplateForItem([item comObj].Get(), unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (WXDataTemplate*)selectTemplateForItemCore:(RTObject*)item {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>(self);
    THROW_NS_IF_FAILED(_comInst->SelectTemplateForItemCore([item comObj].Get(), unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

@end

@implementation WXCDragItemsCompletedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (NSArray* /* RTObject* */)items {
    ComPtr<IVectorView<IInspectable*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Items(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSArray_RTObject_create(unmarshalledReturn.Get());
}

- (WADDataPackageOperation)dropResult {
    ABI::Windows::ApplicationModel::DataTransfer::DataPackageOperation unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_DropResult(&unmarshalledReturn));
    return (WADDataPackageOperation)unmarshalledReturn;
}

@end

@implementation WXCStyleSelector

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IStyleSelector> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IStyleSelectorFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.StyleSelector").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IStyleSelector> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIStyleSelectorOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIStyleSelectorOverrides)]) {
        typedOuter = Make<WXCIStyleSelectorOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCStyleSelector* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

- (WXStyle*)selectStyle:(RTObject*)item container:(WXDependencyObject*)container {
    ComPtr<ABI::Windows::UI::Xaml::IStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStyleSelector>(self);
    THROW_NS_IF_FAILED(_comInst->SelectStyle([item comObj].Get(),
                                             _getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(container).Get(),
                                             unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXStyle>(unmarshalledReturn.Get());
}

- (WXStyle*)selectStyleCore:(RTObject*)item container:(WXDependencyObject*)container {
    ComPtr<ABI::Windows::UI::Xaml::IStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStyleSelectorOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->SelectStyleCore([item comObj].Get(),
                                                 _getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(container).Get(),
                                                 unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXStyle>(unmarshalledReturn.Get());
}

@end

@implementation WXCGroupStyle

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGroupStyle> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGroupStyleFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.GroupStyle").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGroupStyle> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCGroupStyle* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    return ret;
}

- (WXCItemsPanelTemplate*)panel {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsPanelTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle>(self);
    THROW_NS_IF_FAILED(_comInst->get_Panel(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCItemsPanelTemplate>(unmarshalledReturn.Get());
}

- (void)setPanel:(WXCItemsPanelTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle>(self);
    THROW_NS_IF_FAILED(_comInst->put_Panel(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IItemsPanelTemplate>(value).Get()));
}

- (WXStyle*)containerStyle {
    ComPtr<ABI::Windows::UI::Xaml::IStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContainerStyle(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXStyle>(unmarshalledReturn.Get());
}

- (void)setContainerStyle:(WXStyle*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle>(self);
    THROW_NS_IF_FAILED(_comInst->put_ContainerStyle(_getRtInterface<ABI::Windows::UI::Xaml::IStyle>(value).Get()));
}

- (WXCStyleSelector*)containerStyleSelector {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IStyleSelector> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContainerStyleSelector(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCStyleSelector>(unmarshalledReturn.Get());
}

- (void)setContainerStyleSelector:(WXCStyleSelector*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ContainerStyleSelector(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IStyleSelector>(value).Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WXCDataTemplateSelector*)headerTemplateSelector {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateSelector(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCDataTemplateSelector>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplateSelector:(WXCDataTemplateSelector*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_HeaderTemplateSelector(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector>(value).Get()));
}

- (BOOL)hidesIfEmpty {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle>(self);
    THROW_NS_IF_FAILED(_comInst->get_HidesIfEmpty(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setHidesIfEmpty:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle>(self);
    THROW_NS_IF_FAILED(_comInst->put_HidesIfEmpty((boolean)value));
}

- (EventRegistrationToken)addPropertyChangedEvent:(WUXDPropertyChangedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Data::INotifyPropertyChanged>(self);
    THROW_NS_IF_FAILED(_comInst->add_PropertyChanged(Make<WUXDPropertyChangedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePropertyChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Data::INotifyPropertyChanged>(self);
    THROW_NS_IF_FAILED(_comInst->remove_PropertyChanged(token));
}

- (WXStyle*)headerContainerStyle {
    ComPtr<ABI::Windows::UI::Xaml::IStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle2>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderContainerStyle(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXStyle>(unmarshalledReturn.Get());
}

- (void)setHeaderContainerStyle:(WXStyle*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyle2>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderContainerStyle(_getRtInterface<ABI::Windows::UI::Xaml::IStyle>(value).Get()));
}

@end

@implementation WXCGroupStyleSelector

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGroupStyleSelector> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.GroupStyleSelector").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGroupStyleSelector> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIGroupStyleSelectorOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIGroupStyleSelectorOverrides)]) {
        typedOuter = Make<WXCIGroupStyleSelectorOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCGroupStyleSelector* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

- (WXCGroupStyle*)selectGroupStyle:(RTObject*)group level:(unsigned int)level {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGroupStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyleSelector>(self);
    THROW_NS_IF_FAILED(_comInst->SelectGroupStyle([group comObj].Get(), level, unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCGroupStyle>(unmarshalledReturn.Get());
}

- (WXCGroupStyle*)selectGroupStyleCore:(RTObject*)group level:(unsigned int)level {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGroupStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->SelectGroupStyleCore([group comObj].Get(), level, unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCGroupStyle>(unmarshalledReturn.Get());
}

@end

@implementation WXCItemCollection {
    RTObservableArrayObjFull<IInspectable*, IVector<IInspectable*>, RTObject, IInspectable*, dummyObjCCreator, dummyWRLCreator> _array;
}
INTEROP_IMPL_OBSVECTOR_FULL(self.comObj, RTObject, IInspectable*, IInspectable*)

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<IObservableVector<IInspectable*>> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCItemContainerGenerator

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (EventRegistrationToken)addItemsChangedEvent:(WUXCPItemsChangedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->add_ItemsChanged(Make<WUXCPItemsChangedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeItemsChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ItemsChanged(token));
}

- (RTObject*)itemFromContainer:(WXDependencyObject*)container {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->ItemFromContainer(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(container).Get(),
                                                   unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (WXDependencyObject*)containerFromItem:(RTObject*)item {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->ContainerFromItem([item comObj].Get(), unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (int)indexFromContainer:(WXDependencyObject*)container {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(
        _comInst->IndexFromContainer(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(container).Get(), &unmarshalledReturn));
    return unmarshalledReturn;
}

- (WXDependencyObject*)containerFromIndex:(int)index {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->ContainerFromIndex(index, unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (WXCItemContainerGenerator*)getItemContainerGeneratorForPanel:(WXCPanel*)panel {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->GetItemContainerGeneratorForPanel(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IPanel>(panel).Get(),
                                                                   unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCItemContainerGenerator>(unmarshalledReturn.Get());
}

- (void)startAt:(WUXCPGeneratorPosition*)position
                   direction:(WUXCPGeneratorDirection)direction
    allowStartAtRealizedItem:(BOOL)allowStartAtRealizedItem {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->StartAt(*[position internalStruct],
                                         (ABI::Windows::UI::Xaml::Controls::Primitives::GeneratorDirection)direction,
                                         (boolean)allowStartAtRealizedItem));
}

- (void)stop {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->Stop());
}

- (WXDependencyObject*)generateNext:(BOOL*)isNewlyRealized {
    boolean isNewlyRealizedOutUnmarshaled;
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->GenerateNext(&isNewlyRealizedOutUnmarshaled, unmarshalledReturn.GetAddressOf()));
    *isNewlyRealized = (BOOL)isNewlyRealizedOutUnmarshaled;
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (void)prepareItemContainer:(WXDependencyObject*)container {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->PrepareItemContainer(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(container).Get()));
}

- (void)removeAll {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->RemoveAll());
}

- (void)remove:(WUXCPGeneratorPosition*)position count:(int)count {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->Remove(*[position internalStruct], count));
}

- (WUXCPGeneratorPosition*)generatorPositionFromIndex:(int)itemIndex {
    ABI::Windows::UI::Xaml::Controls::Primitives::GeneratorPosition unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->GeneratorPositionFromIndex(itemIndex, &unmarshalledReturn));
    return WUXCPGeneratorPosition_create(unmarshalledReturn);
}

- (int)indexFromGeneratorPosition:(WUXCPGeneratorPosition*)position {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->IndexFromGeneratorPosition(*[position internalStruct], &unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)recycle:(WUXCPGeneratorPosition*)position count:(int)count {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator>(self);
    THROW_NS_IF_FAILED(_comInst->Recycle(*[position internalStruct], count));
}

@end

@implementation WXCMediaTransportControlsHelper

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaTransportControlsHelper> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics> WXCIMediaTransportControlsHelperStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics> inst;
    THROW_NS_IF_FAILED(ABI::Windows::Foundation::GetActivationFactory(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.MediaTransportControlsHelper").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)dropoutOrderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsHelperStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DropoutOrderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (id /* int */)getDropoutOrder:(WXUIElement*)element {
    ComPtr<IReference<int>> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsHelperStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetDropoutOrder(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), unmarshalledReturn.GetAddressOf()));
    return MakeFromNullable<int, int>::convert(unmarshalledReturn.Get());
}

+ (void)setDropoutOrder:(WXUIElement*)element value:(id /* int */)value {
    auto _comInst = WXCIMediaTransportControlsHelperStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetDropoutOrder(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), BuildNullable<int>(value)));
}

@end

@implementation WXCRichEditBoxTextChangingEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCRowDefinitionCollection {
    RTMutableArrayObj<ABI::Windows::UI::Xaml::Controls::IRowDefinition*,
                      IVector<ABI::Windows::UI::Xaml::Controls::RowDefinition*>,
                      WXCRowDefinition,
                      ABI::Windows::UI::Xaml::Controls::RowDefinition*,
                      dummyObjCCreator,
                      dummyWRLCreator>
        _array;
}
INTEROP_IMPL_VECTOR_FULL(self.comObj,
                         WXCRowDefinition,
                         ABI::Windows::UI::Xaml::Controls::IRowDefinition*,
                         ABI::Windows::UI::Xaml::Controls::RowDefinition*)

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Controls::RowDefinition*>> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCTextBoxTextChangingEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCTextCompositionChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (int)startIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_StartIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (int)length {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Length(&unmarshalledReturn));
    return unmarshalledReturn;
}

@end

@implementation WXCTextCompositionEndedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (int)startIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_StartIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (int)length {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Length(&unmarshalledReturn));
    return unmarshalledReturn;
}

@end

@implementation WXCTextCompositionStartedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (int)startIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_StartIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (int)length {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Length(&unmarshalledReturn));
    return unmarshalledReturn;
}

@end

@implementation WXCToolTipService

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IToolTipService> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IToolTipServiceStatics> WXCIToolTipServiceStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IToolTipServiceStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ToolTipService").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)placementProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToolTipServiceStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlacementProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WUXCPPlacementMode)getPlacement:(WXDependencyObject*)element {
    ABI::Windows::UI::Xaml::Controls::Primitives::PlacementMode unmarshalledReturn;
    auto _comInst = WXCIToolTipServiceStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetPlacement(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(), &unmarshalledReturn));
    return (WUXCPPlacementMode)unmarshalledReturn;
}

+ (void)setPlacement:(WXDependencyObject*)element value:(WUXCPPlacementMode)value {
    auto _comInst = WXCIToolTipServiceStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetPlacement(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                              (ABI::Windows::UI::Xaml::Controls::Primitives::PlacementMode)value));
}

+ (WXDependencyProperty*)placementTargetProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToolTipServiceStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlacementTargetProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXUIElement*)getPlacementTarget:(WXDependencyObject*)element {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = WXCIToolTipServiceStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetPlacementTarget(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                    unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

+ (void)setPlacementTarget:(WXDependencyObject*)element value:(WXUIElement*)value {
    auto _comInst = WXCIToolTipServiceStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetPlacementTarget(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                    _getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

+ (WXDependencyProperty*)toolTipProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToolTipServiceStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ToolTipProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (RTObject*)getToolTip:(WXDependencyObject*)element {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = WXCIToolTipServiceStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetToolTip(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(), unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

+ (void)setToolTip:(WXDependencyObject*)element value:(RTObject*)value {
    auto _comInst = WXCIToolTipServiceStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetToolTip(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(), [value comObj].Get()));
}

@end

@implementation WXCUIElementCollection {
    RTMutableArrayObj<ABI::Windows::UI::Xaml::IUIElement*,
                      IVector<ABI::Windows::UI::Xaml::UIElement*>,
                      WXUIElement,
                      ABI::Windows::UI::Xaml::UIElement*,
                      dummyObjCCreator,
                      dummyWRLCreator>
        _array;
}
INTEROP_IMPL_VECTOR_FULL(self.comObj, WXUIElement, ABI::Windows::UI::Xaml::IUIElement*, ABI::Windows::UI::Xaml::UIElement*)

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<IVector<ABI::Windows::UI::Xaml::UIElement*>> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (void)move:(unsigned int)oldIndex newIndex:(unsigned int)newIndex {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IUIElementCollection>(self);
    THROW_NS_IF_FAILED(_comInst->Move(oldIndex, newIndex));
}

@end

@implementation WXCCalendarViewDayItemChangingEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (BOOL)inRecycleQueue {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_InRecycleQueue(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (WXCCalendarViewDayItem*)item {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItem> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Item(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCCalendarViewDayItem>(unmarshalledReturn.Get());
}

- (unsigned int)phase {
    unsigned int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Phase(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)registerUpdateCallback:(void (^)(WXCCalendarView*, WXCCalendarViewDayItemChangingEventArgs*))callback {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->RegisterUpdateCallback(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_CalendarView_Windows_UI_Xaml_Controls_CalendarViewDayItemChangingEventArgs>(
            callback)
            .Get()));
}

- (void)registerUpdateCallbackWithPhase:(unsigned int)callbackPhase
                               callback:(void (^)(WXCCalendarView*, WXCCalendarViewDayItemChangingEventArgs*))callback {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->RegisterUpdateCallbackWithPhase(
        callbackPhase,
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_CalendarView_Windows_UI_Xaml_Controls_CalendarViewDayItemChangingEventArgs>(
            callback)
            .Get()));
}

@end

@implementation WXCHubSectionHeaderClickEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.HubSectionHeaderClickEventArgs").Get(),
                                              &out));
    return [_createRtProxy<WXCHubSectionHeaderClickEventArgs>(out.Get()) retain];
}

- (WXCHubSection*)section {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHubSection> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Section(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCHubSection>(unmarshalledReturn.Get());
}

@end

@implementation WXCSectionsInViewChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (NSMutableArray* /* WXCHubSection* */)addedSections {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Controls::HubSection*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_AddedSections(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WXCHubSection_create(unmarshalledReturn.Get());
}

- (NSMutableArray* /* WXCHubSection* */)removedSections {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Controls::HubSection*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_RemovedSections(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WXCHubSection_create(unmarshalledReturn.Get());
}

@end

@implementation WXCWebViewNavigationFailedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFUri*)uri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Uri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (WWWebErrorStatus)webErrorStatus {
    ABI::Windows::Web::WebErrorStatus unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_WebErrorStatus(&unmarshalledReturn));
    return (WWWebErrorStatus)unmarshalledReturn;
}

@end

@implementation WXCCalendarDatePickerDateChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (id /* WFDateTime* */)newDate __attribute__((ns_returns_not_retained)) {
    ComPtr<IReference<ABI::Windows::Foundation::DateTime>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_NewDate(unmarshalledReturn.GetAddressOf()));
    return MakeFromNullable<WFDateTime, ABI::Windows::Foundation::DateTime>::convert(unmarshalledReturn.Get());
}

- (id /* WFDateTime* */)oldDate {
    ComPtr<IReference<ABI::Windows::Foundation::DateTime>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_OldDate(unmarshalledReturn.GetAddressOf()));
    return MakeFromNullable<WFDateTime, ABI::Windows::Foundation::DateTime>::convert(unmarshalledReturn.Get());
}

@end

@implementation WXCCalendarViewSelectedDatesChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (NSArray* /* WFDateTime* */)addedDates {
    ComPtr<IVectorView<ABI::Windows::Foundation::DateTime>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_AddedDates(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSArray_WFDateTime_create(unmarshalledReturn.Get());
}

- (NSArray* /* WFDateTime* */)removedDates {
    ComPtr<IVectorView<ABI::Windows::Foundation::DateTime>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_RemovedDates(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSArray_WFDateTime_create(unmarshalledReturn.Get());
}

@end

@implementation WXCContentDialogButtonClickDeferral

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (void)complete {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral>(self);
    THROW_NS_IF_FAILED(_comInst->Complete());
}

@end

@implementation WXCContentDialogButtonClickEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (BOOL)cancel {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Cancel(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setCancel:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Cancel((boolean)value));
}

- (WXCContentDialogButtonClickDeferral*)getDeferral {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->GetDeferral(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCContentDialogButtonClickDeferral>(unmarshalledReturn.Get());
}

@end

@implementation WXCContentDialogClosedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WXCContentDialogResult)result {
    ABI::Windows::UI::Xaml::Controls::ContentDialogResult unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Result(&unmarshalledReturn));
    return (WXCContentDialogResult)unmarshalledReturn;
}

@end

@implementation WXCContentDialogClosingDeferral

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialogClosingDeferral> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (void)complete {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialogClosingDeferral>(self);
    THROW_NS_IF_FAILED(_comInst->Complete());
}

@end

@implementation WXCContentDialogClosingEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WXCContentDialogResult)result {
    ABI::Windows::UI::Xaml::Controls::ContentDialogResult unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Result(&unmarshalledReturn));
    return (WXCContentDialogResult)unmarshalledReturn;
}

- (BOOL)cancel {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Cancel(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setCancel:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Cancel((boolean)value));
}

- (WXCContentDialogClosingDeferral*)getDeferral {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialogClosingDeferral> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->GetDeferral(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCContentDialogClosingDeferral>(unmarshalledReturn.Get());
}

@end

@implementation WXCContentDialogOpenedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCDatePickerValueChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFDateTime*)oldDate {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_OldDate(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (WFDateTime*)newDate __attribute__((ns_returns_not_retained)) {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_NewDate(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

@end

@implementation WXCDynamicOverflowItemsChangingEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs").Get(), &out));
    return [_createRtProxy<WXCDynamicOverflowItemsChangingEventArgs>(out.Get()) retain];
}

- (WXCCommandBarDynamicOverflowAction)action {
    ABI::Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Action(&unmarshalledReturn));
    return (WXCCommandBarDynamicOverflowAction)unmarshalledReturn;
}

@end

@implementation WXCHubSectionCollection {
    RTMutableArrayObj<ABI::Windows::UI::Xaml::Controls::IHubSection*,
                      IVector<ABI::Windows::UI::Xaml::Controls::HubSection*>,
                      WXCHubSection,
                      ABI::Windows::UI::Xaml::Controls::HubSection*,
                      dummyObjCCreator,
                      dummyWRLCreator>
        _array;
}
INTEROP_IMPL_VECTOR_FULL(self.comObj,
                         WXCHubSection,
                         ABI::Windows::UI::Xaml::Controls::IHubSection*,
                         ABI::Windows::UI::Xaml::Controls::HubSection*)

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Controls::HubSection*>> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCListViewPersistenceHelper

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewPersistenceHelper> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics> WXCIListViewPersistenceHelperStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListViewPersistenceHelper").Get(),
                                                       &inst));
    return inst;
}

+ (NSString*)getRelativeScrollPosition:(WXCListViewBase*)listViewBase itemToKeyHandler:(WXCListViewItemToKeyHandler)itemToKeyHandler {
    HSTRING unmarshalledReturn;
    auto _comInst = WXCIListViewPersistenceHelperStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetRelativeScrollPosition(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(listViewBase).Get(),
                                            Make<WXCListViewItemToKeyHandler_shim>(itemToKeyHandler).Get(),
                                            &unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

// Failed to generate SetRelativeScrollPositionAsync (Can't marshal Windows.Foundation.IAsyncOperation`1<System.Object>)

@end

@implementation WXCScrollViewerView

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IScrollViewerView> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (double)horizontalOffset {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewerView>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalOffset(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)verticalOffset {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewerView>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalOffset(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (float)zoomFactor {
    float unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewerView>(self);
    THROW_NS_IF_FAILED(_comInst->get_ZoomFactor(&unmarshalledReturn));
    return unmarshalledReturn;
}

@end

@implementation WXCScrollViewerViewChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs").Get(),
                                              &out));
    return [_createRtProxy<WXCScrollViewerViewChangedEventArgs>(out.Get()) retain];
}

- (BOOL)isIntermediate {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsIntermediate(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

@end

@implementation WXCScrollViewerViewChangingEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WXCScrollViewerView*)nextView {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IScrollViewerView> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_NextView(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCScrollViewerView>(unmarshalledReturn.Get());
}

- (WXCScrollViewerView*)finalView {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IScrollViewerView> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_FinalView(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCScrollViewerView>(unmarshalledReturn.Get());
}

- (BOOL)isInertial {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsInertial(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

@end

@implementation WXCSearchBoxQueryChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (NSString*)queryText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_QueryText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (NSString*)language {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Language(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (WASSearchQueryLinguisticDetails*)linguisticDetails {
    ComPtr<ABI::Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_LinguisticDetails(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WASSearchQueryLinguisticDetails>(unmarshalledReturn.Get());
}

@end

@implementation WXCSearchBoxQuerySubmittedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (NSString*)queryText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_QueryText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (NSString*)language {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Language(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (WASSearchQueryLinguisticDetails*)linguisticDetails {
    ComPtr<ABI::Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_LinguisticDetails(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WASSearchQueryLinguisticDetails>(unmarshalledReturn.Get());
}

- (WSVirtualKeyModifiers)keyModifiers {
    ABI::Windows::System::VirtualKeyModifiers unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_KeyModifiers(&unmarshalledReturn));
    return (WSVirtualKeyModifiers)unmarshalledReturn;
}

@end

@implementation WXCSearchBoxResultSuggestionChosenEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.SearchBoxResultSuggestionChosenEventArgs").Get(), &out));
    return [_createRtProxy<WXCSearchBoxResultSuggestionChosenEventArgs>(out.Get()) retain];
}

- (NSString*)tag {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Tag(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (WSVirtualKeyModifiers)keyModifiers {
    ABI::Windows::System::VirtualKeyModifiers unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_KeyModifiers(&unmarshalledReturn));
    return (WSVirtualKeyModifiers)unmarshalledReturn;
}

@end

@implementation WXCSearchBoxSuggestionsRequestedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (NSString*)queryText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_QueryText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (NSString*)language {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Language(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (WASSearchQueryLinguisticDetails*)linguisticDetails {
    ComPtr<ABI::Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_LinguisticDetails(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WASSearchQueryLinguisticDetails>(unmarshalledReturn.Get());
}

- (WASSearchSuggestionsRequest*)request {
    ComPtr<ABI::Windows::ApplicationModel::Search::ISearchSuggestionsRequest> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Request(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WASSearchSuggestionsRequest>(unmarshalledReturn.Get());
}

@end

@implementation WXCSplitViewPaneClosingEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (BOOL)cancel {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Cancel(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setCancel:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Cancel((boolean)value));
}

@end

@implementation WXCTimePickerValueChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFTimeSpan*)oldTime {
    ABI::Windows::Foundation::TimeSpan unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_OldTime(&unmarshalledReturn));
    return WFTimeSpan_create(unmarshalledReturn);
}

- (WFTimeSpan*)newTime __attribute__((ns_returns_not_retained)) {
    ABI::Windows::Foundation::TimeSpan unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_NewTime(&unmarshalledReturn));
    return WFTimeSpan_create(unmarshalledReturn);
}

@end

@implementation WXCWebViewContentLoadingEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFUri*)uri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Uri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

@end

@implementation WXCWebViewDeferredPermissionRequest

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFUri*)uri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>(self);
    THROW_NS_IF_FAILED(_comInst->get_Uri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (WXCWebViewPermissionType)permissionType {
    ABI::Windows::UI::Xaml::Controls::WebViewPermissionType unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>(self);
    THROW_NS_IF_FAILED(_comInst->get_PermissionType(&unmarshalledReturn));
    return (WXCWebViewPermissionType)unmarshalledReturn;
}

- (unsigned int)id {
    unsigned int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>(self);
    THROW_NS_IF_FAILED(_comInst->get_Id(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)allow {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>(self);
    THROW_NS_IF_FAILED(_comInst->Allow());
}

- (void)deny {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>(self);
    THROW_NS_IF_FAILED(_comInst->Deny());
}

@end

@implementation WXCWebViewDOMContentLoadedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFUri*)uri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Uri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

@end

@implementation WXCWebViewLongRunningScriptDetectedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFTimeSpan*)executionTime {
    ABI::Windows::Foundation::TimeSpan unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_ExecutionTime(&unmarshalledReturn));
    return WFTimeSpan_create(unmarshalledReturn);
}

- (BOOL)stopPageScriptExecution {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_StopPageScriptExecution(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setStopPageScriptExecution:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_StopPageScriptExecution((boolean)value));
}

@end

@implementation WXCWebViewNavigationCompletedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFUri*)uri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Uri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (BOOL)isSuccess {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSuccess(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (WWWebErrorStatus)webErrorStatus {
    ABI::Windows::Web::WebErrorStatus unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_WebErrorStatus(&unmarshalledReturn));
    return (WWWebErrorStatus)unmarshalledReturn;
}

@end

@implementation WXCWebViewNavigationStartingEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFUri*)uri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Uri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (BOOL)cancel {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Cancel(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setCancel:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Cancel((boolean)value));
}

@end

@implementation WXCWebViewNewWindowRequestedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFUri*)uri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Uri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (WFUri*)referrer {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Referrer(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (BOOL)handled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Handled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setHandled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Handled((boolean)value));
}

@end

@implementation WXCWebViewPermissionRequest

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewPermissionRequest> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFUri*)uri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewPermissionRequest>(self);
    THROW_NS_IF_FAILED(_comInst->get_Uri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (WXCWebViewPermissionType)permissionType {
    ABI::Windows::UI::Xaml::Controls::WebViewPermissionType unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewPermissionRequest>(self);
    THROW_NS_IF_FAILED(_comInst->get_PermissionType(&unmarshalledReturn));
    return (WXCWebViewPermissionType)unmarshalledReturn;
}

- (unsigned int)id {
    unsigned int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewPermissionRequest>(self);
    THROW_NS_IF_FAILED(_comInst->get_Id(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (WXCWebViewPermissionState)state {
    ABI::Windows::UI::Xaml::Controls::WebViewPermissionState unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewPermissionRequest>(self);
    THROW_NS_IF_FAILED(_comInst->get_State(&unmarshalledReturn));
    return (WXCWebViewPermissionState)unmarshalledReturn;
}

- (void)defer {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewPermissionRequest>(self);
    THROW_NS_IF_FAILED(_comInst->Defer());
}

- (void)allow {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewPermissionRequest>(self);
    THROW_NS_IF_FAILED(_comInst->Allow());
}

- (void)deny {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewPermissionRequest>(self);
    THROW_NS_IF_FAILED(_comInst->Deny());
}

@end

@implementation WXCWebViewPermissionRequestedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WXCWebViewPermissionRequest*)permissionRequest {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewPermissionRequest> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_PermissionRequest(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCWebViewPermissionRequest>(unmarshalledReturn.Get());
}

@end

@implementation WXCWebViewSettings

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewSettings> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (BOOL)isJavaScriptEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewSettings>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsJavaScriptEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsJavaScriptEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewSettings>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsJavaScriptEnabled((boolean)value));
}

- (BOOL)isIndexedDBEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewSettings>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsIndexedDBEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsIndexedDBEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewSettings>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsIndexedDBEnabled((boolean)value));
}

@end

@implementation WXCWebViewUnsupportedUriSchemeIdentifiedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFUri*)uri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Uri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (BOOL)handled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Handled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setHandled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Handled((boolean)value));
}

@end

@implementation WXCWebViewUnviewableContentIdentifiedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WFUri*)uri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Uri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (WFUri*)referrer {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Referrer(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (NSString*)mediaType {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2>(self);
    THROW_NS_IF_FAILED(_comInst->get_MediaType(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

@end

@implementation WXCColumnDefinition

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IColumnDefinition> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ColumnDefinition").Get(), &out));
    return [_createRtProxy<WXCColumnDefinition>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IColumnDefinitionStatics> WXCIColumnDefinitionStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IColumnDefinitionStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ColumnDefinition").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)widthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIColumnDefinitionStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_WidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIColumnDefinitionStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)minWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIColumnDefinitionStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MinWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXGridLength*)width {
    ABI::Windows::UI::Xaml::GridLength unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IColumnDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->get_Width(&unmarshalledReturn));
    return WXGridLength_create(unmarshalledReturn);
}

- (void)setWidth:(WXGridLength*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IColumnDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->put_Width(*[value internalStruct]));
}

- (double)maxWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IColumnDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaxWidth:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IColumnDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxWidth(value));
}

- (double)minWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IColumnDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->get_MinWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMinWidth:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IColumnDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->put_MinWidth(value));
}

- (double)actualWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IColumnDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->get_ActualWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

@end

@implementation WXCRowDefinition

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRowDefinition> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.RowDefinition").Get(), &out));
    return [_createRtProxy<WXCRowDefinition>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IRowDefinitionStatics> WXCIRowDefinitionStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRowDefinitionStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RowDefinition").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)heightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRowDefinitionStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRowDefinitionStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)minHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRowDefinitionStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MinHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXGridLength*)height {
    ABI::Windows::UI::Xaml::GridLength unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRowDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->get_Height(&unmarshalledReturn));
    return WXGridLength_create(unmarshalledReturn);
}

- (void)setHeight:(WXGridLength*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRowDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->put_Height(*[value internalStruct]));
}

- (double)maxHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRowDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaxHeight:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRowDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxHeight(value));
}

- (double)minHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRowDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->get_MinHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMinHeight:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRowDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->put_MinHeight(value));
}

- (double)actualHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRowDefinition>(self);
    THROW_NS_IF_FAILED(_comInst->get_ActualHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

@end

@implementation WXCAutoSuggestBoxQuerySubmittedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs").Get(), &out));
    return [_createRtProxy<WXCAutoSuggestBoxQuerySubmittedEventArgs>(out.Get()) retain];
}

- (NSString*)queryText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_QueryText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (RTObject*)chosenSuggestion {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_ChosenSuggestion(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

@end

@implementation WXCAutoSuggestBoxSuggestionChosenEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs").Get(), &out));
    return [_createRtProxy<WXCAutoSuggestBoxSuggestionChosenEventArgs>(out.Get()) retain];
}

- (RTObject*)selectedItem {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedItem(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

@end

@implementation WXCAutoSuggestBoxTextChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs").Get(),
                                              &out));
    return [_createRtProxy<WXCAutoSuggestBoxTextChangedEventArgs>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics> WXCIAutoSuggestBoxTextChangedEventArgsStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics> inst;
    THROW_NS_IF_FAILED(ABI::Windows::Foundation::GetActivationFactory(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)reasonProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAutoSuggestBoxTextChangedEventArgsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ReasonProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXCAutoSuggestionBoxTextChangeReason)reason {
    ABI::Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Reason(&unmarshalledReturn));
    return (WXCAutoSuggestionBoxTextChangeReason)unmarshalledReturn;
}

- (void)setReason:(WXCAutoSuggestionBoxTextChangeReason)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Reason((ABI::Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason)value));
}

- (BOOL)checkCurrent {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->CheckCurrent(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

@end

@implementation WXCCleanUpVirtualizedItemEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (RTObject*)value {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Value(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (WXUIElement*)uIElement {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_UIElement(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (BOOL)cancel {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Cancel(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setCancel:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Cancel((boolean)value));
}

@end

@implementation WXCContextMenuEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContextMenuEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (BOOL)handled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContextMenuEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Handled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setHandled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContextMenuEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Handled((boolean)value));
}

- (double)cursorLeft {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContextMenuEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_CursorLeft(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)cursorTop {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContextMenuEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_CursorTop(&unmarshalledReturn));
    return unmarshalledReturn;
}

@end

@implementation WXCItemClickEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemClickEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemClickEventArgs").Get(), &out));
    return [_createRtProxy<WXCItemClickEventArgs>(out.Get()) retain];
}

- (RTObject*)clickedItem {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemClickEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_ClickedItem(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

@end

@implementation WXCSelectionChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (WXCSelectionChangedEventArgs*)makeInstanceWithRemovedItemsAndAddedItems:(NSMutableArray* /* RTObject* */)removedItems
                                                                addedItems:(NSMutableArray* /* RTObject* */)addedItems {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SelectionChangedEventArgs").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    THROW_NS_IF_FAILED(factory->CreateInstanceWithRemovedItemsAndAddedItems(
        static_cast<IVector<typename ABI::Windows::Foundation::Internal::GetLogicalType<
            ABI::Windows::Foundation::Internal::AggregateType<IInspectable*, IInspectable*>>::type>*>(
            ConvertToVector<RTObject, ABI::Windows::Foundation::Internal::AggregateType<IInspectable*, IInspectable*>>(removedItems).Get()),
        static_cast<IVector<typename ABI::Windows::Foundation::Internal::GetLogicalType<
            ABI::Windows::Foundation::Internal::AggregateType<IInspectable*, IInspectable*>>::type>*>(
            ConvertToVector<RTObject, ABI::Windows::Foundation::Internal::AggregateType<IInspectable*, IInspectable*>>(addedItems).Get()),
        outer.Get(),
        &inner,
        &instance));
    WXCSelectionChangedEventArgs* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    return ret;
}

- (NSMutableArray* /* RTObject* */)addedItems {
    ComPtr<IVector<IInspectable*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_AddedItems(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_RTObject_create(unmarshalledReturn.Get());
}

- (NSMutableArray* /* RTObject* */)removedItems {
    ComPtr<IVector<IInspectable*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_RemovedItems(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_RTObject_create(unmarshalledReturn.Get());
}

@end

@implementation WXCTextChangedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextChangedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCItemsPanelTemplate

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsPanelTemplate> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsPanelTemplate").Get(), &out));
    return [_createRtProxy<WXCItemsPanelTemplate>(out.Get()) retain];
}

@end

@implementation WXCPanel

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPanel> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IPanelStatics> WXCIPanelStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPanelStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Panel").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)backgroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BackgroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isItemsHostProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsItemsHostProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)childrenTransitionsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ChildrenTransitionsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXCUIElementCollection*)children {
    ComPtr<IVector<ABI::Windows::UI::Xaml::UIElement*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_Children(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCUIElementCollection>(unmarshalledReturn.Get());
}

- (WUXMBrush*)background {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_Background(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setBackground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_Background(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (BOOL)isItemsHost {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsItemsHost(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (WUXMATransitionCollection*)childrenTransitions {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_ChildrenTransitions(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMATransitionCollection>(unmarshalledReturn.Get());
}

- (void)setChildrenTransitions:(WUXMATransitionCollection*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPanel>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ChildrenTransitions(_getRtInterface<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>>(value).Get()));
}

@end

@implementation WXCBorder

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IBorder> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.Border").Get(), &out));
    return [_createRtProxy<WXCBorder>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IBorderStatics> WXCIBorderStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IBorderStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Border").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)borderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIBorderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)borderThicknessProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIBorderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BorderThicknessProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)backgroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIBorderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BackgroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)cornerRadiusProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIBorderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CornerRadiusProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)paddingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIBorderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaddingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)childTransitionsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIBorderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ChildTransitionsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WUXMBrush*)borderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->get_BorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->put_BorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WXThickness*)borderThickness {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->get_BorderThickness(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setBorderThickness:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->put_BorderThickness(*[value internalStruct]));
}

- (WUXMBrush*)background {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->get_Background(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setBackground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->put_Background(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WXCornerRadius*)cornerRadius {
    ABI::Windows::UI::Xaml::CornerRadius unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->get_CornerRadius(&unmarshalledReturn));
    return WXCornerRadius_create(unmarshalledReturn);
}

- (void)setCornerRadius:(WXCornerRadius*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->put_CornerRadius(*[value internalStruct]));
}

- (WXThickness*)padding {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->get_Padding(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setPadding:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->put_Padding(*[value internalStruct]));
}

- (WXUIElement*)child {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->get_Child(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setChild:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->put_Child(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

- (WUXMATransitionCollection*)childTransitions {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(_comInst->get_ChildTransitions(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMATransitionCollection>(unmarshalledReturn.Get());
}

- (void)setChildTransitions:(WUXMATransitionCollection*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBorder>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ChildTransitions(_getRtInterface<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>>(value).Get()));
}

@end

@implementation WXCCaptureElement

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICaptureElement> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.CaptureElement").Get(), &out));
    return [_createRtProxy<WXCCaptureElement>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ICaptureElementStatics> WXCICaptureElementStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICaptureElementStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CaptureElement").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)sourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICaptureElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)stretchProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICaptureElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_StretchProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WMCMediaCapture*)source {
    ComPtr<ABI::Windows::Media::Capture::IMediaCapture> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICaptureElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_Source(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WMCMediaCapture>(unmarshalledReturn.Get());
}

- (void)setSource:(WMCMediaCapture*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICaptureElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_Source(_getRtInterface<ABI::Windows::Media::Capture::IMediaCapture>(value).Get()));
}

- (WUXMStretch)stretch {
    ABI::Windows::UI::Xaml::Media::Stretch unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICaptureElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_Stretch(&unmarshalledReturn));
    return (WUXMStretch)unmarshalledReturn;
}

- (void)setStretch:(WUXMStretch)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICaptureElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_Stretch((ABI::Windows::UI::Xaml::Media::Stretch)value));
}

@end

@implementation WXCContentPresenter

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentPresenter> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentPresenterFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ContentPresenter").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentPresenter> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentPresenterOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentPresenterOverrides)]) {
        typedOuter = Make<WXCIContentPresenterOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCContentPresenter* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IContentPresenterStatics3> WXCIContentPresenterStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentPresenterStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ContentPresenter").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isTextScaleFactorEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTextScaleFactorEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IContentPresenterStatics> WXCIContentPresenterStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentPresenterStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ContentPresenter").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)contentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)contentTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)contentTemplateSelectorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentTemplateSelectorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)contentTransitionsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentTransitionsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontSizeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontSizeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontFamilyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontFamilyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontWeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontWeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontStretchProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontStretchProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)characterSpacingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CharacterSpacingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)foregroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ForegroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IContentPresenterStatics4> WXCIContentPresenterStatics4_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentPresenterStatics4> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ContentPresenter").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)textWrappingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextWrappingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxLinesProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxLinesProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)lineStackingStrategyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_LineStackingStrategyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)lineHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_LineHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)borderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_BorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)borderThicknessProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_BorderThicknessProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)cornerRadiusProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_CornerRadiusProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)paddingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaddingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)backgroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_BackgroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)horizontalContentAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_HorizontalContentAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)verticalContentAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_VerticalContentAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IContentPresenterStatics2> WXCIContentPresenterStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentPresenterStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ContentPresenter").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)opticalMarginAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_OpticalMarginAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textLineBoundsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentPresenterStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextLineBoundsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject*)content {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_Content(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setContent:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_Content([value comObj].Get()));
}

- (WXDataTemplate*)contentTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setContentTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_ContentTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WXCDataTemplateSelector*)contentTemplateSelector {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentTemplateSelector(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCDataTemplateSelector>(unmarshalledReturn.Get());
}

- (void)setContentTemplateSelector:(WXCDataTemplateSelector*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ContentTemplateSelector(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector>(value).Get()));
}

- (WUXMATransitionCollection*)contentTransitions {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentTransitions(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMATransitionCollection>(unmarshalledReturn.Get());
}

- (void)setContentTransitions:(WUXMATransitionCollection*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ContentTransitions(_getRtInterface<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>>(value).Get()));
}

- (double)fontSize {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontSize(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setFontSize:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontSize(value));
}

- (WUXMFontFamily*)fontFamily {
    ComPtr<ABI::Windows::UI::Xaml::Media::IFontFamily> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontFamily(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMFontFamily>(unmarshalledReturn.Get());
}

- (void)setFontFamily:(WUXMFontFamily*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontFamily(_getRtInterface<ABI::Windows::UI::Xaml::Media::IFontFamily>(value).Get()));
}

- (WUTFontWeight*)fontWeight {
    ABI::Windows::UI::Text::FontWeight unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontWeight(&unmarshalledReturn));
    return WUTFontWeight_create(unmarshalledReturn);
}

- (void)setFontWeight:(WUTFontWeight*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontWeight(*[value internalStruct]));
}

- (WUTFontStyle)fontStyle {
    ABI::Windows::UI::Text::FontStyle unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontStyle(&unmarshalledReturn));
    return (WUTFontStyle)unmarshalledReturn;
}

- (void)setFontStyle:(WUTFontStyle)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontStyle((ABI::Windows::UI::Text::FontStyle)value));
}

- (WUTFontStretch)fontStretch {
    ABI::Windows::UI::Text::FontStretch unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontStretch(&unmarshalledReturn));
    return (WUTFontStretch)unmarshalledReturn;
}

- (void)setFontStretch:(WUTFontStretch)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontStretch((ABI::Windows::UI::Text::FontStretch)value));
}

- (int)characterSpacing {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_CharacterSpacing(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setCharacterSpacing:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_CharacterSpacing(value));
}

- (WUXMBrush*)foreground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_Foreground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setForeground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_Foreground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (void)onContentTemplateChanged:(WXDataTemplate*)oldContentTemplate newContentTemplate:(WXDataTemplate*)newContentTemplate {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenterOverrides>(self);
    THROW_NS_IF_FAILED(
        _comInst->OnContentTemplateChanged(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(oldContentTemplate).Get(),
                                           _getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(newContentTemplate).Get()));
}

- (void)onContentTemplateSelectorChanged:(WXCDataTemplateSelector*)oldContentTemplateSelector
              newContentTemplateSelector:(WXCDataTemplateSelector*)newContentTemplateSelector {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenterOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnContentTemplateSelectorChanged(
        _getRtInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector>(oldContentTemplateSelector).Get(),
        _getRtInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector>(newContentTemplateSelector).Get()));
}

- (WXOpticalMarginAlignment)opticalMarginAlignment {
    ABI::Windows::UI::Xaml::OpticalMarginAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter2>(self);
    THROW_NS_IF_FAILED(_comInst->get_OpticalMarginAlignment(&unmarshalledReturn));
    return (WXOpticalMarginAlignment)unmarshalledReturn;
}

- (void)setOpticalMarginAlignment:(WXOpticalMarginAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter2>(self);
    THROW_NS_IF_FAILED(_comInst->put_OpticalMarginAlignment((ABI::Windows::UI::Xaml::OpticalMarginAlignment)value));
}

- (WXTextLineBounds)textLineBounds {
    ABI::Windows::UI::Xaml::TextLineBounds unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter2>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextLineBounds(&unmarshalledReturn));
    return (WXTextLineBounds)unmarshalledReturn;
}

- (void)setTextLineBounds:(WXTextLineBounds)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter2>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextLineBounds((ABI::Windows::UI::Xaml::TextLineBounds)value));
}

- (BOOL)isTextScaleFactorEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter3>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTextScaleFactorEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTextScaleFactorEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter3>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTextScaleFactorEnabled((boolean)value));
}

- (WXTextWrapping)textWrapping {
    ABI::Windows::UI::Xaml::TextWrapping unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextWrapping(&unmarshalledReturn));
    return (WXTextWrapping)unmarshalledReturn;
}

- (void)setTextWrapping:(WXTextWrapping)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextWrapping((ABI::Windows::UI::Xaml::TextWrapping)value));
}

- (int)maxLines {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxLines(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaxLines:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxLines(value));
}

- (WXLineStackingStrategy)lineStackingStrategy {
    ABI::Windows::UI::Xaml::LineStackingStrategy unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->get_LineStackingStrategy(&unmarshalledReturn));
    return (WXLineStackingStrategy)unmarshalledReturn;
}

- (void)setLineStackingStrategy:(WXLineStackingStrategy)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->put_LineStackingStrategy((ABI::Windows::UI::Xaml::LineStackingStrategy)value));
}

- (double)lineHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->get_LineHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setLineHeight:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->put_LineHeight(value));
}

- (WUXMBrush*)borderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->get_BorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->put_BorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WXThickness*)borderThickness {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->get_BorderThickness(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setBorderThickness:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->put_BorderThickness(*[value internalStruct]));
}

- (WXCornerRadius*)cornerRadius {
    ABI::Windows::UI::Xaml::CornerRadius unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->get_CornerRadius(&unmarshalledReturn));
    return WXCornerRadius_create(unmarshalledReturn);
}

- (void)setCornerRadius:(WXCornerRadius*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->put_CornerRadius(*[value internalStruct]));
}

- (WXThickness*)padding {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->get_Padding(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setPadding:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->put_Padding(*[value internalStruct]));
}

- (WUXMBrush*)background {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->get_Background(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setBackground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->put_Background(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WXHorizontalAlignment)horizontalContentAlignment {
    ABI::Windows::UI::Xaml::HorizontalAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalContentAlignment(&unmarshalledReturn));
    return (WXHorizontalAlignment)unmarshalledReturn;
}

- (void)setHorizontalContentAlignment:(WXHorizontalAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->put_HorizontalContentAlignment((ABI::Windows::UI::Xaml::HorizontalAlignment)value));
}

- (WXVerticalAlignment)verticalContentAlignment {
    ABI::Windows::UI::Xaml::VerticalAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalContentAlignment(&unmarshalledReturn));
    return (WXVerticalAlignment)unmarshalledReturn;
}

- (void)setVerticalContentAlignment:(WXVerticalAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentPresenter4>(self);
    THROW_NS_IF_FAILED(_comInst->put_VerticalContentAlignment((ABI::Windows::UI::Xaml::VerticalAlignment)value));
}

@end

@implementation WXCImage

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IImage> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.Image").Get(), &out));
    return [_createRtProxy<WXCImage>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IImageStatics> WXCIImageStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IImageStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Image").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)sourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIImageStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)stretchProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIImageStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_StretchProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)nineGridProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIImageStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_NineGridProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)playToSourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIImageStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlayToSourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WUXMImageSource*)source {
    ComPtr<ABI::Windows::UI::Xaml::Media::IImageSource> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage>(self);
    THROW_NS_IF_FAILED(_comInst->get_Source(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMImageSource>(unmarshalledReturn.Get());
}

- (void)setSource:(WUXMImageSource*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage>(self);
    THROW_NS_IF_FAILED(_comInst->put_Source(_getRtInterface<ABI::Windows::UI::Xaml::Media::IImageSource>(value).Get()));
}

- (WUXMStretch)stretch {
    ABI::Windows::UI::Xaml::Media::Stretch unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage>(self);
    THROW_NS_IF_FAILED(_comInst->get_Stretch(&unmarshalledReturn));
    return (WUXMStretch)unmarshalledReturn;
}

- (void)setStretch:(WUXMStretch)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage>(self);
    THROW_NS_IF_FAILED(_comInst->put_Stretch((ABI::Windows::UI::Xaml::Media::Stretch)value));
}

- (WXThickness*)nineGrid {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage>(self);
    THROW_NS_IF_FAILED(_comInst->get_NineGrid(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setNineGrid:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage>(self);
    THROW_NS_IF_FAILED(_comInst->put_NineGrid(*[value internalStruct]));
}

- (WMPPlayToSource*)playToSource {
    ComPtr<ABI::Windows::Media::PlayTo::IPlayToSource> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage>(self);
    THROW_NS_IF_FAILED(_comInst->get_PlayToSource(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WMPPlayToSource>(unmarshalledReturn.Get());
}

- (EventRegistrationToken)addImageFailedEvent:(WXExceptionRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage>(self);
    THROW_NS_IF_FAILED(_comInst->add_ImageFailed(Make<WXExceptionRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeImageFailedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ImageFailed(token));
}

- (EventRegistrationToken)addImageOpenedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage>(self);
    THROW_NS_IF_FAILED(_comInst->add_ImageOpened(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeImageOpenedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ImageOpened(token));
}

- (WMCCastingSource*)getAsCastingSource {
    ComPtr<ABI::Windows::Media::Casting::ICastingSource> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage2>(self);
    THROW_NS_IF_FAILED(_comInst->GetAsCastingSource(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WMCCastingSource>(unmarshalledReturn.Get());
}

- (WUCCompositionBrush*)getAlphaMask {
    ComPtr<ABI::Windows::UI::Composition::ICompositionBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IImage3>(self);
    THROW_NS_IF_FAILED(_comInst->GetAlphaMask(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUCCompositionBrush>(unmarshalledReturn.Get());
}

@end

@implementation WXCItemsPresenter

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsPresenter> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsPresenter").Get(), &out));
    return [_createRtProxy<WXCItemsPresenter>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsPresenterStatics> WXCIItemsPresenterStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsPresenterStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsPresenter").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTransitionsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTransitionsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)paddingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaddingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsPresenterStatics2> WXCIItemsPresenterStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsPresenterStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsPresenter").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)footerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsPresenterStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_FooterProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)footerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsPresenterStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_FooterTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)footerTransitionsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsPresenterStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_FooterTransitionsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WUXMATransitionCollection*)headerTransitions {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTransitions(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMATransitionCollection>(unmarshalledReturn.Get());
}

- (void)setHeaderTransitions:(WUXMATransitionCollection*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_HeaderTransitions(_getRtInterface<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>>(value).Get()));
}

- (WXThickness*)padding {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_Padding(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setPadding:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_Padding(*[value internalStruct]));
}

- (BOOL)areHorizontalSnapPointsRegular {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->get_AreHorizontalSnapPointsRegular(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (BOOL)areVerticalSnapPointsRegular {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->get_AreVerticalSnapPointsRegular(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (EventRegistrationToken)addHorizontalSnapPointsChangedEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->add_HorizontalSnapPointsChanged(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeHorizontalSnapPointsChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->remove_HorizontalSnapPointsChanged(token));
}

- (EventRegistrationToken)addVerticalSnapPointsChangedEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->add_VerticalSnapPointsChanged(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeVerticalSnapPointsChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->remove_VerticalSnapPointsChanged(token));
}

- (NSArray* /* float */)getIrregularSnapPoints:(WXCOrientation)orientation alignment:(WUXCPSnapPointsAlignment)alignment {
    ComPtr<IVectorView<float>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->GetIrregularSnapPoints((ABI::Windows::UI::Xaml::Controls::Orientation)orientation,
                                                        (ABI::Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment)alignment,
                                                        unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSArray_Single_create(unmarshalledReturn.Get());
}

- (float)getRegularSnapPoints:(WXCOrientation)orientation alignment:(WUXCPSnapPointsAlignment)alignment offset:(float*)offset {
    float offsetOutUnmarshaled;
    float unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->GetRegularSnapPoints((ABI::Windows::UI::Xaml::Controls::Orientation)orientation,
                                                      (ABI::Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment)alignment,
                                                      &offsetOutUnmarshaled,
                                                      &unmarshalledReturn));
    *offset = offsetOutUnmarshaled;
    return unmarshalledReturn;
}

- (RTObject*)footer {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter2>(self);
    THROW_NS_IF_FAILED(_comInst->get_Footer(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setFooter:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter2>(self);
    THROW_NS_IF_FAILED(_comInst->put_Footer([value comObj].Get()));
}

- (WXDataTemplate*)footerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter2>(self);
    THROW_NS_IF_FAILED(_comInst->get_FooterTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setFooterTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter2>(self);
    THROW_NS_IF_FAILED(_comInst->put_FooterTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WUXMATransitionCollection*)footerTransitions {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter2>(self);
    THROW_NS_IF_FAILED(_comInst->get_FooterTransitions(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMATransitionCollection>(unmarshalledReturn.Get());
}

- (void)setFooterTransitions:(WUXMATransitionCollection*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPresenter2>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_FooterTransitions(_getRtInterface<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>>(value).Get()));
}

@end

@implementation WXCRichTextBlockOverflow

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.RichTextBlockOverflow").Get(), &out));
    return [_createRtProxy<WXCRichTextBlockOverflow>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2> WXCIRichTextBlockOverflowStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RichTextBlockOverflow").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)maxLinesProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockOverflowStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxLinesProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics> WXCIRichTextBlockOverflowStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RichTextBlockOverflow").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)overflowContentTargetProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockOverflowStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OverflowContentTargetProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)paddingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockOverflowStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaddingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)hasOverflowContentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockOverflowStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HasOverflowContentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXCRichTextBlockOverflow*)overflowContentTarget {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(self);
    THROW_NS_IF_FAILED(_comInst->get_OverflowContentTarget(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCRichTextBlockOverflow>(unmarshalledReturn.Get());
}

- (void)setOverflowContentTarget:(WXCRichTextBlockOverflow*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_OverflowContentTarget(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(value).Get()));
}

- (WXThickness*)padding {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(self);
    THROW_NS_IF_FAILED(_comInst->get_Padding(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setPadding:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(self);
    THROW_NS_IF_FAILED(_comInst->put_Padding(*[value internalStruct]));
}

- (WXCRichTextBlock*)contentSource {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlock> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentSource(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCRichTextBlock>(unmarshalledReturn.Get());
}

- (BOOL)hasOverflowContent {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(self);
    THROW_NS_IF_FAILED(_comInst->get_HasOverflowContent(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (WUXDTextPointer*)contentStart {
    ComPtr<ABI::Windows::UI::Xaml::Documents::ITextPointer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentStart(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDTextPointer>(unmarshalledReturn.Get());
}

- (WUXDTextPointer*)contentEnd {
    ComPtr<ABI::Windows::UI::Xaml::Documents::ITextPointer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentEnd(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDTextPointer>(unmarshalledReturn.Get());
}

- (double)baselineOffset {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(self);
    THROW_NS_IF_FAILED(_comInst->get_BaselineOffset(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (WUXDTextPointer*)getPositionFromPoint:(WFPoint*)point {
    ComPtr<ABI::Windows::UI::Xaml::Documents::ITextPointer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(self);
    THROW_NS_IF_FAILED(_comInst->GetPositionFromPoint(*[point internalStruct], unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDTextPointer>(unmarshalledReturn.Get());
}

- (BOOL)focus:(WXFocusState)value {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(self);
    THROW_NS_IF_FAILED(_comInst->Focus((ABI::Windows::UI::Xaml::FocusState)value, &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (int)maxLines {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxLines(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaxLines:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxLines(value));
}

@end

@implementation WXCRichTextBlock

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlock> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.RichTextBlock").Get(), &out));
    return [_createRtProxy<WXCRichTextBlock>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockStatics> WXCIRichTextBlockStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RichTextBlock").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)fontSizeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontSizeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontFamilyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontFamilyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontWeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontWeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontStretchProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontStretchProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)foregroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ForegroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textWrappingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextWrappingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textTrimmingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextTrimmingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)paddingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaddingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)lineHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_LineHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)lineStackingStrategyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_LineStackingStrategyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)characterSpacingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CharacterSpacingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)overflowContentTargetProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OverflowContentTargetProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isTextSelectionEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTextSelectionEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)hasOverflowContentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HasOverflowContentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textIndentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextIndentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockStatics3> WXCIRichTextBlockStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RichTextBlock").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isTextScaleFactorEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTextScaleFactorEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockStatics2> WXCIRichTextBlockStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RichTextBlock").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)maxLinesProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxLinesProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textLineBoundsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextLineBoundsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectionHighlightColorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectionHighlightColorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)opticalMarginAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_OpticalMarginAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isColorFontEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsColorFontEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textReadingOrderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichTextBlockStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextReadingOrderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (double)fontSize {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontSize(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setFontSize:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontSize(value));
}

- (WUXMFontFamily*)fontFamily {
    ComPtr<ABI::Windows::UI::Xaml::Media::IFontFamily> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontFamily(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMFontFamily>(unmarshalledReturn.Get());
}

- (void)setFontFamily:(WUXMFontFamily*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontFamily(_getRtInterface<ABI::Windows::UI::Xaml::Media::IFontFamily>(value).Get()));
}

- (WUTFontWeight*)fontWeight {
    ABI::Windows::UI::Text::FontWeight unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontWeight(&unmarshalledReturn));
    return WUTFontWeight_create(unmarshalledReturn);
}

- (void)setFontWeight:(WUTFontWeight*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontWeight(*[value internalStruct]));
}

- (WUTFontStyle)fontStyle {
    ABI::Windows::UI::Text::FontStyle unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontStyle(&unmarshalledReturn));
    return (WUTFontStyle)unmarshalledReturn;
}

- (void)setFontStyle:(WUTFontStyle)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontStyle((ABI::Windows::UI::Text::FontStyle)value));
}

- (WUTFontStretch)fontStretch {
    ABI::Windows::UI::Text::FontStretch unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontStretch(&unmarshalledReturn));
    return (WUTFontStretch)unmarshalledReturn;
}

- (void)setFontStretch:(WUTFontStretch)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontStretch((ABI::Windows::UI::Text::FontStretch)value));
}

- (WUXMBrush*)foreground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_Foreground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setForeground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_Foreground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WXTextWrapping)textWrapping {
    ABI::Windows::UI::Xaml::TextWrapping unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextWrapping(&unmarshalledReturn));
    return (WXTextWrapping)unmarshalledReturn;
}

- (void)setTextWrapping:(WXTextWrapping)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextWrapping((ABI::Windows::UI::Xaml::TextWrapping)value));
}

- (WXTextTrimming)textTrimming {
    ABI::Windows::UI::Xaml::TextTrimming unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextTrimming(&unmarshalledReturn));
    return (WXTextTrimming)unmarshalledReturn;
}

- (void)setTextTrimming:(WXTextTrimming)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextTrimming((ABI::Windows::UI::Xaml::TextTrimming)value));
}

- (WXTextAlignment)textAlignment {
    ABI::Windows::UI::Xaml::TextAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextAlignment(&unmarshalledReturn));
    return (WXTextAlignment)unmarshalledReturn;
}

- (void)setTextAlignment:(WXTextAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextAlignment((ABI::Windows::UI::Xaml::TextAlignment)value));
}

- (WUXDBlockCollection*)blocks {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Documents::Block*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_Blocks(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDBlockCollection>(unmarshalledReturn.Get());
}

- (WXThickness*)padding {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_Padding(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setPadding:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_Padding(*[value internalStruct]));
}

- (double)lineHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_LineHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setLineHeight:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_LineHeight(value));
}

- (WXLineStackingStrategy)lineStackingStrategy {
    ABI::Windows::UI::Xaml::LineStackingStrategy unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_LineStackingStrategy(&unmarshalledReturn));
    return (WXLineStackingStrategy)unmarshalledReturn;
}

- (void)setLineStackingStrategy:(WXLineStackingStrategy)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_LineStackingStrategy((ABI::Windows::UI::Xaml::LineStackingStrategy)value));
}

- (int)characterSpacing {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_CharacterSpacing(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setCharacterSpacing:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_CharacterSpacing(value));
}

- (WXCRichTextBlockOverflow*)overflowContentTarget {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_OverflowContentTarget(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCRichTextBlockOverflow>(unmarshalledReturn.Get());
}

- (void)setOverflowContentTarget:(WXCRichTextBlockOverflow*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_OverflowContentTarget(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow>(value).Get()));
}

- (BOOL)isTextSelectionEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTextSelectionEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTextSelectionEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTextSelectionEnabled((boolean)value));
}

- (BOOL)hasOverflowContent {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_HasOverflowContent(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (NSString*)selectedText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (WUXDTextPointer*)contentStart {
    ComPtr<ABI::Windows::UI::Xaml::Documents::ITextPointer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentStart(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDTextPointer>(unmarshalledReturn.Get());
}

- (WUXDTextPointer*)contentEnd {
    ComPtr<ABI::Windows::UI::Xaml::Documents::ITextPointer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentEnd(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDTextPointer>(unmarshalledReturn.Get());
}

- (WUXDTextPointer*)selectionStart {
    ComPtr<ABI::Windows::UI::Xaml::Documents::ITextPointer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionStart(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDTextPointer>(unmarshalledReturn.Get());
}

- (WUXDTextPointer*)selectionEnd {
    ComPtr<ABI::Windows::UI::Xaml::Documents::ITextPointer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionEnd(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDTextPointer>(unmarshalledReturn.Get());
}

- (double)baselineOffset {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_BaselineOffset(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (EventRegistrationToken)addSelectionChangedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->add_SelectionChanged(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeSelectionChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->remove_SelectionChanged(token));
}

- (EventRegistrationToken)addContextMenuOpeningEvent:(WXCContextMenuOpeningEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->add_ContextMenuOpening(Make<WXCContextMenuOpeningEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeContextMenuOpeningEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ContextMenuOpening(token));
}

- (void)selectAll {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->SelectAll());
}

- (void)select:(WUXDTextPointer*)start end:(WUXDTextPointer*)end {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->Select(_getRtInterface<ABI::Windows::UI::Xaml::Documents::ITextPointer>(start).Get(),
                                        _getRtInterface<ABI::Windows::UI::Xaml::Documents::ITextPointer>(end).Get()));
}

- (WUXDTextPointer*)getPositionFromPoint:(WFPoint*)point {
    ComPtr<ABI::Windows::UI::Xaml::Documents::ITextPointer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->GetPositionFromPoint(*[point internalStruct], unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDTextPointer>(unmarshalledReturn.Get());
}

- (BOOL)focus:(WXFocusState)value {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->Focus((ABI::Windows::UI::Xaml::FocusState)value, &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (double)textIndent {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextIndent(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setTextIndent:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextIndent(value));
}

- (int)maxLines {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxLines(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaxLines:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxLines(value));
}

- (WXTextLineBounds)textLineBounds {
    ABI::Windows::UI::Xaml::TextLineBounds unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextLineBounds(&unmarshalledReturn));
    return (WXTextLineBounds)unmarshalledReturn;
}

- (void)setTextLineBounds:(WXTextLineBounds)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextLineBounds((ABI::Windows::UI::Xaml::TextLineBounds)value));
}

- (WUXMSolidColorBrush*)selectionHighlightColor {
    ComPtr<ABI::Windows::UI::Xaml::Media::ISolidColorBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionHighlightColor(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMSolidColorBrush>(unmarshalledReturn.Get());
}

- (void)setSelectionHighlightColor:(WUXMSolidColorBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock2>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_SelectionHighlightColor(_getRtInterface<ABI::Windows::UI::Xaml::Media::ISolidColorBrush>(value).Get()));
}

- (WXOpticalMarginAlignment)opticalMarginAlignment {
    ABI::Windows::UI::Xaml::OpticalMarginAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->get_OpticalMarginAlignment(&unmarshalledReturn));
    return (WXOpticalMarginAlignment)unmarshalledReturn;
}

- (void)setOpticalMarginAlignment:(WXOpticalMarginAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->put_OpticalMarginAlignment((ABI::Windows::UI::Xaml::OpticalMarginAlignment)value));
}

- (BOOL)isColorFontEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsColorFontEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsColorFontEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsColorFontEnabled((boolean)value));
}

- (WXTextReadingOrder)textReadingOrder {
    ABI::Windows::UI::Xaml::TextReadingOrder unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextReadingOrder(&unmarshalledReturn));
    return (WXTextReadingOrder)unmarshalledReturn;
}

- (void)setTextReadingOrder:(WXTextReadingOrder)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextReadingOrder((ABI::Windows::UI::Xaml::TextReadingOrder)value));
}

- (BOOL)isTextScaleFactorEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock3>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTextScaleFactorEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTextScaleFactorEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichTextBlock3>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTextScaleFactorEnabled((boolean)value));
}

@end

@implementation WXCTextBlock

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBlock> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.TextBlock").Get(), &out));
    return [_createRtProxy<WXCTextBlock>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBlockStatics2> WXCITextBlockStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBlockStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.TextBlock").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)selectionHighlightColorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectionHighlightColorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxLinesProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxLinesProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textLineBoundsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextLineBoundsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)opticalMarginAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_OpticalMarginAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isColorFontEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsColorFontEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textReadingOrderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextReadingOrderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBlockStatics> WXCITextBlockStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBlockStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.TextBlock").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)fontSizeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontSizeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontFamilyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontFamilyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontWeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontWeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontStretchProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontStretchProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)characterSpacingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CharacterSpacingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)foregroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ForegroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textWrappingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextWrappingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textTrimmingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextTrimmingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)paddingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaddingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)lineHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_LineHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)lineStackingStrategyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_LineStackingStrategyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isTextSelectionEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTextSelectionEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBlockStatics3> WXCITextBlockStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBlockStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.TextBlock").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isTextScaleFactorEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBlockStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTextScaleFactorEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (double)fontSize {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontSize(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setFontSize:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontSize(value));
}

- (WUXMFontFamily*)fontFamily {
    ComPtr<ABI::Windows::UI::Xaml::Media::IFontFamily> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontFamily(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMFontFamily>(unmarshalledReturn.Get());
}

- (void)setFontFamily:(WUXMFontFamily*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontFamily(_getRtInterface<ABI::Windows::UI::Xaml::Media::IFontFamily>(value).Get()));
}

- (WUTFontWeight*)fontWeight {
    ABI::Windows::UI::Text::FontWeight unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontWeight(&unmarshalledReturn));
    return WUTFontWeight_create(unmarshalledReturn);
}

- (void)setFontWeight:(WUTFontWeight*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontWeight(*[value internalStruct]));
}

- (WUTFontStyle)fontStyle {
    ABI::Windows::UI::Text::FontStyle unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontStyle(&unmarshalledReturn));
    return (WUTFontStyle)unmarshalledReturn;
}

- (void)setFontStyle:(WUTFontStyle)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontStyle((ABI::Windows::UI::Text::FontStyle)value));
}

- (WUTFontStretch)fontStretch {
    ABI::Windows::UI::Text::FontStretch unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontStretch(&unmarshalledReturn));
    return (WUTFontStretch)unmarshalledReturn;
}

- (void)setFontStretch:(WUTFontStretch)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontStretch((ABI::Windows::UI::Text::FontStretch)value));
}

- (int)characterSpacing {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_CharacterSpacing(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setCharacterSpacing:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_CharacterSpacing(value));
}

- (WUXMBrush*)foreground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_Foreground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setForeground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_Foreground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WXTextWrapping)textWrapping {
    ABI::Windows::UI::Xaml::TextWrapping unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextWrapping(&unmarshalledReturn));
    return (WXTextWrapping)unmarshalledReturn;
}

- (void)setTextWrapping:(WXTextWrapping)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextWrapping((ABI::Windows::UI::Xaml::TextWrapping)value));
}

- (WXTextTrimming)textTrimming {
    ABI::Windows::UI::Xaml::TextTrimming unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextTrimming(&unmarshalledReturn));
    return (WXTextTrimming)unmarshalledReturn;
}

- (void)setTextTrimming:(WXTextTrimming)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextTrimming((ABI::Windows::UI::Xaml::TextTrimming)value));
}

- (WXTextAlignment)textAlignment {
    ABI::Windows::UI::Xaml::TextAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextAlignment(&unmarshalledReturn));
    return (WXTextAlignment)unmarshalledReturn;
}

- (void)setTextAlignment:(WXTextAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextAlignment((ABI::Windows::UI::Xaml::TextAlignment)value));
}

- (NSString*)text {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_Text(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_Text(nsStrToHstr(value).Get()));
}

- (WUXDInlineCollection*)inlines {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Documents::Inline*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_Inlines(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDInlineCollection>(unmarshalledReturn.Get());
}

- (WXThickness*)padding {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_Padding(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setPadding:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_Padding(*[value internalStruct]));
}

- (double)lineHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_LineHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setLineHeight:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_LineHeight(value));
}

- (WXLineStackingStrategy)lineStackingStrategy {
    ABI::Windows::UI::Xaml::LineStackingStrategy unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_LineStackingStrategy(&unmarshalledReturn));
    return (WXLineStackingStrategy)unmarshalledReturn;
}

- (void)setLineStackingStrategy:(WXLineStackingStrategy)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_LineStackingStrategy((ABI::Windows::UI::Xaml::LineStackingStrategy)value));
}

- (BOOL)isTextSelectionEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTextSelectionEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTextSelectionEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTextSelectionEnabled((boolean)value));
}

- (NSString*)selectedText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (WUXDTextPointer*)contentStart {
    ComPtr<ABI::Windows::UI::Xaml::Documents::ITextPointer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentStart(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDTextPointer>(unmarshalledReturn.Get());
}

- (WUXDTextPointer*)contentEnd {
    ComPtr<ABI::Windows::UI::Xaml::Documents::ITextPointer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentEnd(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDTextPointer>(unmarshalledReturn.Get());
}

- (WUXDTextPointer*)selectionStart {
    ComPtr<ABI::Windows::UI::Xaml::Documents::ITextPointer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionStart(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDTextPointer>(unmarshalledReturn.Get());
}

- (WUXDTextPointer*)selectionEnd {
    ComPtr<ABI::Windows::UI::Xaml::Documents::ITextPointer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionEnd(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDTextPointer>(unmarshalledReturn.Get());
}

- (double)baselineOffset {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->get_BaselineOffset(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (EventRegistrationToken)addSelectionChangedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->add_SelectionChanged(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeSelectionChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->remove_SelectionChanged(token));
}

- (EventRegistrationToken)addContextMenuOpeningEvent:(WXCContextMenuOpeningEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->add_ContextMenuOpening(Make<WXCContextMenuOpeningEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeContextMenuOpeningEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ContextMenuOpening(token));
}

- (void)selectAll {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->SelectAll());
}

- (void)select:(WUXDTextPointer*)start end:(WUXDTextPointer*)end {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->Select(_getRtInterface<ABI::Windows::UI::Xaml::Documents::ITextPointer>(start).Get(),
                                        _getRtInterface<ABI::Windows::UI::Xaml::Documents::ITextPointer>(end).Get()));
}

- (BOOL)focus:(WXFocusState)value {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock>(self);
    THROW_NS_IF_FAILED(_comInst->Focus((ABI::Windows::UI::Xaml::FocusState)value, &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (WUXMSolidColorBrush*)selectionHighlightColor {
    ComPtr<ABI::Windows::UI::Xaml::Media::ISolidColorBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionHighlightColor(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMSolidColorBrush>(unmarshalledReturn.Get());
}

- (void)setSelectionHighlightColor:(WUXMSolidColorBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock2>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_SelectionHighlightColor(_getRtInterface<ABI::Windows::UI::Xaml::Media::ISolidColorBrush>(value).Get()));
}

- (int)maxLines {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxLines(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaxLines:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxLines(value));
}

- (WXTextLineBounds)textLineBounds {
    ABI::Windows::UI::Xaml::TextLineBounds unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextLineBounds(&unmarshalledReturn));
    return (WXTextLineBounds)unmarshalledReturn;
}

- (void)setTextLineBounds:(WXTextLineBounds)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextLineBounds((ABI::Windows::UI::Xaml::TextLineBounds)value));
}

- (WXOpticalMarginAlignment)opticalMarginAlignment {
    ABI::Windows::UI::Xaml::OpticalMarginAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->get_OpticalMarginAlignment(&unmarshalledReturn));
    return (WXOpticalMarginAlignment)unmarshalledReturn;
}

- (void)setOpticalMarginAlignment:(WXOpticalMarginAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->put_OpticalMarginAlignment((ABI::Windows::UI::Xaml::OpticalMarginAlignment)value));
}

- (BOOL)isColorFontEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsColorFontEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsColorFontEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsColorFontEnabled((boolean)value));
}

- (WXTextReadingOrder)textReadingOrder {
    ABI::Windows::UI::Xaml::TextReadingOrder unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextReadingOrder(&unmarshalledReturn));
    return (WXTextReadingOrder)unmarshalledReturn;
}

- (void)setTextReadingOrder:(WXTextReadingOrder)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock2>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextReadingOrder((ABI::Windows::UI::Xaml::TextReadingOrder)value));
}

- (BOOL)isTextScaleFactorEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock3>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTextScaleFactorEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTextScaleFactorEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock3>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTextScaleFactorEnabled((boolean)value));
}

- (WUCCompositionBrush*)getAlphaMask {
    ComPtr<ABI::Windows::UI::Composition::ICompositionBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBlock4>(self);
    THROW_NS_IF_FAILED(_comInst->GetAlphaMask(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUCCompositionBrush>(unmarshalledReturn.Get());
}

@end

@implementation WXCViewbox

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IViewbox> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.Viewbox").Get(), &out));
    return [_createRtProxy<WXCViewbox>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IViewboxStatics> WXCIViewboxStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IViewboxStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Viewbox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)stretchProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIViewboxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_StretchProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)stretchDirectionProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIViewboxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_StretchDirectionProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXUIElement*)child {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IViewbox>(self);
    THROW_NS_IF_FAILED(_comInst->get_Child(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setChild:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IViewbox>(self);
    THROW_NS_IF_FAILED(_comInst->put_Child(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

- (WUXMStretch)stretch {
    ABI::Windows::UI::Xaml::Media::Stretch unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IViewbox>(self);
    THROW_NS_IF_FAILED(_comInst->get_Stretch(&unmarshalledReturn));
    return (WUXMStretch)unmarshalledReturn;
}

- (void)setStretch:(WUXMStretch)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IViewbox>(self);
    THROW_NS_IF_FAILED(_comInst->put_Stretch((ABI::Windows::UI::Xaml::Media::Stretch)value));
}

- (WXCStretchDirection)stretchDirection {
    ABI::Windows::UI::Xaml::Controls::StretchDirection unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IViewbox>(self);
    THROW_NS_IF_FAILED(_comInst->get_StretchDirection(&unmarshalledReturn));
    return (WXCStretchDirection)unmarshalledReturn;
}

- (void)setStretchDirection:(WXCStretchDirection)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IViewbox>(self);
    THROW_NS_IF_FAILED(_comInst->put_StretchDirection((ABI::Windows::UI::Xaml::Controls::StretchDirection)value));
}

@end

@implementation WXCCanvas

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICanvas> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICanvasFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Canvas").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICanvas> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXIFrameworkElementOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXIFrameworkElementOverrides)]) {
        typedOuter = Make<WXIFrameworkElementOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCCanvas* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ICanvasStatics> WXCICanvasStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICanvasStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Canvas").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)leftProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICanvasStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_LeftProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (double)getLeft:(WXUIElement*)element {
    double unmarshalledReturn;
    auto _comInst = WXCICanvasStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetLeft(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), &unmarshalledReturn));
    return unmarshalledReturn;
}

+ (void)setLeft:(WXUIElement*)element length:(double)length {
    auto _comInst = WXCICanvasStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetLeft(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), length));
}

+ (WXDependencyProperty*)topProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICanvasStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TopProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (double)getTop:(WXUIElement*)element {
    double unmarshalledReturn;
    auto _comInst = WXCICanvasStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetTop(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), &unmarshalledReturn));
    return unmarshalledReturn;
}

+ (void)setTop:(WXUIElement*)element length:(double)length {
    auto _comInst = WXCICanvasStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetTop(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), length));
}

+ (WXDependencyProperty*)zIndexProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICanvasStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ZIndexProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (int)getZIndex:(WXUIElement*)element {
    int unmarshalledReturn;
    auto _comInst = WXCICanvasStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetZIndex(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), &unmarshalledReturn));
    return unmarshalledReturn;
}

+ (void)setZIndex:(WXUIElement*)element value:(int)value {
    auto _comInst = WXCICanvasStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetZIndex(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), value));
}

@end

@implementation WXCGrid

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGrid> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGridFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Grid").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGrid> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXIFrameworkElementOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXIFrameworkElementOverrides)]) {
        typedOuter = Make<WXIFrameworkElementOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCGrid* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IGridStatics> WXCIGridStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGridStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Grid").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)rowProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_RowProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (int)getRow:(WXFrameworkElement*)element {
    int unmarshalledReturn;
    auto _comInst = WXCIGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetRow(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(element).Get(), &unmarshalledReturn));
    return unmarshalledReturn;
}

+ (void)setRow:(WXFrameworkElement*)element value:(int)value {
    auto _comInst = WXCIGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetRow(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(element).Get(), value));
}

+ (WXDependencyProperty*)columnProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ColumnProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (int)getColumn:(WXFrameworkElement*)element {
    int unmarshalledReturn;
    auto _comInst = WXCIGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetColumn(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(element).Get(), &unmarshalledReturn));
    return unmarshalledReturn;
}

+ (void)setColumn:(WXFrameworkElement*)element value:(int)value {
    auto _comInst = WXCIGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetColumn(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(element).Get(), value));
}

+ (WXDependencyProperty*)rowSpanProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_RowSpanProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (int)getRowSpan:(WXFrameworkElement*)element {
    int unmarshalledReturn;
    auto _comInst = WXCIGridStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetRowSpan(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(element).Get(), &unmarshalledReturn));
    return unmarshalledReturn;
}

+ (void)setRowSpan:(WXFrameworkElement*)element value:(int)value {
    auto _comInst = WXCIGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetRowSpan(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(element).Get(), value));
}

+ (WXDependencyProperty*)columnSpanProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ColumnSpanProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (int)getColumnSpan:(WXFrameworkElement*)element {
    int unmarshalledReturn;
    auto _comInst = WXCIGridStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetColumnSpan(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(element).Get(), &unmarshalledReturn));
    return unmarshalledReturn;
}

+ (void)setColumnSpan:(WXFrameworkElement*)element value:(int)value {
    auto _comInst = WXCIGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetColumnSpan(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(element).Get(), value));
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IGridStatics2> WXCIGridStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGridStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Grid").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)borderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIGridStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_BorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)borderThicknessProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIGridStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_BorderThicknessProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)cornerRadiusProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIGridStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_CornerRadiusProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)paddingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIGridStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaddingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXCRowDefinitionCollection*)rowDefinitions {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Controls::RowDefinition*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_RowDefinitions(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCRowDefinitionCollection>(unmarshalledReturn.Get());
}

- (WXCColumnDefinitionCollection*)columnDefinitions {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Controls::ColumnDefinition*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_ColumnDefinitions(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCColumnDefinitionCollection>(unmarshalledReturn.Get());
}

- (WUXMBrush*)borderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGrid2>(self);
    THROW_NS_IF_FAILED(_comInst->get_BorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGrid2>(self);
    THROW_NS_IF_FAILED(_comInst->put_BorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WXThickness*)borderThickness {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGrid2>(self);
    THROW_NS_IF_FAILED(_comInst->get_BorderThickness(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setBorderThickness:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGrid2>(self);
    THROW_NS_IF_FAILED(_comInst->put_BorderThickness(*[value internalStruct]));
}

- (WXCornerRadius*)cornerRadius {
    ABI::Windows::UI::Xaml::CornerRadius unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGrid2>(self);
    THROW_NS_IF_FAILED(_comInst->get_CornerRadius(&unmarshalledReturn));
    return WXCornerRadius_create(unmarshalledReturn);
}

- (void)setCornerRadius:(WXCornerRadius*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGrid2>(self);
    THROW_NS_IF_FAILED(_comInst->put_CornerRadius(*[value internalStruct]));
}

- (WXThickness*)padding {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGrid2>(self);
    THROW_NS_IF_FAILED(_comInst->get_Padding(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setPadding:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGrid2>(self);
    THROW_NS_IF_FAILED(_comInst->put_Padding(*[value internalStruct]));
}

@end

@implementation WXCRelativePanel

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRelativePanel> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRelativePanelFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RelativePanel").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRelativePanel> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXIFrameworkElementOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXIFrameworkElementOverrides)]) {
        typedOuter = Make<WXIFrameworkElementOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCRelativePanel* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IRelativePanelStatics> WXCIRelativePanelStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRelativePanelStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RelativePanel").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)leftOfProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_LeftOfProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (RTObject*)getLeftOf:(WXUIElement*)element {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetLeftOf(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

+ (void)setLeftOf:(WXUIElement*)element value:(RTObject*)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetLeftOf(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), [value comObj].Get()));
}

+ (WXDependencyProperty*)aboveProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AboveProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (RTObject*)getAbove:(WXUIElement*)element {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetAbove(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

+ (void)setAbove:(WXUIElement*)element value:(RTObject*)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetAbove(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), [value comObj].Get()));
}

+ (WXDependencyProperty*)rightOfProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_RightOfProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (RTObject*)getRightOf:(WXUIElement*)element {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetRightOf(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

+ (void)setRightOf:(WXUIElement*)element value:(RTObject*)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetRightOf(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), [value comObj].Get()));
}

+ (WXDependencyProperty*)belowProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BelowProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (RTObject*)getBelow:(WXUIElement*)element {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetBelow(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

+ (void)setBelow:(WXUIElement*)element value:(RTObject*)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetBelow(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), [value comObj].Get()));
}

+ (WXDependencyProperty*)alignHorizontalCenterWithProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AlignHorizontalCenterWithProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (RTObject*)getAlignHorizontalCenterWith:(WXUIElement*)element {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetAlignHorizontalCenterWith(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(),
                                                              unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

+ (void)setAlignHorizontalCenterWith:(WXUIElement*)element value:(RTObject*)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetAlignHorizontalCenterWith(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), [value comObj].Get()));
}

+ (WXDependencyProperty*)alignVerticalCenterWithProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AlignVerticalCenterWithProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (RTObject*)getAlignVerticalCenterWith:(WXUIElement*)element {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetAlignVerticalCenterWith(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(),
                                                            unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

+ (void)setAlignVerticalCenterWith:(WXUIElement*)element value:(RTObject*)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetAlignVerticalCenterWith(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), [value comObj].Get()));
}

+ (WXDependencyProperty*)alignLeftWithProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AlignLeftWithProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (RTObject*)getAlignLeftWith:(WXUIElement*)element {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetAlignLeftWith(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

+ (void)setAlignLeftWith:(WXUIElement*)element value:(RTObject*)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetAlignLeftWith(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), [value comObj].Get()));
}

+ (WXDependencyProperty*)alignTopWithProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AlignTopWithProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (RTObject*)getAlignTopWith:(WXUIElement*)element {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetAlignTopWith(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

+ (void)setAlignTopWith:(WXUIElement*)element value:(RTObject*)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetAlignTopWith(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), [value comObj].Get()));
}

+ (WXDependencyProperty*)alignRightWithProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AlignRightWithProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (RTObject*)getAlignRightWith:(WXUIElement*)element {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetAlignRightWith(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

+ (void)setAlignRightWith:(WXUIElement*)element value:(RTObject*)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetAlignRightWith(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), [value comObj].Get()));
}

+ (WXDependencyProperty*)alignBottomWithProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AlignBottomWithProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (RTObject*)getAlignBottomWith:(WXUIElement*)element {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetAlignBottomWith(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(),
                                                    unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

+ (void)setAlignBottomWith:(WXUIElement*)element value:(RTObject*)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetAlignBottomWith(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), [value comObj].Get()));
}

+ (WXDependencyProperty*)alignLeftWithPanelProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AlignLeftWithPanelProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getAlignLeftWithPanel:(WXUIElement*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetAlignLeftWithPanel(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setAlignLeftWithPanel:(WXUIElement*)element value:(BOOL)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetAlignLeftWithPanel(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), (boolean)value));
}

+ (WXDependencyProperty*)alignTopWithPanelProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AlignTopWithPanelProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getAlignTopWithPanel:(WXUIElement*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetAlignTopWithPanel(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setAlignTopWithPanel:(WXUIElement*)element value:(BOOL)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetAlignTopWithPanel(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), (boolean)value));
}

+ (WXDependencyProperty*)alignRightWithPanelProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AlignRightWithPanelProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getAlignRightWithPanel:(WXUIElement*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetAlignRightWithPanel(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setAlignRightWithPanel:(WXUIElement*)element value:(BOOL)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetAlignRightWithPanel(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), (boolean)value));
}

+ (WXDependencyProperty*)alignBottomWithPanelProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AlignBottomWithPanelProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getAlignBottomWithPanel:(WXUIElement*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetAlignBottomWithPanel(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setAlignBottomWithPanel:(WXUIElement*)element value:(BOOL)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetAlignBottomWithPanel(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), (boolean)value));
}

+ (WXDependencyProperty*)alignHorizontalCenterWithPanelProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AlignHorizontalCenterWithPanelProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getAlignHorizontalCenterWithPanel:(WXUIElement*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetAlignHorizontalCenterWithPanel(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(),
                                                                   &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setAlignHorizontalCenterWithPanel:(WXUIElement*)element value:(BOOL)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetAlignHorizontalCenterWithPanel(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), (boolean)value));
}

+ (WXDependencyProperty*)alignVerticalCenterWithPanelProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AlignVerticalCenterWithPanelProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getAlignVerticalCenterWithPanel:(WXUIElement*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetAlignVerticalCenterWithPanel(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setAlignVerticalCenterWithPanel:(WXUIElement*)element value:(BOOL)value {
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetAlignVerticalCenterWithPanel(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), (boolean)value));
}

+ (WXDependencyProperty*)borderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)borderThicknessProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BorderThicknessProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)cornerRadiusProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CornerRadiusProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)paddingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRelativePanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaddingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WUXMBrush*)borderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRelativePanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_BorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRelativePanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_BorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WXThickness*)borderThickness {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRelativePanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_BorderThickness(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setBorderThickness:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRelativePanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_BorderThickness(*[value internalStruct]));
}

- (WXCornerRadius*)cornerRadius {
    ABI::Windows::UI::Xaml::CornerRadius unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRelativePanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_CornerRadius(&unmarshalledReturn));
    return WXCornerRadius_create(unmarshalledReturn);
}

- (void)setCornerRadius:(WXCornerRadius*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRelativePanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_CornerRadius(*[value internalStruct]));
}

- (WXThickness*)padding {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRelativePanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_Padding(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setPadding:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRelativePanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_Padding(*[value internalStruct]));
}

@end

@implementation WXCStackPanel

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IStackPanel> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IStackPanelFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.StackPanel").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IStackPanel> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXIFrameworkElementOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXIFrameworkElementOverrides)]) {
        typedOuter = Make<WXIFrameworkElementOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCStackPanel* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IStackPanelStatics2> WXCIStackPanelStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IStackPanelStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.StackPanel").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)borderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIStackPanelStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_BorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)borderThicknessProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIStackPanelStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_BorderThicknessProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)cornerRadiusProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIStackPanelStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_CornerRadiusProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)paddingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIStackPanelStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaddingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IStackPanelStatics> WXCIStackPanelStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IStackPanelStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.StackPanel").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)areScrollSnapPointsRegularProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIStackPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AreScrollSnapPointsRegularProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)orientationProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIStackPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OrientationProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)areScrollSnapPointsRegular {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_AreScrollSnapPointsRegular(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setAreScrollSnapPointsRegular:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_AreScrollSnapPointsRegular((boolean)value));
}

- (WXCOrientation)orientation {
    ABI::Windows::UI::Xaml::Controls::Orientation unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_Orientation(&unmarshalledReturn));
    return (WXCOrientation)unmarshalledReturn;
}

- (void)setOrientation:(WXCOrientation)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_Orientation((ABI::Windows::UI::Xaml::Controls::Orientation)value));
}

- (BOOL)areHorizontalSnapPointsRegular {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->get_AreHorizontalSnapPointsRegular(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (BOOL)areVerticalSnapPointsRegular {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->get_AreVerticalSnapPointsRegular(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (EventRegistrationToken)addHorizontalSnapPointsChangedEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->add_HorizontalSnapPointsChanged(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeHorizontalSnapPointsChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->remove_HorizontalSnapPointsChanged(token));
}

- (EventRegistrationToken)addVerticalSnapPointsChangedEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->add_VerticalSnapPointsChanged(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeVerticalSnapPointsChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->remove_VerticalSnapPointsChanged(token));
}

- (NSArray* /* float */)getIrregularSnapPoints:(WXCOrientation)orientation alignment:(WUXCPSnapPointsAlignment)alignment {
    ComPtr<IVectorView<float>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->GetIrregularSnapPoints((ABI::Windows::UI::Xaml::Controls::Orientation)orientation,
                                                        (ABI::Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment)alignment,
                                                        unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSArray_Single_create(unmarshalledReturn.Get());
}

- (float)getRegularSnapPoints:(WXCOrientation)orientation alignment:(WUXCPSnapPointsAlignment)alignment offset:(float*)offset {
    float offsetOutUnmarshaled;
    float unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>(self);
    THROW_NS_IF_FAILED(_comInst->GetRegularSnapPoints((ABI::Windows::UI::Xaml::Controls::Orientation)orientation,
                                                      (ABI::Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment)alignment,
                                                      &offsetOutUnmarshaled,
                                                      &unmarshalledReturn));
    *offset = offsetOutUnmarshaled;
    return unmarshalledReturn;
}

- (WUXMBrush*)borderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStackPanel2>(self);
    THROW_NS_IF_FAILED(_comInst->get_BorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStackPanel2>(self);
    THROW_NS_IF_FAILED(_comInst->put_BorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WXThickness*)borderThickness {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStackPanel2>(self);
    THROW_NS_IF_FAILED(_comInst->get_BorderThickness(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setBorderThickness:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStackPanel2>(self);
    THROW_NS_IF_FAILED(_comInst->put_BorderThickness(*[value internalStruct]));
}

- (WXCornerRadius*)cornerRadius {
    ABI::Windows::UI::Xaml::CornerRadius unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStackPanel2>(self);
    THROW_NS_IF_FAILED(_comInst->get_CornerRadius(&unmarshalledReturn));
    return WXCornerRadius_create(unmarshalledReturn);
}

- (void)setCornerRadius:(WXCornerRadius*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStackPanel2>(self);
    THROW_NS_IF_FAILED(_comInst->put_CornerRadius(*[value internalStruct]));
}

- (WXThickness*)padding {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStackPanel2>(self);
    THROW_NS_IF_FAILED(_comInst->get_Padding(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setPadding:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IStackPanel2>(self);
    THROW_NS_IF_FAILED(_comInst->put_Padding(*[value internalStruct]));
}

- (void)getInsertionIndexes:(WFPoint*)position first:(int*)first second:(int*)second {
    int firstOutUnmarshaled;
    int secondOutUnmarshaled;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInsertionPanel>(self);
    THROW_NS_IF_FAILED(_comInst->GetInsertionIndexes(*[position internalStruct], &firstOutUnmarshaled, &secondOutUnmarshaled));
    *first = firstOutUnmarshaled;
    *second = secondOutUnmarshaled;
}

@end

@implementation WXCVariableSizedWrapGrid

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.VariableSizedWrapGrid").Get(), &out));
    return [_createRtProxy<WXCVariableSizedWrapGrid>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics> WXCIVariableSizedWrapGridStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.VariableSizedWrapGrid").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)itemHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIVariableSizedWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)itemWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIVariableSizedWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)orientationProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIVariableSizedWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OrientationProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)horizontalChildrenAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIVariableSizedWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HorizontalChildrenAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)verticalChildrenAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIVariableSizedWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VerticalChildrenAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maximumRowsOrColumnsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIVariableSizedWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaximumRowsOrColumnsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)rowSpanProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIVariableSizedWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_RowSpanProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (int)getRowSpan:(WXUIElement*)element {
    int unmarshalledReturn;
    auto _comInst = WXCIVariableSizedWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetRowSpan(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), &unmarshalledReturn));
    return unmarshalledReturn;
}

+ (void)setRowSpan:(WXUIElement*)element value:(int)value {
    auto _comInst = WXCIVariableSizedWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetRowSpan(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), value));
}

+ (WXDependencyProperty*)columnSpanProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIVariableSizedWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ColumnSpanProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (int)getColumnSpan:(WXUIElement*)element {
    int unmarshalledReturn;
    auto _comInst = WXCIVariableSizedWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetColumnSpan(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), &unmarshalledReturn));
    return unmarshalledReturn;
}

+ (void)setColumnSpan:(WXUIElement*)element value:(int)value {
    auto _comInst = WXCIVariableSizedWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetColumnSpan(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(element).Get(), value));
}

- (double)itemHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setItemHeight:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemHeight(value));
}

- (double)itemWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setItemWidth:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemWidth(value));
}

- (WXCOrientation)orientation {
    ABI::Windows::UI::Xaml::Controls::Orientation unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_Orientation(&unmarshalledReturn));
    return (WXCOrientation)unmarshalledReturn;
}

- (void)setOrientation:(WXCOrientation)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_Orientation((ABI::Windows::UI::Xaml::Controls::Orientation)value));
}

- (WXHorizontalAlignment)horizontalChildrenAlignment {
    ABI::Windows::UI::Xaml::HorizontalAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalChildrenAlignment(&unmarshalledReturn));
    return (WXHorizontalAlignment)unmarshalledReturn;
}

- (void)setHorizontalChildrenAlignment:(WXHorizontalAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_HorizontalChildrenAlignment((ABI::Windows::UI::Xaml::HorizontalAlignment)value));
}

- (WXVerticalAlignment)verticalChildrenAlignment {
    ABI::Windows::UI::Xaml::VerticalAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalChildrenAlignment(&unmarshalledReturn));
    return (WXVerticalAlignment)unmarshalledReturn;
}

- (void)setVerticalChildrenAlignment:(WXVerticalAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_VerticalChildrenAlignment((ABI::Windows::UI::Xaml::VerticalAlignment)value));
}

- (int)maximumRowsOrColumns {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaximumRowsOrColumns(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaximumRowsOrColumns:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaximumRowsOrColumns(value));
}

@end

@implementation WXCVirtualizingPanel

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IVirtualizingPanel> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WXCItemContainerGenerator*)itemContainerGenerator {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemContainerGenerator(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCItemContainerGenerator>(unmarshalledReturn.Get());
}

- (void)onItemsChanged:(RTObject*)sender args:(WUXCPItemsChangedEventArgs*)args {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>(self);
    THROW_NS_IF_FAILED(
        _comInst->OnItemsChanged([sender comObj].Get(),
                                 _getRtInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs>(args).Get()));
}

- (void)onClearChildren {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnClearChildren());
}

- (void)bringIndexIntoView:(int)index {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->BringIndexIntoView(index));
}

- (void)addInternalChild:(WXUIElement*)child {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>(self);
    THROW_NS_IF_FAILED(_comInst->AddInternalChild(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(child).Get()));
}

- (void)insertInternalChild:(int)index child:(WXUIElement*)child {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>(self);
    THROW_NS_IF_FAILED(_comInst->InsertInternalChild(index, _getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(child).Get()));
}

- (void)removeInternalChildRange:(int)index range:(int)range {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>(self);
    THROW_NS_IF_FAILED(_comInst->RemoveInternalChildRange(index, range));
}

@end

@implementation WXCVirtualizingStackPanel

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanel> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.VirtualizingStackPanel").Get(), &out));
    return [_createRtProxy<WXCVirtualizingStackPanel>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics> WXCIVirtualizingStackPanelStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.VirtualizingStackPanel").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)areScrollSnapPointsRegularProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIVirtualizingStackPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AreScrollSnapPointsRegularProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)orientationProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIVirtualizingStackPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OrientationProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)virtualizationModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIVirtualizingStackPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VirtualizationModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXCVirtualizationMode)getVirtualizationMode:(WXDependencyObject*)element {
    ABI::Windows::UI::Xaml::Controls::VirtualizationMode unmarshalledReturn;
    auto _comInst = WXCIVirtualizingStackPanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetVirtualizationMode(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(), &unmarshalledReturn));
    return (WXCVirtualizationMode)unmarshalledReturn;
}

+ (void)setVirtualizationMode:(WXDependencyObject*)element value:(WXCVirtualizationMode)value {
    auto _comInst = WXCIVirtualizingStackPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetVirtualizationMode(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                       (ABI::Windows::UI::Xaml::Controls::VirtualizationMode)value));
}

+ (WXDependencyProperty*)isVirtualizingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIVirtualizingStackPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsVirtualizingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getIsVirtualizing:(WXDependencyObject*)o {
    boolean unmarshalledReturn;
    auto _comInst = WXCIVirtualizingStackPanelStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetIsVirtualizing(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(o).Get(), &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (BOOL)areScrollSnapPointsRegular {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_AreScrollSnapPointsRegular(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setAreScrollSnapPointsRegular:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_AreScrollSnapPointsRegular((boolean)value));
}

- (WXCOrientation)orientation {
    ABI::Windows::UI::Xaml::Controls::Orientation unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_Orientation(&unmarshalledReturn));
    return (WXCOrientation)unmarshalledReturn;
}

- (void)setOrientation:(WXCOrientation)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_Orientation((ABI::Windows::UI::Xaml::Controls::Orientation)value));
}

- (EventRegistrationToken)addCleanUpVirtualizedItemEventEvent:(WXCCleanUpVirtualizedItemEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanel>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_CleanUpVirtualizedItemEvent(Make<WXCCleanUpVirtualizedItemEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeCleanUpVirtualizedItemEventEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->remove_CleanUpVirtualizedItemEvent(token));
}

- (void)onCleanUpVirtualizedItem:(WXCCleanUpVirtualizedItemEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>(self);
    THROW_NS_IF_FAILED(
        _comInst->OnCleanUpVirtualizedItem(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>(e).Get()));
}

@end

@implementation WXCIconElement

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IIconElement> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IIconElementStatics> WXCIIconElementStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IIconElementStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.IconElement").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)foregroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIIconElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ForegroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WUXMBrush*)foreground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IIconElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_Foreground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setForeground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IIconElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_Foreground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

@end

@implementation WXCInkCanvas

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkCanvas> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkCanvasFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkCanvas").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkCanvas> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXIFrameworkElementOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXIFrameworkElementOverrides)]) {
        typedOuter = Make<WXIFrameworkElementOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCInkCanvas* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

- (WUIIInkPresenter*)inkPresenter {
    ComPtr<ABI::Windows::UI::Input::Inking::IInkPresenter> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkCanvas>(self);
    THROW_NS_IF_FAILED(_comInst->get_InkPresenter(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUIIInkPresenter>(unmarshalledReturn.Get());
}

@end

@implementation WXCMediaElement

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaElement> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.MediaElement").Get(), &out));
    return [_createRtProxy<WXCMediaElement>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaElementStatics2> WXCIMediaElementStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaElementStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MediaElement").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)areTransportControlsEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_AreTransportControlsEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)stretchProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_StretchProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isFullWindowProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsFullWindowProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)playToPreferredSourceUriProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlayToPreferredSourceUriProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaElementStatics> WXCIMediaElementStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaElementStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MediaElement").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)posterSourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PosterSourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)sourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isMutedProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsMutedProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isAudioOnlyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsAudioOnlyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)autoPlayProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AutoPlayProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)volumeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VolumeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)balanceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BalanceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)naturalVideoHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_NaturalVideoHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)naturalVideoWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_NaturalVideoWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)naturalDurationProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_NaturalDurationProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)positionProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PositionProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)downloadProgressProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DownloadProgressProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)bufferingProgressProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BufferingProgressProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)downloadProgressOffsetProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DownloadProgressOffsetProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)currentStateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CurrentStateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)canSeekProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CanSeekProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)canPauseProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CanPauseProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)audioStreamCountProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AudioStreamCountProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)audioStreamIndexProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AudioStreamIndexProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)playbackRateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlaybackRateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isLoopingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsLoopingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)playToSourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlayToSourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)defaultPlaybackRateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DefaultPlaybackRateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)aspectRatioWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AspectRatioWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)aspectRatioHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AspectRatioHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)realTimePlaybackProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_RealTimePlaybackProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)audioCategoryProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AudioCategoryProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)audioDeviceTypeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AudioDeviceTypeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)protectionManagerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ProtectionManagerProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)stereo3DVideoPackingModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_Stereo3DVideoPackingModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)stereo3DVideoRenderModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_Stereo3DVideoRenderModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isStereo3DVideoProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsStereo3DVideoProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)actualStereo3DVideoPackingModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ActualStereo3DVideoPackingModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WUXMImageSource*)posterSource {
    ComPtr<ABI::Windows::UI::Xaml::Media::IImageSource> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_PosterSource(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMImageSource>(unmarshalledReturn.Get());
}

- (void)setPosterSource:(WUXMImageSource*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_PosterSource(_getRtInterface<ABI::Windows::UI::Xaml::Media::IImageSource>(value).Get()));
}

- (WFUri*)source {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_Source(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (void)setSource:(WFUri*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_Source(_getRtInterface<ABI::Windows::Foundation::IUriRuntimeClass>(value).Get()));
}

- (BOOL)isMuted {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsMuted(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsMuted:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsMuted((boolean)value));
}

- (BOOL)isAudioOnly {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsAudioOnly(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (BOOL)autoPlay {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_AutoPlay(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setAutoPlay:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_AutoPlay((boolean)value));
}

- (double)volume {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_Volume(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setVolume:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_Volume(value));
}

- (double)balance {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_Balance(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setBalance:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_Balance(value));
}

- (int)naturalVideoHeight {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_NaturalVideoHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (int)naturalVideoWidth {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_NaturalVideoWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (WXDuration*)naturalDuration {
    ABI::Windows::UI::Xaml::Duration unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_NaturalDuration(&unmarshalledReturn));
    return WXDuration_create(unmarshalledReturn);
}

- (WFTimeSpan*)position {
    ABI::Windows::Foundation::TimeSpan unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_Position(&unmarshalledReturn));
    return WFTimeSpan_create(unmarshalledReturn);
}

- (void)setPosition:(WFTimeSpan*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_Position(*[value internalStruct]));
}

- (double)downloadProgress {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_DownloadProgress(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)bufferingProgress {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_BufferingProgress(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)downloadProgressOffset {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_DownloadProgressOffset(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (WUXMMediaElementState)currentState {
    ABI::Windows::UI::Xaml::Media::MediaElementState unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_CurrentState(&unmarshalledReturn));
    return (WUXMMediaElementState)unmarshalledReturn;
}

- (WUXMTimelineMarkerCollection*)markers {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Media::TimelineMarker*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_Markers(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMTimelineMarkerCollection>(unmarshalledReturn.Get());
}

- (BOOL)canSeek {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_CanSeek(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (BOOL)canPause {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_CanPause(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (int)audioStreamCount {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_AudioStreamCount(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (id /* int */)audioStreamIndex {
    ComPtr<IReference<int>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_AudioStreamIndex(unmarshalledReturn.GetAddressOf()));
    return MakeFromNullable<int, int>::convert(unmarshalledReturn.Get());
}

- (void)setAudioStreamIndex:(id /* int */)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_AudioStreamIndex(BuildNullable<int>(value)));
}

- (double)playbackRate {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_PlaybackRate(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setPlaybackRate:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_PlaybackRate(value));
}

- (BOOL)isLooping {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsLooping(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsLooping:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsLooping((boolean)value));
}

- (WMPPlayToSource*)playToSource {
    ComPtr<ABI::Windows::Media::PlayTo::IPlayToSource> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_PlayToSource(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WMPPlayToSource>(unmarshalledReturn.Get());
}

- (double)defaultPlaybackRate {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_DefaultPlaybackRate(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setDefaultPlaybackRate:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_DefaultPlaybackRate(value));
}

- (int)aspectRatioWidth {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_AspectRatioWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (int)aspectRatioHeight {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_AspectRatioHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (BOOL)realTimePlayback {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_RealTimePlayback(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setRealTimePlayback:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_RealTimePlayback((boolean)value));
}

- (WUXMAudioCategory)audioCategory {
    ABI::Windows::UI::Xaml::Media::AudioCategory unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_AudioCategory(&unmarshalledReturn));
    return (WUXMAudioCategory)unmarshalledReturn;
}

- (void)setAudioCategory:(WUXMAudioCategory)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_AudioCategory((ABI::Windows::UI::Xaml::Media::AudioCategory)value));
}

- (WUXMAudioDeviceType)audioDeviceType {
    ABI::Windows::UI::Xaml::Media::AudioDeviceType unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_AudioDeviceType(&unmarshalledReturn));
    return (WUXMAudioDeviceType)unmarshalledReturn;
}

- (void)setAudioDeviceType:(WUXMAudioDeviceType)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_AudioDeviceType((ABI::Windows::UI::Xaml::Media::AudioDeviceType)value));
}

- (WMPMediaProtectionManager*)protectionManager {
    ComPtr<ABI::Windows::Media::Protection::IMediaProtectionManager> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_ProtectionManager(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WMPMediaProtectionManager>(unmarshalledReturn.Get());
}

- (void)setProtectionManager:(WMPMediaProtectionManager*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ProtectionManager(_getRtInterface<ABI::Windows::Media::Protection::IMediaProtectionManager>(value).Get()));
}

- (WUXMStereo3DVideoPackingMode)stereo3DVideoPackingMode {
    ABI::Windows::UI::Xaml::Media::Stereo3DVideoPackingMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_Stereo3DVideoPackingMode(&unmarshalledReturn));
    return (WUXMStereo3DVideoPackingMode)unmarshalledReturn;
}

- (void)setStereo3DVideoPackingMode:(WUXMStereo3DVideoPackingMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_Stereo3DVideoPackingMode((ABI::Windows::UI::Xaml::Media::Stereo3DVideoPackingMode)value));
}

- (WUXMStereo3DVideoRenderMode)stereo3DVideoRenderMode {
    ABI::Windows::UI::Xaml::Media::Stereo3DVideoRenderMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_Stereo3DVideoRenderMode(&unmarshalledReturn));
    return (WUXMStereo3DVideoRenderMode)unmarshalledReturn;
}

- (void)setStereo3DVideoRenderMode:(WUXMStereo3DVideoRenderMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_Stereo3DVideoRenderMode((ABI::Windows::UI::Xaml::Media::Stereo3DVideoRenderMode)value));
}

- (BOOL)isStereo3DVideo {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsStereo3DVideo(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (EventRegistrationToken)addMediaOpenedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->add_MediaOpened(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeMediaOpenedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->remove_MediaOpened(token));
}

- (EventRegistrationToken)addMediaEndedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->add_MediaEnded(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeMediaEndedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->remove_MediaEnded(token));
}

- (EventRegistrationToken)addMediaFailedEvent:(WXExceptionRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->add_MediaFailed(Make<WXExceptionRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeMediaFailedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->remove_MediaFailed(token));
}

- (EventRegistrationToken)addDownloadProgressChangedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->add_DownloadProgressChanged(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeDownloadProgressChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->remove_DownloadProgressChanged(token));
}

- (EventRegistrationToken)addBufferingProgressChangedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->add_BufferingProgressChanged(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeBufferingProgressChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->remove_BufferingProgressChanged(token));
}

- (EventRegistrationToken)addCurrentStateChangedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->add_CurrentStateChanged(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeCurrentStateChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->remove_CurrentStateChanged(token));
}

- (EventRegistrationToken)addMarkerReachedEvent:(WUXMTimelineMarkerRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->add_MarkerReached(Make<WUXMTimelineMarkerRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeMarkerReachedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->remove_MarkerReached(token));
}

- (EventRegistrationToken)addRateChangedEvent:(WUXMRateChangedRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->add_RateChanged(Make<WUXMRateChangedRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeRateChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->remove_RateChanged(token));
}

- (EventRegistrationToken)addVolumeChangedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->add_VolumeChanged(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeVolumeChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->remove_VolumeChanged(token));
}

- (EventRegistrationToken)addSeekCompletedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->add_SeekCompleted(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeSeekCompletedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->remove_SeekCompleted(token));
}

- (void)stop {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->Stop());
}

- (void)play {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->Play());
}

- (void)pause {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->Pause());
}

- (WUXMMediaCanPlayResponse)canPlayType:(NSString*)type {
    ABI::Windows::UI::Xaml::Media::MediaCanPlayResponse unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->CanPlayType(nsStrToHstr(type).Get(), &unmarshalledReturn));
    return (WUXMMediaCanPlayResponse)unmarshalledReturn;
}

- (void)setSource:(RTObject<WSSIRandomAccessStream>*)stream mimeType:(NSString*)mimeType {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->SetSource(_getRtInterface<ABI::Windows::Storage::Streams::IRandomAccessStream>(stream).Get(),
                                           nsStrToHstr(mimeType).Get()));
}

- (NSString*)getAudioStreamLanguage:(id /* int */)index {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->GetAudioStreamLanguage(BuildNullable<int>(index), &unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)addAudioEffect:(NSString*)effectID
         effectOptional:(BOOL)effectOptional
    effectConfiguration:(RTObject<WFCIPropertySet>*)effectConfiguration {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(
        _comInst->AddAudioEffect(nsStrToHstr(effectID).Get(),
                                 (boolean)effectOptional,
                                 _getRtInterface<ABI::Windows::Foundation::Collections::IPropertySet>(effectConfiguration).Get()));
}

- (void)addVideoEffect:(NSString*)effectID
         effectOptional:(BOOL)effectOptional
    effectConfiguration:(RTObject<WFCIPropertySet>*)effectConfiguration {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(
        _comInst->AddVideoEffect(nsStrToHstr(effectID).Get(),
                                 (boolean)effectOptional,
                                 _getRtInterface<ABI::Windows::Foundation::Collections::IPropertySet>(effectConfiguration).Get()));
}

- (void)removeAllEffects {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->RemoveAllEffects());
}

- (WUXMStereo3DVideoPackingMode)actualStereo3DVideoPackingMode {
    ABI::Windows::UI::Xaml::Media::Stereo3DVideoPackingMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_ActualStereo3DVideoPackingMode(&unmarshalledReturn));
    return (WUXMStereo3DVideoPackingMode)unmarshalledReturn;
}

- (BOOL)areTransportControlsEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement2>(self);
    THROW_NS_IF_FAILED(_comInst->get_AreTransportControlsEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setAreTransportControlsEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement2>(self);
    THROW_NS_IF_FAILED(_comInst->put_AreTransportControlsEnabled((boolean)value));
}

- (WUXMStretch)stretch {
    ABI::Windows::UI::Xaml::Media::Stretch unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement2>(self);
    THROW_NS_IF_FAILED(_comInst->get_Stretch(&unmarshalledReturn));
    return (WUXMStretch)unmarshalledReturn;
}

- (void)setStretch:(WUXMStretch)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement2>(self);
    THROW_NS_IF_FAILED(_comInst->put_Stretch((ABI::Windows::UI::Xaml::Media::Stretch)value));
}

- (BOOL)isFullWindow {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsFullWindow(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsFullWindow:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsFullWindow((boolean)value));
}

- (void)setMediaStreamSource:(RTObject<WMCIMediaSource>*)source {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement2>(self);
    THROW_NS_IF_FAILED(_comInst->SetMediaStreamSource(_getRtInterface<ABI::Windows::Media::Core::IMediaSource>(source).Get()));
}

- (WFUri*)playToPreferredSourceUri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement2>(self);
    THROW_NS_IF_FAILED(_comInst->get_PlayToPreferredSourceUri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (void)setPlayToPreferredSourceUri:(WFUri*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement2>(self);
    THROW_NS_IF_FAILED(_comInst->put_PlayToPreferredSourceUri(_getRtInterface<ABI::Windows::Foundation::IUriRuntimeClass>(value).Get()));
}

- (WXCMediaTransportControls*)transportControls {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement3>(self);
    THROW_NS_IF_FAILED(_comInst->get_TransportControls(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCMediaTransportControls>(unmarshalledReturn.Get());
}

- (void)setTransportControls:(WXCMediaTransportControls*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement3>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_TransportControls(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(value).Get()));
}

- (EventRegistrationToken)addPartialMediaFailureDetectedEvent:(void (^)(WXCMediaElement*, WUXMPartialMediaFailureDetectedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement3>(self);
    THROW_NS_IF_FAILED(_comInst->add_PartialMediaFailureDetected(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_MediaElement_Windows_UI_Xaml_Media_PartialMediaFailureDetectedEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePartialMediaFailureDetectedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_PartialMediaFailureDetected(token));
}

- (void)setPlaybackSource:(RTObject<WMPIMediaPlaybackSource>*)source {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement3>(self);
    THROW_NS_IF_FAILED(_comInst->SetPlaybackSource(_getRtInterface<ABI::Windows::Media::Playback::IMediaPlaybackSource>(source).Get()));
}

- (WMCCastingSource*)getAsCastingSource {
    ComPtr<ABI::Windows::Media::Casting::ICastingSource> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaElement3>(self);
    THROW_NS_IF_FAILED(_comInst->GetAsCastingSource(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WMCCastingSource>(unmarshalledReturn.Get());
}

@end

@implementation WXCMediaPlayerPresenter

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaPlayerPresenter> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MediaPlayerPresenter").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaPlayerPresenter> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXIFrameworkElementOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXIFrameworkElementOverrides)]) {
        typedOuter = Make<WXIFrameworkElementOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCMediaPlayerPresenter* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics> WXCIMediaPlayerPresenterStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MediaPlayerPresenter").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)mediaPlayerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaPlayerPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MediaPlayerProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)stretchProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaPlayerPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_StretchProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isFullWindowProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaPlayerPresenterStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsFullWindowProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WMPMediaPlayer*)mediaPlayer {
    ComPtr<ABI::Windows::Media::Playback::IMediaPlayer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_MediaPlayer(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WMPMediaPlayer>(unmarshalledReturn.Get());
}

- (void)setMediaPlayer:(WMPMediaPlayer*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_MediaPlayer(_getRtInterface<ABI::Windows::Media::Playback::IMediaPlayer>(value).Get()));
}

- (WUXMStretch)stretch {
    ABI::Windows::UI::Xaml::Media::Stretch unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_Stretch(&unmarshalledReturn));
    return (WUXMStretch)unmarshalledReturn;
}

- (void)setStretch:(WUXMStretch)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_Stretch((ABI::Windows::UI::Xaml::Media::Stretch)value));
}

- (BOOL)isFullWindow {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsFullWindow(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsFullWindow:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsFullWindow((boolean)value));
}

@end

@implementation WXCWebView

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebView> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.WebView").Get(), &out));
    return [_createRtProxy<WXCWebView>(out.Get()) retain];
}

static ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewFactory4> WXCIWebViewFactory4_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewFactory4> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.WebView").Get(), &inst));
    return inst;
}

+ (WXCWebView*)makeInstanceWithExecutionMode:(WXCWebViewExecutionMode)executionMode {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebView> unmarshalledReturn;
    auto _comInst = WXCIWebViewFactory4_inst();
    THROW_NS_IF_FAILED(_comInst->CreateInstanceWithExecutionMode((ABI::Windows::UI::Xaml::Controls::WebViewExecutionMode)executionMode,
                                                                 unmarshalledReturn.GetAddressOf()));
    return [_createRtProxy<WXCWebView>(unmarshalledReturn.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewStatics2> WXCIWebViewStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.WebView").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)canGoBackProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_CanGoBackProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)canGoForwardProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_CanGoForwardProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)documentTitleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_DocumentTitleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)defaultBackgroundColorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_DefaultBackgroundColorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewStatics4> WXCIWebViewStatics4_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewStatics4> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.WebView").Get(), &inst));
    return inst;
}

+ (WXCWebViewExecutionMode)defaultExecutionMode {
    ABI::Windows::UI::Xaml::Controls::WebViewExecutionMode unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_DefaultExecutionMode(&unmarshalledReturn));
    return (WXCWebViewExecutionMode)unmarshalledReturn;
}

+ (RTObject<WFIAsyncAction>*)clearTemporaryWebDataAsync {
    ComPtr<ABI::Windows::Foundation::IAsyncAction> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->ClearTemporaryWebDataAsync(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFIAsyncAction>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewStatics> WXCIWebViewStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.WebView").Get(), &inst));
    return inst;
}

+ (NSMutableArray* /* WFUri* */)anyScriptNotifyUri {
    ComPtr<IVector<ABI::Windows::Foundation::Uri*>> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AnyScriptNotifyUri(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WFUri_create(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)sourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)allowedScriptNotifyUrisProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AllowedScriptNotifyUrisProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dataTransferPackageProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DataTransferPackageProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewStatics5> WXCIWebViewStatics5_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewStatics5> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.WebView").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)xYFocusLeftProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics5_inst();
    THROW_NS_IF_FAILED(_comInst->get_XYFocusLeftProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)xYFocusRightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics5_inst();
    THROW_NS_IF_FAILED(_comInst->get_XYFocusRightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)xYFocusUpProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics5_inst();
    THROW_NS_IF_FAILED(_comInst->get_XYFocusUpProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)xYFocusDownProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics5_inst();
    THROW_NS_IF_FAILED(_comInst->get_XYFocusDownProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewStatics3> WXCIWebViewStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.WebView").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)containsFullScreenElementProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContainsFullScreenElementProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WFUri*)source {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->get_Source(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (void)setSource:(WFUri*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->put_Source(_getRtInterface<ABI::Windows::Foundation::IUriRuntimeClass>(value).Get()));
}

- (NSMutableArray* /* WFUri* */)allowedScriptNotifyUris {
    ComPtr<IVector<ABI::Windows::Foundation::Uri*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->get_AllowedScriptNotifyUris(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WFUri_create(unmarshalledReturn.Get());
}

- (void)setAllowedScriptNotifyUris:(NSMutableArray* /* WFUri* */)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->put_AllowedScriptNotifyUris(
        static_cast<IVector<typename ABI::Windows::Foundation::Internal::GetLogicalType<
            ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Foundation::Uri*,
                                                              ABI::Windows::Foundation::IUriRuntimeClass*>>::type>*>(
            ConvertToVector<WFUri,
                            ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Foundation::Uri*,
                                                                              ABI::Windows::Foundation::IUriRuntimeClass*>>(value)
                .Get())));
}

- (WADDataPackage*)dataTransferPackage {
    ComPtr<ABI::Windows::ApplicationModel::DataTransfer::IDataPackage> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->get_DataTransferPackage(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WADDataPackage>(unmarshalledReturn.Get());
}

- (EventRegistrationToken)addLoadCompletedEvent:(WUXNLoadCompletedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->add_LoadCompleted(Make<WUXNLoadCompletedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeLoadCompletedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->remove_LoadCompleted(token));
}

- (EventRegistrationToken)addScriptNotifyEvent:(WXCNotifyEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->add_ScriptNotify(Make<WXCNotifyEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeScriptNotifyEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ScriptNotify(token));
}

- (EventRegistrationToken)addNavigationFailedEvent:(WXCWebViewNavigationFailedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->add_NavigationFailed(Make<WXCWebViewNavigationFailedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeNavigationFailedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->remove_NavigationFailed(token));
}

- (NSString*)invokeScript:(NSString*)scriptName arguments:(NSArray* /* NSString * */)arguments {
    HSTRING unmarshalledReturn;
    UINT32 __arguments_ArrayLen = 0;
    bool __arguments_IsTemp = false;
    HSTRING* __arguments_Array = NULL;
    if (!ConvertToCArray<HSTRING>(arguments, &__arguments_ArrayLen, &__arguments_Array, &__arguments_IsTemp))
        assert(0);

    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->InvokeScript(nsStrToHstr(scriptName).Get(), __arguments_ArrayLen, __arguments_Array, &unmarshalledReturn));
    if (__arguments_IsTemp)
        CoTaskMemFree(__arguments_Array);
    return hstrToNSStr(unmarshalledReturn);
}

- (void)navigate:(WFUri*)source {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->Navigate(_getRtInterface<ABI::Windows::Foundation::IUriRuntimeClass>(source).Get()));
}

- (void)navigateToString:(NSString*)text {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(self);
    THROW_NS_IF_FAILED(_comInst->NavigateToString(nsStrToHstr(text).Get()));
}

- (BOOL)canGoBack {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->get_CanGoBack(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (BOOL)canGoForward {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->get_CanGoForward(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (NSString*)documentTitle {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->get_DocumentTitle(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (EventRegistrationToken)addNavigationStartingEvent:(void (^)(WXCWebView*, WXCWebViewNavigationStartingEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->add_NavigationStarting(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewNavigationStartingEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeNavigationStartingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_NavigationStarting(token));
}

- (EventRegistrationToken)addContentLoadingEvent:(void (^)(WXCWebView*, WXCWebViewContentLoadingEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->add_ContentLoading(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewContentLoadingEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeContentLoadingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ContentLoading(token));
}

- (EventRegistrationToken)addDOMContentLoadedEvent:(void (^)(WXCWebView*, WXCWebViewDOMContentLoadedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->add_DOMContentLoaded(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewDOMContentLoadedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeDOMContentLoadedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_DOMContentLoaded(token));
}

- (void)goForward {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->GoForward());
}

- (void)goBack {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->GoBack());
}

- (void)refresh {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->Refresh());
}

- (void)stop {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->Stop());
}

- (RTObject<WFIAsyncAction>*)capturePreviewToStreamAsync:(RTObject<WSSIRandomAccessStream>*)stream {
    ComPtr<ABI::Windows::Foundation::IAsyncAction> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(
        _comInst->CapturePreviewToStreamAsync(_getRtInterface<ABI::Windows::Storage::Streams::IRandomAccessStream>(stream).Get(),
                                              unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFIAsyncAction>(unmarshalledReturn.Get());
}

- (void)invokeScriptAsync:(NSString*)scriptName
                arguments:(id<NSFastEnumeration> /* NSString * */)arguments
                  success:(void (^)(NSString*))success
                  failure:(void (^)(NSError*))failure {
    ComPtr<ABI::Windows::Foundation::IAsyncOperation<HSTRING>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(
        _comInst->InvokeScriptAsync(nsStrToHstr(scriptName).Get(),
                                    static_cast<IIterable<typename ABI::Windows::Foundation::Internal::GetLogicalType<HSTRING>::type>*>(
                                        ConvertToIterable<NSString, HSTRING>(arguments).Get()),
                                    &unmarshalledReturn));

    auto successRc = makeBlockHolder(success);
    auto failureRc = makeBlockHolder(failure);
    auto completionHandler =
        ::Microsoft::WRL::Callback<::Microsoft::WRL::Implements<::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::WinRtClassicComMix>,
                                                                ABI::Windows::Foundation::IAsyncOperationCompletedHandler<HSTRING>,
                                                                FtmBase>>(
            [successRc, failureRc](ABI::Windows::Foundation::IAsyncOperation<HSTRING>* op, AsyncStatus status) {
                @autoreleasepool {
                    if (!_handleAsyncErrorCode(op, failureRc)) {
                        return S_OK;
                    }
                    if (status == AsyncStatus::Completed) {
                        HSTRING result;
                        HRESULT hr = op->GetResults(&result);
                        if (SUCCEEDED(hr)) {
                            if (successRc) {
                                successRc(hstrToNSStr(result));
                            }
                        } else {
                            if (failureRc) {
                                failureRc([NSError errorWithDomain:@"HRESULT" code:hr userInfo:nil]);
                            }
                        }
                    } else {
                        if (failureRc) {
                            failureRc([NSError errorWithDomain:@"Async" code:(int)status userInfo:nil]);
                        }
                    }
                    return S_OK;
                }
            });

    unmarshalledReturn->put_Completed(completionHandler.Get());
}

- (void)captureSelectedContentToDataPackageAsyncWithSuccess:(void (^)(WADDataPackage*))success failure:(void (^)(NSError*))failure {
    ComPtr<ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::ApplicationModel::DataTransfer::DataPackage*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->CaptureSelectedContentToDataPackageAsync(&unmarshalledReturn));

    auto successRc = makeBlockHolder(success);
    auto failureRc = makeBlockHolder(failure);
    auto completionHandler = ::Microsoft::WRL::Callback<::Microsoft::WRL::Implements<
        ::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::WinRtClassicComMix>,
        ABI::Windows::Foundation::IAsyncOperationCompletedHandler<ABI::Windows::ApplicationModel::DataTransfer::DataPackage*>,
        FtmBase>>(
        [successRc, failureRc](ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::ApplicationModel::DataTransfer::DataPackage*>* op,
                               AsyncStatus status) {
            @autoreleasepool {
                if (!_handleAsyncErrorCode(op, failureRc)) {
                    return S_OK;
                }
                if (status == AsyncStatus::Completed) {
                    ComPtr<ABI::Windows::ApplicationModel::DataTransfer::IDataPackage> result;
                    HRESULT hr = op->GetResults(result.GetAddressOf());
                    if (SUCCEEDED(hr)) {
                        if (successRc) {
                            successRc(_createRtProxy<WADDataPackage>(result.Get()));
                        }
                    } else {
                        if (failureRc) {
                            failureRc([NSError errorWithDomain:@"HRESULT" code:hr userInfo:nil]);
                        }
                    }
                } else {
                    if (failureRc) {
                        failureRc([NSError errorWithDomain:@"Async" code:(int)status userInfo:nil]);
                    }
                }
                return S_OK;
            }
        });

    unmarshalledReturn->put_Completed(completionHandler.Get());
}

- (void)navigateToLocalStreamUri:(WFUri*)source streamResolver:(RTObject<WWIUriToStreamResolver>*)streamResolver {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->NavigateToLocalStreamUri(_getRtInterface<ABI::Windows::Foundation::IUriRuntimeClass>(source).Get(),
                                                          _getRtInterface<ABI::Windows::Web::IUriToStreamResolver>(streamResolver).Get()));
}

- (WFUri*)buildLocalStreamUri:(NSString*)contentIdentifier relativePath:(NSString*)relativePath {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->BuildLocalStreamUri(nsStrToHstr(contentIdentifier).Get(),
                                                     nsStrToHstr(relativePath).Get(),
                                                     unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (WUColor*)defaultBackgroundColor {
    ABI::Windows::UI::Color unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->get_DefaultBackgroundColor(&unmarshalledReturn));
    return WUColor_create(unmarshalledReturn);
}

- (void)setDefaultBackgroundColor:(WUColor*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->put_DefaultBackgroundColor(*[value internalStruct]));
}

- (EventRegistrationToken)addNavigationCompletedEvent:(void (^)(WXCWebView*, WXCWebViewNavigationCompletedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->add_NavigationCompleted(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewNavigationCompletedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeNavigationCompletedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_NavigationCompleted(token));
}

- (EventRegistrationToken)addFrameNavigationStartingEvent:(void (^)(WXCWebView*, WXCWebViewNavigationStartingEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->add_FrameNavigationStarting(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewNavigationStartingEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeFrameNavigationStartingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_FrameNavigationStarting(token));
}

- (EventRegistrationToken)addFrameContentLoadingEvent:(void (^)(WXCWebView*, WXCWebViewContentLoadingEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->add_FrameContentLoading(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewContentLoadingEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeFrameContentLoadingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_FrameContentLoading(token));
}

- (EventRegistrationToken)addFrameDOMContentLoadedEvent:(void (^)(WXCWebView*, WXCWebViewDOMContentLoadedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->add_FrameDOMContentLoaded(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewDOMContentLoadedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeFrameDOMContentLoadedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_FrameDOMContentLoaded(token));
}

- (EventRegistrationToken)addFrameNavigationCompletedEvent:(void (^)(WXCWebView*, WXCWebViewNavigationCompletedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->add_FrameNavigationCompleted(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewNavigationCompletedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeFrameNavigationCompletedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_FrameNavigationCompleted(token));
}

- (EventRegistrationToken)addLongRunningScriptDetectedEvent:(void (^)(WXCWebView*, WXCWebViewLongRunningScriptDetectedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->add_LongRunningScriptDetected(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewLongRunningScriptDetectedEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeLongRunningScriptDetectedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_LongRunningScriptDetected(token));
}

- (EventRegistrationToken)addUnsafeContentWarningDisplayingEvent:(void (^)(WXCWebView*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_UnsafeContentWarningDisplaying(Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_System_Object>(value).Get(),
                                                     &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeUnsafeContentWarningDisplayingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_UnsafeContentWarningDisplaying(token));
}

- (EventRegistrationToken)addUnviewableContentIdentifiedEvent:(void (^)(WXCWebView*,
                                                                        WXCWebViewUnviewableContentIdentifiedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->add_UnviewableContentIdentified(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewUnviewableContentIdentifiedEventArgs>(
            value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeUnviewableContentIdentifiedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_UnviewableContentIdentified(token));
}

- (void)navigateWithHttpRequestMessage:(WWHHttpRequestMessage*)requestMessage {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(
        _comInst->NavigateWithHttpRequestMessage(_getRtInterface<ABI::Windows::Web::Http::IHttpRequestMessage>(requestMessage).Get()));
}

- (BOOL)focus:(WXFocusState)value {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView2>(self);
    THROW_NS_IF_FAILED(_comInst->Focus((ABI::Windows::UI::Xaml::FocusState)value, &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (BOOL)containsFullScreenElement {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView3>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContainsFullScreenElement(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (EventRegistrationToken)addContainsFullScreenElementChangedEvent:(void (^)(WXCWebView*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView3>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_ContainsFullScreenElementChanged(Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_System_Object>(value).Get(),
                                                       &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeContainsFullScreenElementChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ContainsFullScreenElementChanged(token));
}

- (WXCWebViewExecutionMode)executionMode {
    ABI::Windows::UI::Xaml::Controls::WebViewExecutionMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView4>(self);
    THROW_NS_IF_FAILED(_comInst->get_ExecutionMode(&unmarshalledReturn));
    return (WXCWebViewExecutionMode)unmarshalledReturn;
}

- (NSMutableArray* /* WXCWebViewDeferredPermissionRequest* */)deferredPermissionRequests {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView4>(self);
    THROW_NS_IF_FAILED(_comInst->get_DeferredPermissionRequests(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WXCWebViewDeferredPermissionRequest_create(unmarshalledReturn.Get());
}

- (WXCWebViewSettings*)settings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView4>(self);
    THROW_NS_IF_FAILED(_comInst->get_Settings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCWebViewSettings>(unmarshalledReturn.Get());
}

- (EventRegistrationToken)addUnsupportedUriSchemeIdentifiedEvent:(void (^)(WXCWebView*,
                                                                           WXCWebViewUnsupportedUriSchemeIdentifiedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView4>(self);
    THROW_NS_IF_FAILED(_comInst->add_UnsupportedUriSchemeIdentified(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewUnsupportedUriSchemeIdentifiedEventArgs>(
            value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeUnsupportedUriSchemeIdentifiedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView4>(self);
    THROW_NS_IF_FAILED(_comInst->remove_UnsupportedUriSchemeIdentified(token));
}

- (EventRegistrationToken)addNewWindowRequestedEvent:(void (^)(WXCWebView*, WXCWebViewNewWindowRequestedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView4>(self);
    THROW_NS_IF_FAILED(_comInst->add_NewWindowRequested(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewNewWindowRequestedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeNewWindowRequestedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView4>(self);
    THROW_NS_IF_FAILED(_comInst->remove_NewWindowRequested(token));
}

- (EventRegistrationToken)addPermissionRequestedEvent:(void (^)(WXCWebView*, WXCWebViewPermissionRequestedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView4>(self);
    THROW_NS_IF_FAILED(_comInst->add_PermissionRequested(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_WebView_Windows_UI_Xaml_Controls_WebViewPermissionRequestedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePermissionRequestedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView4>(self);
    THROW_NS_IF_FAILED(_comInst->remove_PermissionRequested(token));
}

- (void)addWebAllowedObject:(NSString*)name pObject:(RTObject*)pObject {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView4>(self);
    THROW_NS_IF_FAILED(_comInst->AddWebAllowedObject(nsStrToHstr(name).Get(), [pObject comObj].Get()));
}

- (WXCWebViewDeferredPermissionRequest*)deferredPermissionRequestById:(unsigned int)id {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView4>(self);
    THROW_NS_IF_FAILED(_comInst->DeferredPermissionRequestById(id, unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCWebViewDeferredPermissionRequest>(unmarshalledReturn.Get());
}

- (WXDependencyObject*)xYFocusLeft {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView5>(self);
    THROW_NS_IF_FAILED(_comInst->get_XYFocusLeft(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (void)setXYFocusLeft:(WXDependencyObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView5>(self);
    THROW_NS_IF_FAILED(_comInst->put_XYFocusLeft(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(value).Get()));
}

- (WXDependencyObject*)xYFocusRight {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView5>(self);
    THROW_NS_IF_FAILED(_comInst->get_XYFocusRight(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (void)setXYFocusRight:(WXDependencyObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView5>(self);
    THROW_NS_IF_FAILED(_comInst->put_XYFocusRight(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(value).Get()));
}

- (WXDependencyObject*)xYFocusUp {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView5>(self);
    THROW_NS_IF_FAILED(_comInst->get_XYFocusUp(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (void)setXYFocusUp:(WXDependencyObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView5>(self);
    THROW_NS_IF_FAILED(_comInst->put_XYFocusUp(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(value).Get()));
}

- (WXDependencyObject*)xYFocusDown {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView5>(self);
    THROW_NS_IF_FAILED(_comInst->get_XYFocusDown(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (void)setXYFocusDown:(WXDependencyObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebView5>(self);
    THROW_NS_IF_FAILED(_comInst->put_XYFocusDown(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(value).Get()));
}

@end

@implementation WXCBitmapIcon

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IBitmapIcon> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IBitmapIconFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.BitmapIcon").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IBitmapIcon> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXIFrameworkElementOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXIFrameworkElementOverrides)]) {
        typedOuter = Make<WXIFrameworkElementOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCBitmapIcon* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IBitmapIconStatics> WXCIBitmapIconStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IBitmapIconStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.BitmapIcon").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)uriSourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIBitmapIconStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_UriSourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WFUri*)uriSource {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBitmapIcon>(self);
    THROW_NS_IF_FAILED(_comInst->get_UriSource(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (void)setUriSource:(WFUri*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IBitmapIcon>(self);
    THROW_NS_IF_FAILED(_comInst->put_UriSource(_getRtInterface<ABI::Windows::Foundation::IUriRuntimeClass>(value).Get()));
}

@end

@implementation WXCFontIcon

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFontIcon> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFontIconFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.FontIcon").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFontIcon> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXIFrameworkElementOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXIFrameworkElementOverrides)]) {
        typedOuter = Make<WXIFrameworkElementOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCFontIcon* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IFontIconStatics> WXCIFontIconStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFontIconStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.FontIcon").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)glyphProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFontIconStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_GlyphProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontSizeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFontIconStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontSizeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontFamilyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFontIconStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontFamilyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontWeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFontIconStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontWeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFontIconStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IFontIconStatics3> WXCIFontIconStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFontIconStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.FontIcon").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)mirroredWhenRightToLeftProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFontIconStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_MirroredWhenRightToLeftProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IFontIconStatics2> WXCIFontIconStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFontIconStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.FontIcon").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isTextScaleFactorEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFontIconStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTextScaleFactorEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)glyph {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon>(self);
    THROW_NS_IF_FAILED(_comInst->get_Glyph(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setGlyph:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon>(self);
    THROW_NS_IF_FAILED(_comInst->put_Glyph(nsStrToHstr(value).Get()));
}

- (double)fontSize {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontSize(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setFontSize:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontSize(value));
}

- (WUXMFontFamily*)fontFamily {
    ComPtr<ABI::Windows::UI::Xaml::Media::IFontFamily> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontFamily(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMFontFamily>(unmarshalledReturn.Get());
}

- (void)setFontFamily:(WUXMFontFamily*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontFamily(_getRtInterface<ABI::Windows::UI::Xaml::Media::IFontFamily>(value).Get()));
}

- (WUTFontWeight*)fontWeight {
    ABI::Windows::UI::Text::FontWeight unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontWeight(&unmarshalledReturn));
    return WUTFontWeight_create(unmarshalledReturn);
}

- (void)setFontWeight:(WUTFontWeight*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontWeight(*[value internalStruct]));
}

- (WUTFontStyle)fontStyle {
    ABI::Windows::UI::Text::FontStyle unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontStyle(&unmarshalledReturn));
    return (WUTFontStyle)unmarshalledReturn;
}

- (void)setFontStyle:(WUTFontStyle)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontStyle((ABI::Windows::UI::Text::FontStyle)value));
}

- (BOOL)isTextScaleFactorEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTextScaleFactorEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTextScaleFactorEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTextScaleFactorEnabled((boolean)value));
}

- (BOOL)mirroredWhenRightToLeft {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon3>(self);
    THROW_NS_IF_FAILED(_comInst->get_MirroredWhenRightToLeft(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setMirroredWhenRightToLeft:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFontIcon3>(self);
    THROW_NS_IF_FAILED(_comInst->put_MirroredWhenRightToLeft((boolean)value));
}

@end

@implementation WXCItemsStackPanel

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsStackPanel").Get(), &out));
    return [_createRtProxy<WXCItemsStackPanel>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsStackPanelStatics2> WXCIItemsStackPanelStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsStackPanelStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsStackPanel").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)areStickyGroupHeadersEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsStackPanelStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_AreStickyGroupHeadersEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsStackPanelStatics> WXCIItemsStackPanelStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsStackPanelStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsStackPanel").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)groupPaddingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsStackPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_GroupPaddingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)orientationProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsStackPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OrientationProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)groupHeaderPlacementProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsStackPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_GroupHeaderPlacementProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)cacheLengthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsStackPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CacheLengthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXThickness*)groupPadding {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_GroupPadding(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setGroupPadding:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_GroupPadding(*[value internalStruct]));
}

- (WXCOrientation)orientation {
    ABI::Windows::UI::Xaml::Controls::Orientation unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_Orientation(&unmarshalledReturn));
    return (WXCOrientation)unmarshalledReturn;
}

- (void)setOrientation:(WXCOrientation)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_Orientation((ABI::Windows::UI::Xaml::Controls::Orientation)value));
}

- (int)firstCacheIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstCacheIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (int)firstVisibleIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstVisibleIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (int)lastVisibleIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_LastVisibleIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (int)lastCacheIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_LastCacheIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (WXCPanelScrollingDirection)scrollingDirection {
    ABI::Windows::UI::Xaml::Controls::PanelScrollingDirection unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_ScrollingDirection(&unmarshalledReturn));
    return (WXCPanelScrollingDirection)unmarshalledReturn;
}

- (WUXCPGroupHeaderPlacement)groupHeaderPlacement {
    ABI::Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_GroupHeaderPlacement(&unmarshalledReturn));
    return (WUXCPGroupHeaderPlacement)unmarshalledReturn;
}

- (void)setGroupHeaderPlacement:(WUXCPGroupHeaderPlacement)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_GroupHeaderPlacement((ABI::Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement)value));
}

- (WXCItemsUpdatingScrollMode)itemsUpdatingScrollMode {
    ABI::Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemsUpdatingScrollMode(&unmarshalledReturn));
    return (WXCItemsUpdatingScrollMode)unmarshalledReturn;
}

- (void)setItemsUpdatingScrollMode:(WXCItemsUpdatingScrollMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemsUpdatingScrollMode((ABI::Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode)value));
}

- (double)cacheLength {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_CacheLength(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setCacheLength:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel>(self);
    THROW_NS_IF_FAILED(_comInst->put_CacheLength(value));
}

- (BOOL)areStickyGroupHeadersEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel2>(self);
    THROW_NS_IF_FAILED(_comInst->get_AreStickyGroupHeadersEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setAreStickyGroupHeadersEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsStackPanel2>(self);
    THROW_NS_IF_FAILED(_comInst->put_AreStickyGroupHeadersEnabled((boolean)value));
}

@end

@implementation WXCItemsWrapGrid

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsWrapGrid").Get(), &out));
    return [_createRtProxy<WXCItemsWrapGrid>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsWrapGridStatics2> WXCIItemsWrapGridStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsWrapGridStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsWrapGrid").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)areStickyGroupHeadersEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsWrapGridStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_AreStickyGroupHeadersEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsWrapGridStatics> WXCIItemsWrapGridStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsWrapGridStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsWrapGrid").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)groupPaddingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_GroupPaddingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)orientationProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OrientationProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maximumRowsOrColumnsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaximumRowsOrColumnsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)itemWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)itemHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)groupHeaderPlacementProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_GroupHeaderPlacementProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)cacheLengthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CacheLengthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXThickness*)groupPadding {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_GroupPadding(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setGroupPadding:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_GroupPadding(*[value internalStruct]));
}

- (WXCOrientation)orientation {
    ABI::Windows::UI::Xaml::Controls::Orientation unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_Orientation(&unmarshalledReturn));
    return (WXCOrientation)unmarshalledReturn;
}

- (void)setOrientation:(WXCOrientation)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_Orientation((ABI::Windows::UI::Xaml::Controls::Orientation)value));
}

- (int)maximumRowsOrColumns {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaximumRowsOrColumns(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaximumRowsOrColumns:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaximumRowsOrColumns(value));
}

- (double)itemWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setItemWidth:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemWidth(value));
}

- (double)itemHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setItemHeight:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemHeight(value));
}

- (int)firstCacheIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstCacheIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (int)firstVisibleIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstVisibleIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (int)lastVisibleIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_LastVisibleIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (int)lastCacheIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_LastCacheIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (WXCPanelScrollingDirection)scrollingDirection {
    ABI::Windows::UI::Xaml::Controls::PanelScrollingDirection unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_ScrollingDirection(&unmarshalledReturn));
    return (WXCPanelScrollingDirection)unmarshalledReturn;
}

- (WUXCPGroupHeaderPlacement)groupHeaderPlacement {
    ABI::Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_GroupHeaderPlacement(&unmarshalledReturn));
    return (WUXCPGroupHeaderPlacement)unmarshalledReturn;
}

- (void)setGroupHeaderPlacement:(WUXCPGroupHeaderPlacement)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_GroupHeaderPlacement((ABI::Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement)value));
}

- (double)cacheLength {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_CacheLength(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setCacheLength:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_CacheLength(value));
}

- (BOOL)areStickyGroupHeadersEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid2>(self);
    THROW_NS_IF_FAILED(_comInst->get_AreStickyGroupHeadersEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setAreStickyGroupHeadersEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid2>(self);
    THROW_NS_IF_FAILED(_comInst->put_AreStickyGroupHeadersEnabled((boolean)value));
}

@end

@implementation WXCPathIcon

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPathIcon> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPathIconFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.PathIcon").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPathIcon> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXIFrameworkElementOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXIFrameworkElementOverrides)]) {
        typedOuter = Make<WXIFrameworkElementOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCPathIcon* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IPathIconStatics> WXCIPathIconStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPathIconStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.PathIcon").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)dataProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPathIconStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DataProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WUXMGeometry*)data {
    ComPtr<ABI::Windows::UI::Xaml::Media::IGeometry> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPathIcon>(self);
    THROW_NS_IF_FAILED(_comInst->get_Data(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMGeometry>(unmarshalledReturn.Get());
}

- (void)setData:(WUXMGeometry*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPathIcon>(self);
    THROW_NS_IF_FAILED(_comInst->put_Data(_getRtInterface<ABI::Windows::UI::Xaml::Media::IGeometry>(value).Get()));
}

@end

@implementation WXCScrollContentPresenter

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ScrollContentPresenter").Get(), &out));
    return [_createRtProxy<WXCScrollContentPresenter>(out.Get()) retain];
}

- (BOOL)canVerticallyScroll {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_CanVerticallyScroll(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setCanVerticallyScroll:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_CanVerticallyScroll((boolean)value));
}

- (BOOL)canHorizontallyScroll {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_CanHorizontallyScroll(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setCanHorizontallyScroll:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_CanHorizontallyScroll((boolean)value));
}

- (double)extentWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_ExtentWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)extentHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_ExtentHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)viewportWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_ViewportWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)viewportHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_ViewportHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)horizontalOffset {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalOffset(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)verticalOffset {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalOffset(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (RTObject*)scrollOwner {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->get_ScrollOwner(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setScrollOwner:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->put_ScrollOwner([value comObj].Get()));
}

- (void)lineUp {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->LineUp());
}

- (void)lineDown {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->LineDown());
}

- (void)lineLeft {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->LineLeft());
}

- (void)lineRight {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->LineRight());
}

- (void)pageUp {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->PageUp());
}

- (void)pageDown {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->PageDown());
}

- (void)pageLeft {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->PageLeft());
}

- (void)pageRight {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->PageRight());
}

- (void)mouseWheelUp {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->MouseWheelUp());
}

- (void)mouseWheelDown {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->MouseWheelDown());
}

- (void)mouseWheelLeft {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->MouseWheelLeft());
}

- (void)mouseWheelRight {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->MouseWheelRight());
}

- (void)setHorizontalOffset:(double)offset {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->SetHorizontalOffset(offset));
}

- (void)setVerticalOffset:(double)offset {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->SetVerticalOffset(offset));
}

- (WFRect*)makeVisible:(WXUIElement*)visual rectangle:(WFRect*)rectangle {
    ABI::Windows::Foundation::Rect unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter>(self);
    THROW_NS_IF_FAILED(_comInst->MakeVisible(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(visual).Get(),
                                             *[rectangle internalStruct],
                                             &unmarshalledReturn));
    return WFRect_create(unmarshalledReturn);
}

@end

@implementation WXCSymbolIcon

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISymbolIcon> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

static ComPtr<ABI::Windows::UI::Xaml::Controls::ISymbolIconFactory> WXCISymbolIconFactory_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISymbolIconFactory> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SymbolIcon").Get(), &inst));
    return inst;
}

+ (WXCSymbolIcon*)makeInstanceWithSymbol:(WXCSymbol)symbol {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISymbolIcon> unmarshalledReturn;
    auto _comInst = WXCISymbolIconFactory_inst();
    THROW_NS_IF_FAILED(
        _comInst->CreateInstanceWithSymbol((ABI::Windows::UI::Xaml::Controls::Symbol)symbol, unmarshalledReturn.GetAddressOf()));
    return [_createRtProxy<WXCSymbolIcon>(unmarshalledReturn.Get()) retain];
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.SymbolIcon").Get(), &out));
    return [_createRtProxy<WXCSymbolIcon>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ISymbolIconStatics> WXCISymbolIconStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISymbolIconStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SymbolIcon").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)symbolProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISymbolIconStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SymbolProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXCSymbol)symbol {
    ABI::Windows::UI::Xaml::Controls::Symbol unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISymbolIcon>(self);
    THROW_NS_IF_FAILED(_comInst->get_Symbol(&unmarshalledReturn));
    return (WXCSymbol)unmarshalledReturn;
}

- (void)setSymbol:(WXCSymbol)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISymbolIcon>(self);
    THROW_NS_IF_FAILED(_comInst->put_Symbol((ABI::Windows::UI::Xaml::Controls::Symbol)value));
}

@end

@implementation WXCSwapChainBackgroundPanel

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SwapChainBackgroundPanel").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXIFrameworkElementOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXIFrameworkElementOverrides)]) {
        typedOuter = Make<WXIFrameworkElementOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCSwapChainBackgroundPanel* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

- (WUCCoreIndependentInputSource*)createCoreIndependentInputSource:(WUCCoreInputDeviceTypes)deviceTypes {
    ComPtr<ABI::Windows::UI::Core::ICoreInputSourceBase> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>(self);
    THROW_NS_IF_FAILED(_comInst->CreateCoreIndependentInputSource((ABI::Windows::UI::Core::CoreInputDeviceTypes)deviceTypes,
                                                                  unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUCCoreIndependentInputSource>(unmarshalledReturn.Get());
}

@end

@implementation WXCSwapChainPanel

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISwapChainPanel> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISwapChainPanelFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SwapChainPanel").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISwapChainPanel> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXIFrameworkElementOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXIFrameworkElementOverrides)]) {
        typedOuter = Make<WXIFrameworkElementOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCSwapChainPanel* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ISwapChainPanelStatics> WXCISwapChainPanelStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISwapChainPanelStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SwapChainPanel").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)compositionScaleXProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISwapChainPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CompositionScaleXProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)compositionScaleYProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISwapChainPanelStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CompositionScaleYProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (float)compositionScaleX {
    float unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISwapChainPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_CompositionScaleX(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (float)compositionScaleY {
    float unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISwapChainPanel>(self);
    THROW_NS_IF_FAILED(_comInst->get_CompositionScaleY(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (EventRegistrationToken)addCompositionScaleChangedEvent:(void (^)(WXCSwapChainPanel*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISwapChainPanel>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_CompositionScaleChanged(Make<ITypedEventHandler_Windows_UI_Xaml_Controls_SwapChainPanel_System_Object>(value).Get(),
                                              &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeCompositionScaleChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISwapChainPanel>(self);
    THROW_NS_IF_FAILED(_comInst->remove_CompositionScaleChanged(token));
}

- (WUCCoreIndependentInputSource*)createCoreIndependentInputSource:(WUCCoreInputDeviceTypes)deviceTypes {
    ComPtr<ABI::Windows::UI::Core::ICoreInputSourceBase> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISwapChainPanel>(self);
    THROW_NS_IF_FAILED(_comInst->CreateCoreIndependentInputSource((ABI::Windows::UI::Core::CoreInputDeviceTypes)deviceTypes,
                                                                  unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUCCoreIndependentInputSource>(unmarshalledReturn.Get());
}

@end

@implementation WXCWrapGrid

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWrapGrid> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.WrapGrid").Get(), &out));
    return [_createRtProxy<WXCWrapGrid>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IWrapGridStatics> WXCIWrapGridStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWrapGridStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.WrapGrid").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)itemWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)itemHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)orientationProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OrientationProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)horizontalChildrenAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HorizontalChildrenAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)verticalChildrenAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VerticalChildrenAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maximumRowsOrColumnsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWrapGridStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaximumRowsOrColumnsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (double)itemWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setItemWidth:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemWidth(value));
}

- (double)itemHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setItemHeight:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemHeight(value));
}

- (WXCOrientation)orientation {
    ABI::Windows::UI::Xaml::Controls::Orientation unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_Orientation(&unmarshalledReturn));
    return (WXCOrientation)unmarshalledReturn;
}

- (void)setOrientation:(WXCOrientation)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_Orientation((ABI::Windows::UI::Xaml::Controls::Orientation)value));
}

- (WXHorizontalAlignment)horizontalChildrenAlignment {
    ABI::Windows::UI::Xaml::HorizontalAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalChildrenAlignment(&unmarshalledReturn));
    return (WXHorizontalAlignment)unmarshalledReturn;
}

- (void)setHorizontalChildrenAlignment:(WXHorizontalAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_HorizontalChildrenAlignment((ABI::Windows::UI::Xaml::HorizontalAlignment)value));
}

- (WXVerticalAlignment)verticalChildrenAlignment {
    ABI::Windows::UI::Xaml::VerticalAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalChildrenAlignment(&unmarshalledReturn));
    return (WXVerticalAlignment)unmarshalledReturn;
}

- (void)setVerticalChildrenAlignment:(WXVerticalAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_VerticalChildrenAlignment((ABI::Windows::UI::Xaml::VerticalAlignment)value));
}

- (int)maximumRowsOrColumns {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaximumRowsOrColumns(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaximumRowsOrColumns:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWrapGrid>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaximumRowsOrColumns(value));
}

@end

@implementation WXCFocusDisengagedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCFocusEngagedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFocusEngagedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCControlTemplate

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IControlTemplate> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ControlTemplate").Get(), &out));
    return [_createRtProxy<WXCControlTemplate>(out.Get()) retain];
}

- (WUXITypeName*)targetType {
    ABI::Windows::UI::Xaml::Interop::TypeName unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlTemplate>(self);
    THROW_NS_IF_FAILED(_comInst->get_TargetType(&unmarshalledReturn));
    return WUXITypeName_create(unmarshalledReturn);
}

- (void)setTargetType:(WUXITypeName*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlTemplate>(self);
    THROW_NS_IF_FAILED(_comInst->put_TargetType(*[value internalStruct]));
}

@end

@implementation WXCControl

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IControl> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IControlStatics4> WXCIControlStatics4_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IControlStatics4> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Control").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isFocusEngagementEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsFocusEngagementEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isFocusEngagedProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsFocusEngagedProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)requiresPointerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_RequiresPointerProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)xYFocusLeftProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_XYFocusLeftProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)xYFocusRightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_XYFocusRightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)xYFocusUpProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_XYFocusUpProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)xYFocusDownProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_XYFocusDownProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)elementSoundModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_ElementSoundModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IControlStatics2> WXCIControlStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IControlStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Control").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isTextScaleFactorEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTextScaleFactorEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IControlStatics> WXCIControlStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IControlStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Control").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)fontSizeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontSizeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontFamilyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontFamilyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontWeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontWeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fontStretchProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FontStretchProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)characterSpacingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CharacterSpacingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)foregroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ForegroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isTabStopProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTabStopProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)tabIndexProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TabIndexProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)tabNavigationProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TabNavigationProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)templateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)paddingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaddingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)horizontalContentAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HorizontalContentAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)verticalContentAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VerticalContentAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)backgroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BackgroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)borderThicknessProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BorderThicknessProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)borderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)defaultStyleKeyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DefaultStyleKeyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)focusStateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FocusStateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IControlStatics3> WXCIControlStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IControlStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Control").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)useSystemFocusVisualsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_UseSystemFocusVisualsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isTemplateFocusTargetProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIControlStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTemplateFocusTargetProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getIsTemplateFocusTarget:(WXFrameworkElement*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIControlStatics3_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetIsTemplateFocusTarget(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(element).Get(), &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setIsTemplateFocusTarget:(WXFrameworkElement*)element value:(BOOL)value {
    auto _comInst = WXCIControlStatics3_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetIsTemplateFocusTarget(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(element).Get(), (boolean)value));
}

- (double)fontSize {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontSize(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setFontSize:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontSize(value));
}

- (WUXMFontFamily*)fontFamily {
    ComPtr<ABI::Windows::UI::Xaml::Media::IFontFamily> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontFamily(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMFontFamily>(unmarshalledReturn.Get());
}

- (void)setFontFamily:(WUXMFontFamily*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontFamily(_getRtInterface<ABI::Windows::UI::Xaml::Media::IFontFamily>(value).Get()));
}

- (WUTFontWeight*)fontWeight {
    ABI::Windows::UI::Text::FontWeight unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontWeight(&unmarshalledReturn));
    return WUTFontWeight_create(unmarshalledReturn);
}

- (void)setFontWeight:(WUTFontWeight*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontWeight(*[value internalStruct]));
}

- (WUTFontStyle)fontStyle {
    ABI::Windows::UI::Text::FontStyle unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontStyle(&unmarshalledReturn));
    return (WUTFontStyle)unmarshalledReturn;
}

- (void)setFontStyle:(WUTFontStyle)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontStyle((ABI::Windows::UI::Text::FontStyle)value));
}

- (WUTFontStretch)fontStretch {
    ABI::Windows::UI::Text::FontStretch unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_FontStretch(&unmarshalledReturn));
    return (WUTFontStretch)unmarshalledReturn;
}

- (void)setFontStretch:(WUTFontStretch)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_FontStretch((ABI::Windows::UI::Text::FontStretch)value));
}

- (int)characterSpacing {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_CharacterSpacing(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setCharacterSpacing:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_CharacterSpacing(value));
}

- (WUXMBrush*)foreground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_Foreground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setForeground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_Foreground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (BOOL)isTabStop {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTabStop(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTabStop:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTabStop((boolean)value));
}

- (BOOL)isEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsEnabled((boolean)value));
}

- (int)tabIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_TabIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setTabIndex:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_TabIndex(value));
}

- (WUXIKeyboardNavigationMode)tabNavigation {
    ABI::Windows::UI::Xaml::Input::KeyboardNavigationMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_TabNavigation(&unmarshalledReturn));
    return (WUXIKeyboardNavigationMode)unmarshalledReturn;
}

- (void)setTabNavigation:(WUXIKeyboardNavigationMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_TabNavigation((ABI::Windows::UI::Xaml::Input::KeyboardNavigationMode)value));
}

- (WXCControlTemplate*)Template {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IControlTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_Template(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCControlTemplate>(unmarshalledReturn.Get());
}

- (void)setTemplate:(WXCControlTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_Template(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IControlTemplate>(value).Get()));
}

- (WXThickness*)padding {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_Padding(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setPadding:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_Padding(*[value internalStruct]));
}

- (WXHorizontalAlignment)horizontalContentAlignment {
    ABI::Windows::UI::Xaml::HorizontalAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalContentAlignment(&unmarshalledReturn));
    return (WXHorizontalAlignment)unmarshalledReturn;
}

- (void)setHorizontalContentAlignment:(WXHorizontalAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_HorizontalContentAlignment((ABI::Windows::UI::Xaml::HorizontalAlignment)value));
}

- (WXVerticalAlignment)verticalContentAlignment {
    ABI::Windows::UI::Xaml::VerticalAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalContentAlignment(&unmarshalledReturn));
    return (WXVerticalAlignment)unmarshalledReturn;
}

- (void)setVerticalContentAlignment:(WXVerticalAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_VerticalContentAlignment((ABI::Windows::UI::Xaml::VerticalAlignment)value));
}

- (WUXMBrush*)background {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_Background(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setBackground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_Background(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WXThickness*)borderThickness {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_BorderThickness(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setBorderThickness:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_BorderThickness(*[value internalStruct]));
}

- (WUXMBrush*)borderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_BorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_BorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WXFocusState)focusState {
    ABI::Windows::UI::Xaml::FocusState unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_FocusState(&unmarshalledReturn));
    return (WXFocusState)unmarshalledReturn;
}

- (EventRegistrationToken)addIsEnabledChangedEvent:(WXDependencyPropertyChangedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_IsEnabledChanged(Make<WXDependencyPropertyChangedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeIsEnabledChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->remove_IsEnabledChanged(token));
}

- (BOOL)applyTemplate {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->ApplyTemplate(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (BOOL)focus:(WXFocusState)value {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl>(self);
    THROW_NS_IF_FAILED(_comInst->Focus((ABI::Windows::UI::Xaml::FocusState)value, &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)onPointerEntered:(WUXIPointerRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnPointerEntered(_getRtInterface<ABI::Windows::UI::Xaml::Input::IPointerRoutedEventArgs>(e).Get()));
}

- (void)onPointerPressed:(WUXIPointerRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnPointerPressed(_getRtInterface<ABI::Windows::UI::Xaml::Input::IPointerRoutedEventArgs>(e).Get()));
}

- (void)onPointerMoved:(WUXIPointerRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnPointerMoved(_getRtInterface<ABI::Windows::UI::Xaml::Input::IPointerRoutedEventArgs>(e).Get()));
}

- (void)onPointerReleased:(WUXIPointerRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnPointerReleased(_getRtInterface<ABI::Windows::UI::Xaml::Input::IPointerRoutedEventArgs>(e).Get()));
}

- (void)onPointerExited:(WUXIPointerRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnPointerExited(_getRtInterface<ABI::Windows::UI::Xaml::Input::IPointerRoutedEventArgs>(e).Get()));
}

- (void)onPointerCaptureLost:(WUXIPointerRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnPointerCaptureLost(_getRtInterface<ABI::Windows::UI::Xaml::Input::IPointerRoutedEventArgs>(e).Get()));
}

- (void)onPointerCanceled:(WUXIPointerRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnPointerCanceled(_getRtInterface<ABI::Windows::UI::Xaml::Input::IPointerRoutedEventArgs>(e).Get()));
}

- (void)onPointerWheelChanged:(WUXIPointerRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnPointerWheelChanged(_getRtInterface<ABI::Windows::UI::Xaml::Input::IPointerRoutedEventArgs>(e).Get()));
}

- (void)onTapped:(WUXITappedRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnTapped(_getRtInterface<ABI::Windows::UI::Xaml::Input::ITappedRoutedEventArgs>(e).Get()));
}

- (void)onDoubleTapped:(WUXIDoubleTappedRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnDoubleTapped(_getRtInterface<ABI::Windows::UI::Xaml::Input::IDoubleTappedRoutedEventArgs>(e).Get()));
}

- (void)onHolding:(WUXIHoldingRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnHolding(_getRtInterface<ABI::Windows::UI::Xaml::Input::IHoldingRoutedEventArgs>(e).Get()));
}

- (void)onRightTapped:(WUXIRightTappedRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnRightTapped(_getRtInterface<ABI::Windows::UI::Xaml::Input::IRightTappedRoutedEventArgs>(e).Get()));
}

- (void)onManipulationStarting:(WUXIManipulationStartingRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(
        _comInst->OnManipulationStarting(_getRtInterface<ABI::Windows::UI::Xaml::Input::IManipulationStartingRoutedEventArgs>(e).Get()));
}

- (void)onManipulationInertiaStarting:(WUXIManipulationInertiaStartingRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnManipulationInertiaStarting(
        _getRtInterface<ABI::Windows::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs>(e).Get()));
}

- (void)onManipulationStarted:(WUXIManipulationStartedRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(
        _comInst->OnManipulationStarted(_getRtInterface<ABI::Windows::UI::Xaml::Input::IManipulationStartedRoutedEventArgs>(e).Get()));
}

- (void)onManipulationDelta:(WUXIManipulationDeltaRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(
        _comInst->OnManipulationDelta(_getRtInterface<ABI::Windows::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs>(e).Get()));
}

- (void)onManipulationCompleted:(WUXIManipulationCompletedRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(
        _comInst->OnManipulationCompleted(_getRtInterface<ABI::Windows::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs>(e).Get()));
}

- (void)onKeyUp:(WUXIKeyRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnKeyUp(_getRtInterface<ABI::Windows::UI::Xaml::Input::IKeyRoutedEventArgs>(e).Get()));
}

- (void)onKeyDown:(WUXIKeyRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnKeyDown(_getRtInterface<ABI::Windows::UI::Xaml::Input::IKeyRoutedEventArgs>(e).Get()));
}

- (void)onGotFocus:(WXRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnGotFocus(_getRtInterface<ABI::Windows::UI::Xaml::IRoutedEventArgs>(e).Get()));
}

- (void)onLostFocus:(WXRoutedEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnLostFocus(_getRtInterface<ABI::Windows::UI::Xaml::IRoutedEventArgs>(e).Get()));
}

- (void)onDragEnter:(WXDragEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnDragEnter(_getRtInterface<ABI::Windows::UI::Xaml::IDragEventArgs>(e).Get()));
}

- (void)onDragLeave:(WXDragEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnDragLeave(_getRtInterface<ABI::Windows::UI::Xaml::IDragEventArgs>(e).Get()));
}

- (void)onDragOver:(WXDragEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnDragOver(_getRtInterface<ABI::Windows::UI::Xaml::IDragEventArgs>(e).Get()));
}

- (void)onDrop:(WXDragEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnDrop(_getRtInterface<ABI::Windows::UI::Xaml::IDragEventArgs>(e).Get()));
}

- (RTObject*)defaultStyleKey {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlProtected>(self);
    THROW_NS_IF_FAILED(_comInst->get_DefaultStyleKey(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setDefaultStyleKey:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlProtected>(self);
    THROW_NS_IF_FAILED(_comInst->put_DefaultStyleKey([value comObj].Get()));
}

- (WXDependencyObject*)getTemplateChild:(NSString*)childName {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControlProtected>(self);
    THROW_NS_IF_FAILED(_comInst->GetTemplateChild(nsStrToHstr(childName).Get(), unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (BOOL)isTextScaleFactorEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTextScaleFactorEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTextScaleFactorEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTextScaleFactorEnabled((boolean)value));
}

- (BOOL)useSystemFocusVisuals {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl3>(self);
    THROW_NS_IF_FAILED(_comInst->get_UseSystemFocusVisuals(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setUseSystemFocusVisuals:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl3>(self);
    THROW_NS_IF_FAILED(_comInst->put_UseSystemFocusVisuals((boolean)value));
}

- (BOOL)isFocusEngagementEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsFocusEngagementEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsFocusEngagementEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsFocusEngagementEnabled((boolean)value));
}

- (BOOL)isFocusEngaged {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsFocusEngaged(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsFocusEngaged:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsFocusEngaged((boolean)value));
}

- (WXCRequiresPointer)requiresPointer {
    ABI::Windows::UI::Xaml::Controls::RequiresPointer unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->get_RequiresPointer(&unmarshalledReturn));
    return (WXCRequiresPointer)unmarshalledReturn;
}

- (void)setRequiresPointer:(WXCRequiresPointer)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->put_RequiresPointer((ABI::Windows::UI::Xaml::Controls::RequiresPointer)value));
}

- (WXDependencyObject*)xYFocusLeft {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->get_XYFocusLeft(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (void)setXYFocusLeft:(WXDependencyObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->put_XYFocusLeft(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(value).Get()));
}

- (WXDependencyObject*)xYFocusRight {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->get_XYFocusRight(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (void)setXYFocusRight:(WXDependencyObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->put_XYFocusRight(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(value).Get()));
}

- (WXDependencyObject*)xYFocusUp {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->get_XYFocusUp(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (void)setXYFocusUp:(WXDependencyObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->put_XYFocusUp(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(value).Get()));
}

- (WXDependencyObject*)xYFocusDown {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->get_XYFocusDown(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (void)setXYFocusDown:(WXDependencyObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->put_XYFocusDown(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(value).Get()));
}

- (WXElementSoundMode)elementSoundMode {
    ABI::Windows::UI::Xaml::ElementSoundMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->get_ElementSoundMode(&unmarshalledReturn));
    return (WXElementSoundMode)unmarshalledReturn;
}

- (void)setElementSoundMode:(WXElementSoundMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->put_ElementSoundMode((ABI::Windows::UI::Xaml::ElementSoundMode)value));
}

- (EventRegistrationToken)addFocusEngagedEvent:(void (^)(WXCControl*, WXCFocusEngagedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->add_FocusEngaged(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_Control_Windows_UI_Xaml_Controls_FocusEngagedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeFocusEngagedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->remove_FocusEngaged(token));
}

- (EventRegistrationToken)addFocusDisengagedEvent:(void (^)(WXCControl*, WXCFocusDisengagedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->add_FocusDisengaged(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_Control_Windows_UI_Xaml_Controls_FocusDisengagedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeFocusDisengagedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->remove_FocusDisengaged(token));
}

- (void)removeFocusEngagement {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IControl4>(self);
    THROW_NS_IF_FAILED(_comInst->RemoveFocusEngagement());
}

@end

@implementation WXCSemanticZoom

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoom> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.SemanticZoom").Get(), &out));
    return [_createRtProxy<WXCSemanticZoom>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoomStatics> WXCISemanticZoomStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoomStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SemanticZoom").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)zoomedInViewProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISemanticZoomStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ZoomedInViewProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)zoomedOutViewProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISemanticZoomStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ZoomedOutViewProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isZoomedInViewActiveProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISemanticZoomStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsZoomedInViewActiveProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)canChangeViewsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISemanticZoomStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CanChangeViewsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isZoomOutButtonEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISemanticZoomStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsZoomOutButtonEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject<WXCISemanticZoomInformation>*)zoomedInView {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(_comInst->get_ZoomedInView(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCISemanticZoomInformation>(unmarshalledReturn.Get());
}

- (void)setZoomedInView:(RTObject<WXCISemanticZoomInformation>*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ZoomedInView(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(value).Get()));
}

- (RTObject<WXCISemanticZoomInformation>*)zoomedOutView {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(_comInst->get_ZoomedOutView(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCISemanticZoomInformation>(unmarshalledReturn.Get());
}

- (void)setZoomedOutView:(RTObject<WXCISemanticZoomInformation>*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ZoomedOutView(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(value).Get()));
}

- (BOOL)isZoomedInViewActive {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsZoomedInViewActive(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsZoomedInViewActive:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsZoomedInViewActive((boolean)value));
}

- (BOOL)canChangeViews {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(_comInst->get_CanChangeViews(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setCanChangeViews:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(_comInst->put_CanChangeViews((boolean)value));
}

- (EventRegistrationToken)addViewChangeStartedEvent:(WXCSemanticZoomViewChangedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_ViewChangeStarted(Make<WXCSemanticZoomViewChangedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeViewChangeStartedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ViewChangeStarted(token));
}

- (EventRegistrationToken)addViewChangeCompletedEvent:(WXCSemanticZoomViewChangedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_ViewChangeCompleted(Make<WXCSemanticZoomViewChangedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeViewChangeCompletedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ViewChangeCompleted(token));
}

- (void)toggleActiveView {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(_comInst->ToggleActiveView());
}

- (BOOL)isZoomOutButtonEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsZoomOutButtonEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsZoomOutButtonEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsZoomOutButtonEnabled((boolean)value));
}

@end

@implementation WXCContentControl

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentControl> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentControlFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ContentControl").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentControl> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCContentControl* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IContentControlStatics> WXCIContentControlStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentControlStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ContentControl").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)contentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)contentTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)contentTemplateSelectorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentTemplateSelectorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)contentTransitionsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentTransitionsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject*)content {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_Content(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setContent:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_Content([value comObj].Get()));
}

- (WXDataTemplate*)contentTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setContentTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_ContentTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WXCDataTemplateSelector*)contentTemplateSelector {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentTemplateSelector(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCDataTemplateSelector>(unmarshalledReturn.Get());
}

- (void)setContentTemplateSelector:(WXCDataTemplateSelector*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentControl>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ContentTemplateSelector(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector>(value).Get()));
}

- (WUXMATransitionCollection*)contentTransitions {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentTransitions(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMATransitionCollection>(unmarshalledReturn.Get());
}

- (void)setContentTransitions:(WUXMATransitionCollection*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentControl>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ContentTransitions(_getRtInterface<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>>(value).Get()));
}

- (void)onContentChanged:(RTObject*)oldContent newContent:(RTObject*)newContent {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnContentChanged([oldContent comObj].Get(), [newContent comObj].Get()));
}

- (void)onContentTemplateChanged:(WXDataTemplate*)oldContentTemplate newContentTemplate:(WXDataTemplate*)newContentTemplate {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentControlOverrides>(self);
    THROW_NS_IF_FAILED(
        _comInst->OnContentTemplateChanged(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(oldContentTemplate).Get(),
                                           _getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(newContentTemplate).Get()));
}

- (void)onContentTemplateSelectorChanged:(WXCDataTemplateSelector*)oldContentTemplateSelector
              newContentTemplateSelector:(WXCDataTemplateSelector*)newContentTemplateSelector {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnContentTemplateSelectorChanged(
        _getRtInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector>(oldContentTemplateSelector).Get(),
        _getRtInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector>(newContentTemplateSelector).Get()));
}

- (WXUIElement*)contentTemplateRoot {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentControl2>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentTemplateRoot(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

@end

@implementation WXCListViewBaseHeaderItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBaseHeaderItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCItemsControl

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsControl> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsControlFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsControl").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsControl> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIItemsControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIItemsControlOverrides)]) {
        typedOuter = Make<WXCIItemsControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCItemsControl* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsControlStatics> WXCIItemsControlStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsControlStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsControl").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)itemsSourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemsSourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)itemTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)itemTemplateSelectorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemTemplateSelectorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)itemsPanelProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemsPanelProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)displayMemberPathProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DisplayMemberPathProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)itemContainerStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemContainerStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)itemContainerStyleSelectorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemContainerStyleSelectorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)itemContainerTransitionsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemContainerTransitionsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)groupStyleSelectorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_GroupStyleSelectorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isGroupingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIItemsControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsGroupingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXCItemsControl*)getItemsOwner:(WXDependencyObject*)element {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsControl> unmarshalledReturn;
    auto _comInst = WXCIItemsControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetItemsOwner(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                               unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCItemsControl>(unmarshalledReturn.Get());
}

+ (WXCItemsControl*)itemsControlFromItemContainer:(WXDependencyObject*)container {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsControl> unmarshalledReturn;
    auto _comInst = WXCIItemsControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->ItemsControlFromItemContainer(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(container).Get(),
                                                               unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCItemsControl>(unmarshalledReturn.Get());
}

- (RTObject*)itemsSource {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemsSource(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setItemsSource:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemsSource([value comObj].Get()));
}

- (WXCItemCollection*)items {
    ComPtr<IObservableVector<IInspectable*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_Items(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCItemCollection>(unmarshalledReturn.Get());
}

- (WXDataTemplate*)itemTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setItemTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WXCDataTemplateSelector*)itemTemplateSelector {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemTemplateSelector(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCDataTemplateSelector>(unmarshalledReturn.Get());
}

- (void)setItemTemplateSelector:(WXCDataTemplateSelector*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ItemTemplateSelector(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector>(value).Get()));
}

- (WXCItemsPanelTemplate*)itemsPanel {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsPanelTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemsPanel(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCItemsPanelTemplate>(unmarshalledReturn.Get());
}

- (void)setItemsPanel:(WXCItemsPanelTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemsPanel(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IItemsPanelTemplate>(value).Get()));
}

- (NSString*)displayMemberPath {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_DisplayMemberPath(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setDisplayMemberPath:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_DisplayMemberPath(nsStrToHstr(value).Get()));
}

- (WXStyle*)itemContainerStyle {
    ComPtr<ABI::Windows::UI::Xaml::IStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemContainerStyle(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXStyle>(unmarshalledReturn.Get());
}

- (void)setItemContainerStyle:(WXStyle*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemContainerStyle(_getRtInterface<ABI::Windows::UI::Xaml::IStyle>(value).Get()));
}

- (WXCStyleSelector*)itemContainerStyleSelector {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IStyleSelector> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemContainerStyleSelector(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCStyleSelector>(unmarshalledReturn.Get());
}

- (void)setItemContainerStyleSelector:(WXCStyleSelector*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ItemContainerStyleSelector(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IStyleSelector>(value).Get()));
}

- (WXCItemContainerGenerator*)itemContainerGenerator {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemContainerGenerator(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCItemContainerGenerator>(unmarshalledReturn.Get());
}

- (WUXMATransitionCollection*)itemContainerTransitions {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemContainerTransitions(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMATransitionCollection>(unmarshalledReturn.Get());
}

- (void)setItemContainerTransitions:(WUXMATransitionCollection*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemContainerTransitions(
        _getRtInterface<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>>(value).Get()));
}

- (NSMutableArray<RTObservableCollection>* /* WXCGroupStyle* */)groupStyle {
    ComPtr<IObservableVector<ABI::Windows::UI::Xaml::Controls::GroupStyle*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_GroupStyle(unmarshalledReturn.GetAddressOf()));
    return RTProxiedObservableNSMutableArray_WXCGroupStyle_create(unmarshalledReturn.Get());
}

- (WXCGroupStyleSelector*)groupStyleSelector {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGroupStyleSelector> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_GroupStyleSelector(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCGroupStyleSelector>(unmarshalledReturn.Get());
}

- (void)setGroupStyleSelector:(WXCGroupStyleSelector*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_GroupStyleSelector(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyleSelector>(value).Get()));
}

- (BOOL)isGrouping {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsGrouping(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (BOOL)isItemItsOwnContainerOverride:(RTObject*)item {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->IsItemItsOwnContainerOverride([item comObj].Get(), &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (WXDependencyObject*)getContainerForItemOverride {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->GetContainerForItemOverride(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (void)clearContainerForItemOverride:(WXDependencyObject*)element item:(RTObject*)item {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->ClearContainerForItemOverride(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                               [item comObj].Get()));
}

- (void)prepareContainerForItemOverride:(WXDependencyObject*)element item:(RTObject*)item {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->PrepareContainerForItemOverride(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                                 [item comObj].Get()));
}

- (void)onItemsChanged:(RTObject*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnItemsChanged([e comObj].Get()));
}

- (void)onItemContainerStyleChanged:(WXStyle*)oldItemContainerStyle newItemContainerStyle:(WXStyle*)newItemContainerStyle {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnItemContainerStyleChanged(_getRtInterface<ABI::Windows::UI::Xaml::IStyle>(oldItemContainerStyle).Get(),
                                                             _getRtInterface<ABI::Windows::UI::Xaml::IStyle>(newItemContainerStyle).Get()));
}

- (void)onItemContainerStyleSelectorChanged:(WXCStyleSelector*)oldItemContainerStyleSelector
              newItemContainerStyleSelector:(WXCStyleSelector*)newItemContainerStyleSelector {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnItemContainerStyleSelectorChanged(
        _getRtInterface<ABI::Windows::UI::Xaml::Controls::IStyleSelector>(oldItemContainerStyleSelector).Get(),
        _getRtInterface<ABI::Windows::UI::Xaml::Controls::IStyleSelector>(newItemContainerStyleSelector).Get()));
}

- (void)onItemTemplateChanged:(WXDataTemplate*)oldItemTemplate newItemTemplate:(WXDataTemplate*)newItemTemplate {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnItemTemplateChanged(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(oldItemTemplate).Get(),
                                                       _getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(newItemTemplate).Get()));
}

- (void)onItemTemplateSelectorChanged:(WXCDataTemplateSelector*)oldItemTemplateSelector
              newItemTemplateSelector:(WXCDataTemplateSelector*)newItemTemplateSelector {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnItemTemplateSelectorChanged(
        _getRtInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector>(oldItemTemplateSelector).Get(),
        _getRtInterface<ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector>(newItemTemplateSelector).Get()));
}

- (void)onGroupStyleSelectorChanged:(WXCGroupStyleSelector*)oldGroupStyleSelector
              newGroupStyleSelector:(WXCGroupStyleSelector*)newGroupStyleSelector {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControlOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnGroupStyleSelectorChanged(
        _getRtInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyleSelector>(oldGroupStyleSelector).Get(),
        _getRtInterface<ABI::Windows::UI::Xaml::Controls::IGroupStyleSelector>(newGroupStyleSelector).Get()));
}

- (WXCPanel*)itemsPanelRoot {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPanel> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl2>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemsPanelRoot(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCPanel>(unmarshalledReturn.Get());
}

- (RTObject*)itemFromContainer:(WXDependencyObject*)container {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerMapping>(self);
    THROW_NS_IF_FAILED(_comInst->ItemFromContainer(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(container).Get(),
                                                   unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (WXDependencyObject*)containerFromItem:(RTObject*)item {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerMapping>(self);
    THROW_NS_IF_FAILED(_comInst->ContainerFromItem([item comObj].Get(), unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (int)indexFromContainer:(WXDependencyObject*)container {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerMapping>(self);
    THROW_NS_IF_FAILED(
        _comInst->IndexFromContainer(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(container).Get(), &unmarshalledReturn));
    return unmarshalledReturn;
}

- (WXDependencyObject*)containerFromIndex:(int)index {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemContainerMapping>(self);
    THROW_NS_IF_FAILED(_comInst->ContainerFromIndex(index, unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

- (WXDependencyObject*)groupHeaderContainerFromItemContainer:(WXDependencyObject*)itemContainer {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyObject> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsControl3>(self);
    THROW_NS_IF_FAILED(
        _comInst->GroupHeaderContainerFromItemContainer(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(itemContainer).Get(),
                                                        unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObject>(unmarshalledReturn.Get());
}

@end

@implementation WXCMediaTransportControls

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaTransportControlsFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MediaTransportControls").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCMediaTransportControls* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2> WXCIMediaTransportControlsStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MediaTransportControls").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)isSkipForwardButtonVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsSkipForwardButtonVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isSkipForwardEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsSkipForwardEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isSkipBackwardButtonVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsSkipBackwardButtonVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isSkipBackwardEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsSkipBackwardEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isNextTrackButtonVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsNextTrackButtonVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isPreviousTrackButtonVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsPreviousTrackButtonVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fastPlayFallbackBehaviourProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_FastPlayFallbackBehaviourProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics> WXCIMediaTransportControlsStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaTransportControlsStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MediaTransportControls").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)isFullWindowButtonVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsFullWindowButtonVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isFullWindowEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsFullWindowEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isZoomButtonVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsZoomButtonVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isZoomEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsZoomEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isFastForwardButtonVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsFastForwardButtonVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isFastForwardEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsFastForwardEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isFastRewindButtonVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsFastRewindButtonVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isFastRewindEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsFastRewindEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isStopButtonVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsStopButtonVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isStopEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsStopEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isVolumeButtonVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsVolumeButtonVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isVolumeEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsVolumeEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isPlaybackRateButtonVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsPlaybackRateButtonVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isPlaybackRateEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsPlaybackRateEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isSeekBarVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsSeekBarVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isSeekEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsSeekEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isCompactProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaTransportControlsStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsCompactProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)isFullWindowButtonVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsFullWindowButtonVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsFullWindowButtonVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsFullWindowButtonVisible((boolean)value));
}

- (BOOL)isFullWindowEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsFullWindowEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsFullWindowEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsFullWindowEnabled((boolean)value));
}

- (BOOL)isZoomButtonVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsZoomButtonVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsZoomButtonVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsZoomButtonVisible((boolean)value));
}

- (BOOL)isZoomEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsZoomEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsZoomEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsZoomEnabled((boolean)value));
}

- (BOOL)isFastForwardButtonVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsFastForwardButtonVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsFastForwardButtonVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsFastForwardButtonVisible((boolean)value));
}

- (BOOL)isFastForwardEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsFastForwardEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsFastForwardEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsFastForwardEnabled((boolean)value));
}

- (BOOL)isFastRewindButtonVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsFastRewindButtonVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsFastRewindButtonVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsFastRewindButtonVisible((boolean)value));
}

- (BOOL)isFastRewindEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsFastRewindEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsFastRewindEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsFastRewindEnabled((boolean)value));
}

- (BOOL)isStopButtonVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsStopButtonVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsStopButtonVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsStopButtonVisible((boolean)value));
}

- (BOOL)isStopEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsStopEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsStopEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsStopEnabled((boolean)value));
}

- (BOOL)isVolumeButtonVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsVolumeButtonVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsVolumeButtonVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsVolumeButtonVisible((boolean)value));
}

- (BOOL)isVolumeEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsVolumeEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsVolumeEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsVolumeEnabled((boolean)value));
}

- (BOOL)isPlaybackRateButtonVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsPlaybackRateButtonVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsPlaybackRateButtonVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsPlaybackRateButtonVisible((boolean)value));
}

- (BOOL)isPlaybackRateEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsPlaybackRateEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsPlaybackRateEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsPlaybackRateEnabled((boolean)value));
}

- (BOOL)isSeekBarVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSeekBarVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSeekBarVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSeekBarVisible((boolean)value));
}

- (BOOL)isSeekEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSeekEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSeekEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSeekEnabled((boolean)value));
}

- (BOOL)isCompact {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsCompact(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsCompact:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsCompact((boolean)value));
}

- (BOOL)isSkipForwardButtonVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSkipForwardButtonVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSkipForwardButtonVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSkipForwardButtonVisible((boolean)value));
}

- (BOOL)isSkipForwardEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSkipForwardEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSkipForwardEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSkipForwardEnabled((boolean)value));
}

- (BOOL)isSkipBackwardButtonVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSkipBackwardButtonVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSkipBackwardButtonVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSkipBackwardButtonVisible((boolean)value));
}

- (BOOL)isSkipBackwardEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSkipBackwardEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSkipBackwardEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSkipBackwardEnabled((boolean)value));
}

- (BOOL)isNextTrackButtonVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsNextTrackButtonVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsNextTrackButtonVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsNextTrackButtonVisible((boolean)value));
}

- (BOOL)isPreviousTrackButtonVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsPreviousTrackButtonVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsPreviousTrackButtonVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsPreviousTrackButtonVisible((boolean)value));
}

- (WUXMFastPlayFallbackBehaviour)fastPlayFallbackBehaviour {
    ABI::Windows::UI::Xaml::Media::FastPlayFallbackBehaviour unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->get_FastPlayFallbackBehaviour(&unmarshalledReturn));
    return (WUXMFastPlayFallbackBehaviour)unmarshalledReturn;
}

- (void)setFastPlayFallbackBehaviour:(WUXMFastPlayFallbackBehaviour)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->put_FastPlayFallbackBehaviour((ABI::Windows::UI::Xaml::Media::FastPlayFallbackBehaviour)value));
}

- (EventRegistrationToken)addThumbnailRequestedEvent:(void (^)(WXCMediaTransportControls*,
                                                               WUXMMediaTransportControlsThumbnailRequestedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->add_ThumbnailRequested(
        Make<
            ITypedEventHandler_Windows_UI_Xaml_Controls_MediaTransportControls_Windows_UI_Xaml_Media_MediaTransportControlsThumbnailRequestedEventArgs>(
            value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeThumbnailRequestedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ThumbnailRequested(token));
}

@end

@implementation WXCPasswordBox

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPasswordBox> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.PasswordBox").Get(), &out));
    return [_createRtProxy<WXCPasswordBox>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IPasswordBoxStatics3> WXCIPasswordBoxStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPasswordBoxStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.PasswordBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)passwordRevealModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPasswordBoxStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_PasswordRevealModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textReadingOrderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPasswordBoxStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextReadingOrderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)inputScopeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPasswordBoxStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_InputScopeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IPasswordBoxStatics> WXCIPasswordBoxStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPasswordBoxStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.PasswordBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)passwordProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPasswordBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PasswordProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)passwordCharProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPasswordBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PasswordCharProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isPasswordRevealButtonEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPasswordBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsPasswordRevealButtonEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxLengthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPasswordBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxLengthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IPasswordBoxStatics2> WXCIPasswordBoxStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPasswordBoxStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.PasswordBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPasswordBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPasswordBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)placeholderTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPasswordBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectionHighlightColorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPasswordBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectionHighlightColorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)preventKeyboardDisplayOnProgrammaticFocusProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPasswordBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_PreventKeyboardDisplayOnProgrammaticFocusProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)password {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_Password(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setPassword:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_Password(nsStrToHstr(value).Get()));
}

- (NSString*)passwordChar {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_PasswordChar(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setPasswordChar:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_PasswordChar(nsStrToHstr(value).Get()));
}

- (BOOL)isPasswordRevealButtonEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsPasswordRevealButtonEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsPasswordRevealButtonEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsPasswordRevealButtonEnabled((boolean)value));
}

- (int)maxLength {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxLength(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaxLength:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxLength(value));
}

- (EventRegistrationToken)addPasswordChangedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_PasswordChanged(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePasswordChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_PasswordChanged(token));
}

- (EventRegistrationToken)addContextMenuOpeningEvent:(WXCContextMenuOpeningEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_ContextMenuOpening(Make<WXCContextMenuOpeningEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeContextMenuOpeningEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ContextMenuOpening(token));
}

- (void)selectAll {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox>(self);
    THROW_NS_IF_FAILED(_comInst->SelectAll());
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (NSString*)placeholderText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setPlaceholderText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_PlaceholderText(nsStrToHstr(value).Get()));
}

- (WUXMSolidColorBrush*)selectionHighlightColor {
    ComPtr<ABI::Windows::UI::Xaml::Media::ISolidColorBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionHighlightColor(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMSolidColorBrush>(unmarshalledReturn.Get());
}

- (void)setSelectionHighlightColor:(WUXMSolidColorBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox2>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_SelectionHighlightColor(_getRtInterface<ABI::Windows::UI::Xaml::Media::ISolidColorBrush>(value).Get()));
}

- (BOOL)preventKeyboardDisplayOnProgrammaticFocus {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_PreventKeyboardDisplayOnProgrammaticFocus(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setPreventKeyboardDisplayOnProgrammaticFocus:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_PreventKeyboardDisplayOnProgrammaticFocus((boolean)value));
}

- (EventRegistrationToken)addPasteEvent:(WXCTextControlPasteEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox2>(self);
    THROW_NS_IF_FAILED(_comInst->add_Paste(Make<WXCTextControlPasteEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePasteEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Paste(token));
}

- (WXCPasswordRevealMode)passwordRevealMode {
    ABI::Windows::UI::Xaml::Controls::PasswordRevealMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox3>(self);
    THROW_NS_IF_FAILED(_comInst->get_PasswordRevealMode(&unmarshalledReturn));
    return (WXCPasswordRevealMode)unmarshalledReturn;
}

- (void)setPasswordRevealMode:(WXCPasswordRevealMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox3>(self);
    THROW_NS_IF_FAILED(_comInst->put_PasswordRevealMode((ABI::Windows::UI::Xaml::Controls::PasswordRevealMode)value));
}

- (WXTextReadingOrder)textReadingOrder {
    ABI::Windows::UI::Xaml::TextReadingOrder unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox3>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextReadingOrder(&unmarshalledReturn));
    return (WXTextReadingOrder)unmarshalledReturn;
}

- (void)setTextReadingOrder:(WXTextReadingOrder)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox3>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextReadingOrder((ABI::Windows::UI::Xaml::TextReadingOrder)value));
}

- (WUXIInputScope*)inputScope {
    ComPtr<ABI::Windows::UI::Xaml::Input::IInputScope> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox3>(self);
    THROW_NS_IF_FAILED(_comInst->get_InputScope(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXIInputScope>(unmarshalledReturn.Get());
}

- (void)setInputScope:(WUXIInputScope*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPasswordBox3>(self);
    THROW_NS_IF_FAILED(_comInst->put_InputScope(_getRtInterface<ABI::Windows::UI::Xaml::Input::IInputScope>(value).Get()));
}

@end

@implementation WXCProgressRing

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IProgressRing> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ProgressRing").Get(), &out));
    return [_createRtProxy<WXCProgressRing>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IProgressRingStatics> WXCIProgressRingStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IProgressRingStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ProgressRing").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isActiveProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIProgressRingStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsActiveProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)isActive {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IProgressRing>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsActive(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsActive:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IProgressRing>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsActive((boolean)value));
}

- (WUXCPProgressRingTemplateSettings*)templateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::IProgressRingTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IProgressRing>(self);
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPProgressRingTemplateSettings>(unmarshalledReturn.Get());
}

@end

@implementation WXCRichEditBox

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichEditBox> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichEditBoxFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RichEditBox").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichEditBox> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCRichEditBox* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IRichEditBoxStatics3> WXCIRichEditBoxStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichEditBoxStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RichEditBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)desiredCandidateWindowAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_DesiredCandidateWindowAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textReadingOrderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextReadingOrderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IRichEditBoxStatics4> WXCIRichEditBoxStatics4_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichEditBoxStatics4> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RichEditBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)clipboardCopyFormatProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_ClipboardCopyFormatProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IRichEditBoxStatics2> WXCIRichEditBoxStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichEditBoxStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RichEditBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)placeholderTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectionHighlightColorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectionHighlightColorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)preventKeyboardDisplayOnProgrammaticFocusProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_PreventKeyboardDisplayOnProgrammaticFocusProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isColorFontEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsColorFontEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IRichEditBoxStatics> WXCIRichEditBoxStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRichEditBoxStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RichEditBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isReadOnlyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsReadOnlyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)acceptsReturnProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AcceptsReturnProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textWrappingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextWrappingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isSpellCheckEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsSpellCheckEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isTextPredictionEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTextPredictionEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)inputScopeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRichEditBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_InputScopeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)isReadOnly {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsReadOnly(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsReadOnly:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsReadOnly((boolean)value));
}

- (BOOL)acceptsReturn {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_AcceptsReturn(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setAcceptsReturn:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_AcceptsReturn((boolean)value));
}

- (WXTextAlignment)textAlignment {
    ABI::Windows::UI::Xaml::TextAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextAlignment(&unmarshalledReturn));
    return (WXTextAlignment)unmarshalledReturn;
}

- (void)setTextAlignment:(WXTextAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextAlignment((ABI::Windows::UI::Xaml::TextAlignment)value));
}

- (WXTextWrapping)textWrapping {
    ABI::Windows::UI::Xaml::TextWrapping unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextWrapping(&unmarshalledReturn));
    return (WXTextWrapping)unmarshalledReturn;
}

- (void)setTextWrapping:(WXTextWrapping)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextWrapping((ABI::Windows::UI::Xaml::TextWrapping)value));
}

- (BOOL)isSpellCheckEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSpellCheckEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSpellCheckEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSpellCheckEnabled((boolean)value));
}

- (BOOL)isTextPredictionEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTextPredictionEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTextPredictionEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTextPredictionEnabled((boolean)value));
}

- (RTObject<WUTITextDocument>*)document {
    ComPtr<ABI::Windows::UI::Text::ITextDocument> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_Document(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUTITextDocument>(unmarshalledReturn.Get());
}

- (WUXIInputScope*)inputScope {
    ComPtr<ABI::Windows::UI::Xaml::Input::IInputScope> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_InputScope(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXIInputScope>(unmarshalledReturn.Get());
}

- (void)setInputScope:(WUXIInputScope*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_InputScope(_getRtInterface<ABI::Windows::UI::Xaml::Input::IInputScope>(value).Get()));
}

- (EventRegistrationToken)addTextChangedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_TextChanged(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTextChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TextChanged(token));
}

- (EventRegistrationToken)addSelectionChangedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_SelectionChanged(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeSelectionChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_SelectionChanged(token));
}

- (EventRegistrationToken)addContextMenuOpeningEvent:(WXCContextMenuOpeningEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_ContextMenuOpening(Make<WXCContextMenuOpeningEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeContextMenuOpeningEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ContextMenuOpening(token));
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (NSString*)placeholderText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setPlaceholderText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_PlaceholderText(nsStrToHstr(value).Get()));
}

- (WUXMSolidColorBrush*)selectionHighlightColor {
    ComPtr<ABI::Windows::UI::Xaml::Media::ISolidColorBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionHighlightColor(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMSolidColorBrush>(unmarshalledReturn.Get());
}

- (void)setSelectionHighlightColor:(WUXMSolidColorBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_SelectionHighlightColor(_getRtInterface<ABI::Windows::UI::Xaml::Media::ISolidColorBrush>(value).Get()));
}

- (BOOL)preventKeyboardDisplayOnProgrammaticFocus {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_PreventKeyboardDisplayOnProgrammaticFocus(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setPreventKeyboardDisplayOnProgrammaticFocus:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_PreventKeyboardDisplayOnProgrammaticFocus((boolean)value));
}

- (BOOL)isColorFontEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsColorFontEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsColorFontEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsColorFontEnabled((boolean)value));
}

- (EventRegistrationToken)addPasteEvent:(WXCTextControlPasteEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->add_Paste(Make<WXCTextControlPasteEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePasteEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Paste(token));
}

- (EventRegistrationToken)addTextCompositionStartedEvent:(void (^)(WXCRichEditBox*, WXCTextCompositionStartedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->add_TextCompositionStarted(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_RichEditBox_Windows_UI_Xaml_Controls_TextCompositionStartedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTextCompositionStartedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TextCompositionStarted(token));
}

- (EventRegistrationToken)addTextCompositionChangedEvent:(void (^)(WXCRichEditBox*, WXCTextCompositionChangedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->add_TextCompositionChanged(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_RichEditBox_Windows_UI_Xaml_Controls_TextCompositionChangedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTextCompositionChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TextCompositionChanged(token));
}

- (EventRegistrationToken)addTextCompositionEndedEvent:(void (^)(WXCRichEditBox*, WXCTextCompositionEndedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->add_TextCompositionEnded(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_RichEditBox_Windows_UI_Xaml_Controls_TextCompositionEndedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTextCompositionEndedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TextCompositionEnded(token));
}

- (WXTextReadingOrder)textReadingOrder {
    ABI::Windows::UI::Xaml::TextReadingOrder unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextReadingOrder(&unmarshalledReturn));
    return (WXTextReadingOrder)unmarshalledReturn;
}

- (void)setTextReadingOrder:(WXTextReadingOrder)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextReadingOrder((ABI::Windows::UI::Xaml::TextReadingOrder)value));
}

- (WXCCandidateWindowAlignment)desiredCandidateWindowAlignment {
    ABI::Windows::UI::Xaml::Controls::CandidateWindowAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->get_DesiredCandidateWindowAlignment(&unmarshalledReturn));
    return (WXCCandidateWindowAlignment)unmarshalledReturn;
}

- (void)setDesiredCandidateWindowAlignment:(WXCCandidateWindowAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->put_DesiredCandidateWindowAlignment((ABI::Windows::UI::Xaml::Controls::CandidateWindowAlignment)value));
}

- (EventRegistrationToken)addCandidateWindowBoundsChangedEvent:(void (^)(WXCRichEditBox*, WXCCandidateWindowBoundsChangedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->add_CandidateWindowBoundsChanged(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_RichEditBox_Windows_UI_Xaml_Controls_CandidateWindowBoundsChangedEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeCandidateWindowBoundsChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_CandidateWindowBoundsChanged(token));
}

- (EventRegistrationToken)addTextChangingEvent:(void (^)(WXCRichEditBox*, WXCRichEditBoxTextChangingEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->add_TextChanging(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_RichEditBox_Windows_UI_Xaml_Controls_RichEditBoxTextChangingEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTextChangingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TextChanging(token));
}

- (void)getLinguisticAlternativesAsyncWithSuccess:(void (^)(NSArray* /* NSString * */))success failure:(void (^)(NSError*))failure {
    ComPtr<ABI::Windows::Foundation::IAsyncOperation<IVectorView<HSTRING>*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox4>(self);
    THROW_NS_IF_FAILED(_comInst->GetLinguisticAlternativesAsync(&unmarshalledReturn));

    auto successRc = makeBlockHolder(success);
    auto failureRc = makeBlockHolder(failure);
    auto completionHandler = ::Microsoft::WRL::Callback<
        ::Microsoft::WRL::Implements<::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::WinRtClassicComMix>,
                                     ABI::Windows::Foundation::IAsyncOperationCompletedHandler<IVectorView<HSTRING>*>,
                                     FtmBase>>(
        [successRc, failureRc](ABI::Windows::Foundation::IAsyncOperation<IVectorView<HSTRING>*>* op, AsyncStatus status) {
            @autoreleasepool {
                if (!_handleAsyncErrorCode(op, failureRc)) {
                    return S_OK;
                }
                if (status == AsyncStatus::Completed) {
                    ComPtr<IVectorView<HSTRING>> result;
                    HRESULT hr = op->GetResults(result.GetAddressOf());
                    if (SUCCEEDED(hr)) {
                        if (successRc) {
                            successRc(RTProxiedNSArray_NSString_create(result.Get()));
                        }
                    } else {
                        if (failureRc) {
                            failureRc([NSError errorWithDomain:@"HRESULT" code:hr userInfo:nil]);
                        }
                    }
                } else {
                    if (failureRc) {
                        failureRc([NSError errorWithDomain:@"Async" code:(int)status userInfo:nil]);
                    }
                }
                return S_OK;
            }
        });

    unmarshalledReturn->put_Completed(completionHandler.Get());
}

- (WXCRichEditClipboardFormat)clipboardCopyFormat {
    ABI::Windows::UI::Xaml::Controls::RichEditClipboardFormat unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox4>(self);
    THROW_NS_IF_FAILED(_comInst->get_ClipboardCopyFormat(&unmarshalledReturn));
    return (WXCRichEditClipboardFormat)unmarshalledReturn;
}

- (void)setClipboardCopyFormat:(WXCRichEditClipboardFormat)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRichEditBox4>(self);
    THROW_NS_IF_FAILED(_comInst->put_ClipboardCopyFormat((ABI::Windows::UI::Xaml::Controls::RichEditClipboardFormat)value));
}

@end

@implementation WXCTextBox

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBox> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBoxFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.TextBox").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBox> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCTextBox* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBoxStatics3> WXCITextBoxStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBoxStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.TextBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)desiredCandidateWindowAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_DesiredCandidateWindowAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textReadingOrderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextReadingOrderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBoxStatics> WXCITextBoxStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBoxStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.TextBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)textProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxLengthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxLengthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isReadOnlyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsReadOnlyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)acceptsReturnProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AcceptsReturnProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textWrappingProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextWrappingProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isSpellCheckEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsSpellCheckEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isTextPredictionEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTextPredictionEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)inputScopeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_InputScopeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBoxStatics2> WXCITextBoxStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITextBoxStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.TextBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)placeholderTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectionHighlightColorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectionHighlightColorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)preventKeyboardDisplayOnProgrammaticFocusProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_PreventKeyboardDisplayOnProgrammaticFocusProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isColorFontEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITextBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsColorFontEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)text {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_Text(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_Text(nsStrToHstr(value).Get()));
}

- (NSString*)selectedText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setSelectedText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedText(nsStrToHstr(value).Get()));
}

- (int)selectionLength {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionLength(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setSelectionLength:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectionLength(value));
}

- (int)selectionStart {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionStart(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setSelectionStart:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectionStart(value));
}

- (int)maxLength {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxLength(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaxLength:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxLength(value));
}

- (BOOL)isReadOnly {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsReadOnly(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsReadOnly:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsReadOnly((boolean)value));
}

- (BOOL)acceptsReturn {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_AcceptsReturn(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setAcceptsReturn:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_AcceptsReturn((boolean)value));
}

- (WXTextAlignment)textAlignment {
    ABI::Windows::UI::Xaml::TextAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextAlignment(&unmarshalledReturn));
    return (WXTextAlignment)unmarshalledReturn;
}

- (void)setTextAlignment:(WXTextAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextAlignment((ABI::Windows::UI::Xaml::TextAlignment)value));
}

- (WXTextWrapping)textWrapping {
    ABI::Windows::UI::Xaml::TextWrapping unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextWrapping(&unmarshalledReturn));
    return (WXTextWrapping)unmarshalledReturn;
}

- (void)setTextWrapping:(WXTextWrapping)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextWrapping((ABI::Windows::UI::Xaml::TextWrapping)value));
}

- (BOOL)isSpellCheckEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSpellCheckEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSpellCheckEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSpellCheckEnabled((boolean)value));
}

- (BOOL)isTextPredictionEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTextPredictionEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTextPredictionEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTextPredictionEnabled((boolean)value));
}

- (WUXIInputScope*)inputScope {
    ComPtr<ABI::Windows::UI::Xaml::Input::IInputScope> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_InputScope(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXIInputScope>(unmarshalledReturn.Get());
}

- (void)setInputScope:(WUXIInputScope*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_InputScope(_getRtInterface<ABI::Windows::UI::Xaml::Input::IInputScope>(value).Get()));
}

- (EventRegistrationToken)addTextChangedEvent:(WXCTextChangedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_TextChanged(Make<WXCTextChangedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTextChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TextChanged(token));
}

- (EventRegistrationToken)addSelectionChangedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_SelectionChanged(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeSelectionChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_SelectionChanged(token));
}

- (EventRegistrationToken)addContextMenuOpeningEvent:(WXCContextMenuOpeningEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_ContextMenuOpening(Make<WXCContextMenuOpeningEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeContextMenuOpeningEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ContextMenuOpening(token));
}

- (void)select:(int)start length:(int)length {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->Select(start, length));
}

- (void)selectAll {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->SelectAll());
}

- (WFRect*)getRectFromCharacterIndex:(int)charIndex trailingEdge:(BOOL)trailingEdge {
    ABI::Windows::Foundation::Rect unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox>(self);
    THROW_NS_IF_FAILED(_comInst->GetRectFromCharacterIndex(charIndex, (boolean)trailingEdge, &unmarshalledReturn));
    return WFRect_create(unmarshalledReturn);
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (NSString*)placeholderText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setPlaceholderText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_PlaceholderText(nsStrToHstr(value).Get()));
}

- (WUXMSolidColorBrush*)selectionHighlightColor {
    ComPtr<ABI::Windows::UI::Xaml::Media::ISolidColorBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionHighlightColor(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMSolidColorBrush>(unmarshalledReturn.Get());
}

- (void)setSelectionHighlightColor:(WUXMSolidColorBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_SelectionHighlightColor(_getRtInterface<ABI::Windows::UI::Xaml::Media::ISolidColorBrush>(value).Get()));
}

- (BOOL)preventKeyboardDisplayOnProgrammaticFocus {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_PreventKeyboardDisplayOnProgrammaticFocus(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setPreventKeyboardDisplayOnProgrammaticFocus:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_PreventKeyboardDisplayOnProgrammaticFocus((boolean)value));
}

- (BOOL)isColorFontEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsColorFontEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsColorFontEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsColorFontEnabled((boolean)value));
}

- (EventRegistrationToken)addPasteEvent:(WXCTextControlPasteEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->add_Paste(Make<WXCTextControlPasteEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePasteEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Paste(token));
}

- (EventRegistrationToken)addTextCompositionStartedEvent:(void (^)(WXCTextBox*, WXCTextCompositionStartedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->add_TextCompositionStarted(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_TextBox_Windows_UI_Xaml_Controls_TextCompositionStartedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTextCompositionStartedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TextCompositionStarted(token));
}

- (EventRegistrationToken)addTextCompositionChangedEvent:(void (^)(WXCTextBox*, WXCTextCompositionChangedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->add_TextCompositionChanged(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_TextBox_Windows_UI_Xaml_Controls_TextCompositionChangedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTextCompositionChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TextCompositionChanged(token));
}

- (EventRegistrationToken)addTextCompositionEndedEvent:(void (^)(WXCTextBox*, WXCTextCompositionEndedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->add_TextCompositionEnded(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_TextBox_Windows_UI_Xaml_Controls_TextCompositionEndedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTextCompositionEndedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TextCompositionEnded(token));
}

- (WXTextReadingOrder)textReadingOrder {
    ABI::Windows::UI::Xaml::TextReadingOrder unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextReadingOrder(&unmarshalledReturn));
    return (WXTextReadingOrder)unmarshalledReturn;
}

- (void)setTextReadingOrder:(WXTextReadingOrder)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextReadingOrder((ABI::Windows::UI::Xaml::TextReadingOrder)value));
}

- (WXCCandidateWindowAlignment)desiredCandidateWindowAlignment {
    ABI::Windows::UI::Xaml::Controls::CandidateWindowAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->get_DesiredCandidateWindowAlignment(&unmarshalledReturn));
    return (WXCCandidateWindowAlignment)unmarshalledReturn;
}

- (void)setDesiredCandidateWindowAlignment:(WXCCandidateWindowAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->put_DesiredCandidateWindowAlignment((ABI::Windows::UI::Xaml::Controls::CandidateWindowAlignment)value));
}

- (EventRegistrationToken)addCandidateWindowBoundsChangedEvent:(void (^)(WXCTextBox*, WXCCandidateWindowBoundsChangedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->add_CandidateWindowBoundsChanged(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_TextBox_Windows_UI_Xaml_Controls_CandidateWindowBoundsChangedEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeCandidateWindowBoundsChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_CandidateWindowBoundsChanged(token));
}

- (EventRegistrationToken)addTextChangingEvent:(void (^)(WXCTextBox*, WXCTextBoxTextChangingEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->add_TextChanging(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_TextBox_Windows_UI_Xaml_Controls_TextBoxTextChangingEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTextChangingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TextChanging(token));
}

- (void)getLinguisticAlternativesAsyncWithSuccess:(void (^)(NSArray* /* NSString * */))success failure:(void (^)(NSError*))failure {
    ComPtr<ABI::Windows::Foundation::IAsyncOperation<IVectorView<HSTRING>*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITextBox4>(self);
    THROW_NS_IF_FAILED(_comInst->GetLinguisticAlternativesAsync(&unmarshalledReturn));

    auto successRc = makeBlockHolder(success);
    auto failureRc = makeBlockHolder(failure);
    auto completionHandler = ::Microsoft::WRL::Callback<
        ::Microsoft::WRL::Implements<::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::WinRtClassicComMix>,
                                     ABI::Windows::Foundation::IAsyncOperationCompletedHandler<IVectorView<HSTRING>*>,
                                     FtmBase>>(
        [successRc, failureRc](ABI::Windows::Foundation::IAsyncOperation<IVectorView<HSTRING>*>* op, AsyncStatus status) {
            @autoreleasepool {
                if (!_handleAsyncErrorCode(op, failureRc)) {
                    return S_OK;
                }
                if (status == AsyncStatus::Completed) {
                    ComPtr<IVectorView<HSTRING>> result;
                    HRESULT hr = op->GetResults(result.GetAddressOf());
                    if (SUCCEEDED(hr)) {
                        if (successRc) {
                            successRc(RTProxiedNSArray_NSString_create(result.Get()));
                        }
                    } else {
                        if (failureRc) {
                            failureRc([NSError errorWithDomain:@"HRESULT" code:hr userInfo:nil]);
                        }
                    }
                } else {
                    if (failureRc) {
                        failureRc([NSError errorWithDomain:@"Async" code:(int)status userInfo:nil]);
                    }
                }
                return S_OK;
            }
        });

    unmarshalledReturn->put_Completed(completionHandler.Get());
}

@end

@implementation WXCToggleSwitch

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IToggleSwitch> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ToggleSwitch").Get(), &out));
    return [_createRtProxy<WXCToggleSwitch>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IToggleSwitchStatics> WXCIToggleSwitchStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IToggleSwitchStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ToggleSwitch").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isOnProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToggleSwitchStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsOnProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToggleSwitchStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToggleSwitchStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)onContentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToggleSwitchStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OnContentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)onContentTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToggleSwitchStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OnContentTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)offContentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToggleSwitchStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OffContentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)offContentTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToggleSwitchStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OffContentTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)isOn {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsOn(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsOn:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsOn((boolean)value));
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (RTObject*)onContent {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->get_OnContent(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setOnContent:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->put_OnContent([value comObj].Get()));
}

- (WXDataTemplate*)onContentTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->get_OnContentTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setOnContentTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->put_OnContentTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (RTObject*)offContent {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->get_OffContent(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setOffContent:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->put_OffContent([value comObj].Get()));
}

- (WXDataTemplate*)offContentTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->get_OffContentTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setOffContentTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->put_OffContentTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WUXCPToggleSwitchTemplateSettings*)templateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPToggleSwitchTemplateSettings>(unmarshalledReturn.Get());
}

- (EventRegistrationToken)addToggledEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->add_Toggled(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeToggledEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitch>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Toggled(token));
}

- (void)onToggled {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitchOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnToggled());
}

- (void)onOnContentChanged:(RTObject*)oldContent newContent:(RTObject*)newContent {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitchOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnOnContentChanged([oldContent comObj].Get(), [newContent comObj].Get()));
}

- (void)onOffContentChanged:(RTObject*)oldContent newContent:(RTObject*)newContent {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitchOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnOffContentChanged([oldContent comObj].Get(), [newContent comObj].Get()));
}

- (void)onHeaderChanged:(RTObject*)oldContent newContent:(RTObject*)newContent {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleSwitchOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnHeaderChanged([oldContent comObj].Get(), [newContent comObj].Get()));
}

@end

@implementation WXCUserControl

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IUserControl> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IUserControlFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.UserControl").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IUserControl> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCUserControl* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IUserControlStatics> WXCIUserControlStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IUserControlStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.UserControl").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)contentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIUserControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXUIElement*)content {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IUserControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_Content(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setContent:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IUserControl>(self);
    THROW_NS_IF_FAILED(_comInst->put_Content(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

@end

@implementation WXCGroupItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGroupItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGroupItemFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.GroupItem").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGroupItem> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCGroupItem* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCSettingsFlyout

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISettingsFlyoutFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SettingsFlyout").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCSettingsFlyout* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ISettingsFlyoutStatics> WXCISettingsFlyoutStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISettingsFlyoutStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SettingsFlyout").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)titleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISettingsFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TitleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerBackgroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISettingsFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderBackgroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerForegroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISettingsFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderForegroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)iconSourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISettingsFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IconSourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)title {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_Title(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setTitle:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_Title(nsStrToHstr(value).Get()));
}

- (WUXMBrush*)headerBackground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderBackground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setHeaderBackground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderBackground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)headerForeground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderForeground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setHeaderForeground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderForeground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMImageSource*)iconSource {
    ComPtr<ABI::Windows::UI::Xaml::Media::IImageSource> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_IconSource(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMImageSource>(unmarshalledReturn.Get());
}

- (void)setIconSource:(WUXMImageSource*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_IconSource(_getRtInterface<ABI::Windows::UI::Xaml::Media::IImageSource>(value).Get()));
}

- (WUXCPSettingsFlyoutTemplateSettings*)templateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::ISettingsFlyoutTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPSettingsFlyoutTemplateSettings>(unmarshalledReturn.Get());
}

- (EventRegistrationToken)addBackClickEvent:(WXCBackClickEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->add_BackClick(Make<WXCBackClickEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeBackClickEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->remove_BackClick(token));
}

- (void)show {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->Show());
}

- (void)showIndependent {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->ShowIndependent());
}

- (void)hide {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISettingsFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->Hide());
}

@end

@implementation WXCToolTip

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IToolTip> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IToolTipFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ToolTip").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IToolTip> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCToolTip* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IToolTipStatics> WXCIToolTipStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IToolTipStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ToolTip").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)horizontalOffsetProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToolTipStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HorizontalOffsetProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isOpenProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToolTipStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsOpenProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)placementProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToolTipStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlacementProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)placementTargetProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToolTipStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlacementTargetProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)verticalOffsetProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToolTipStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VerticalOffsetProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (double)horizontalOffset {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalOffset(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setHorizontalOffset:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->put_HorizontalOffset(value));
}

- (BOOL)isOpen {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsOpen(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsOpen:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsOpen((boolean)value));
}

- (WUXCPPlacementMode)placement {
    ABI::Windows::UI::Xaml::Controls::Primitives::PlacementMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->get_Placement(&unmarshalledReturn));
    return (WUXCPPlacementMode)unmarshalledReturn;
}

- (void)setPlacement:(WUXCPPlacementMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->put_Placement((ABI::Windows::UI::Xaml::Controls::Primitives::PlacementMode)value));
}

- (WXUIElement*)placementTarget {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->get_PlacementTarget(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setPlacementTarget:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->put_PlacementTarget(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

- (double)verticalOffset {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalOffset(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setVerticalOffset:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->put_VerticalOffset(value));
}

- (WUXCPToolTipTemplateSettings*)templateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPToolTipTemplateSettings>(unmarshalledReturn.Get());
}

- (EventRegistrationToken)addClosedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->add_Closed(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeClosedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Closed(token));
}

- (EventRegistrationToken)addOpenedEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->add_Opened(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeOpenedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToolTip>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Opened(token));
}

@end

@implementation WXCComboBoxItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IComboBoxItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IComboBoxItemFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ComboBoxItem").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IComboBoxItem> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCComboBoxItem* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCFlipViewItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlipViewItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlipViewItemFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.FlipViewItem").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlipViewItem> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCFlipViewItem* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCListBoxItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListBoxItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListBoxItemFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListBoxItem").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListBoxItem> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCListBoxItem* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCProgressBar

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IProgressBar> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IProgressBarFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ProgressBar").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IProgressBar> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIRangeBaseOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIRangeBaseOverrides)]) {
        typedOuter = Make<WUXCPIRangeBaseOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCProgressBar* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IProgressBarStatics> WXCIProgressBarStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IProgressBarStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ProgressBar").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isIndeterminateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIProgressBarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsIndeterminateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)showErrorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIProgressBarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ShowErrorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)showPausedProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIProgressBarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ShowPausedProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)isIndeterminate {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IProgressBar>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsIndeterminate(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsIndeterminate:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IProgressBar>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsIndeterminate((boolean)value));
}

- (BOOL)showError {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IProgressBar>(self);
    THROW_NS_IF_FAILED(_comInst->get_ShowError(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setShowError:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IProgressBar>(self);
    THROW_NS_IF_FAILED(_comInst->put_ShowError((boolean)value));
}

- (BOOL)showPaused {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IProgressBar>(self);
    THROW_NS_IF_FAILED(_comInst->get_ShowPaused(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setShowPaused:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IProgressBar>(self);
    THROW_NS_IF_FAILED(_comInst->put_ShowPaused((boolean)value));
}

- (WUXCPProgressBarTemplateSettings*)templateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::IProgressBarTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IProgressBar>(self);
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPProgressBarTemplateSettings>(unmarshalledReturn.Get());
}

@end

@implementation WXCSlider

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISlider> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISliderFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Slider").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISlider> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIRangeBaseOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIRangeBaseOverrides)]) {
        typedOuter = Make<WUXCPIRangeBaseOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCSlider* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ISliderStatics2> WXCISliderStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISliderStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Slider").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISliderStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISliderStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ISliderStatics> WXCISliderStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISliderStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Slider").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)intermediateValueProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISliderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IntermediateValueProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)stepFrequencyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISliderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_StepFrequencyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)snapsToProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISliderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SnapsToProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)tickFrequencyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISliderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TickFrequencyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)tickPlacementProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISliderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TickPlacementProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)orientationProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISliderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OrientationProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isDirectionReversedProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISliderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsDirectionReversedProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isThumbToolTipEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISliderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsThumbToolTipEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)thumbToolTipValueConverterProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISliderStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ThumbToolTipValueConverterProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (double)intermediateValue {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->get_IntermediateValue(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setIntermediateValue:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->put_IntermediateValue(value));
}

- (double)stepFrequency {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->get_StepFrequency(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setStepFrequency:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->put_StepFrequency(value));
}

- (WUXCPSliderSnapsTo)snapsTo {
    ABI::Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->get_SnapsTo(&unmarshalledReturn));
    return (WUXCPSliderSnapsTo)unmarshalledReturn;
}

- (void)setSnapsTo:(WUXCPSliderSnapsTo)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->put_SnapsTo((ABI::Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo)value));
}

- (double)tickFrequency {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->get_TickFrequency(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setTickFrequency:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->put_TickFrequency(value));
}

- (WUXCPTickPlacement)tickPlacement {
    ABI::Windows::UI::Xaml::Controls::Primitives::TickPlacement unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->get_TickPlacement(&unmarshalledReturn));
    return (WUXCPTickPlacement)unmarshalledReturn;
}

- (void)setTickPlacement:(WUXCPTickPlacement)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->put_TickPlacement((ABI::Windows::UI::Xaml::Controls::Primitives::TickPlacement)value));
}

- (WXCOrientation)orientation {
    ABI::Windows::UI::Xaml::Controls::Orientation unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->get_Orientation(&unmarshalledReturn));
    return (WXCOrientation)unmarshalledReturn;
}

- (void)setOrientation:(WXCOrientation)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->put_Orientation((ABI::Windows::UI::Xaml::Controls::Orientation)value));
}

- (BOOL)isDirectionReversed {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsDirectionReversed(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsDirectionReversed:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsDirectionReversed((boolean)value));
}

- (BOOL)isThumbToolTipEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsThumbToolTipEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsThumbToolTipEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsThumbToolTipEnabled((boolean)value));
}

- (RTObject<WUXDIValueConverter>*)thumbToolTipValueConverter {
    ComPtr<ABI::Windows::UI::Xaml::Data::IValueConverter> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(_comInst->get_ThumbToolTipValueConverter(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDIValueConverter>(unmarshalledReturn.Get());
}

- (void)setThumbToolTipValueConverter:(RTObject<WUXDIValueConverter>*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_ThumbToolTipValueConverter(_getRtInterface<ABI::Windows::UI::Xaml::Data::IValueConverter>(value).Get()));
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider2>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider2>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider2>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISlider2>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

@end

@implementation WXCButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IButtonFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Button").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout> WXCIButtonStaticsWithFlyout_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Button").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)flyoutProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIButtonStaticsWithFlyout_inst();
    THROW_NS_IF_FAILED(_comInst->get_FlyoutProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WUXCPFlyoutBase*)flyout {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::IFlyoutBase> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IButtonWithFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_Flyout(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPFlyoutBase>(unmarshalledReturn.Get());
}

- (void)setFlyout:(WUXCPFlyoutBase*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IButtonWithFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_Flyout(_getRtInterface<ABI::Windows::UI::Xaml::Controls::Primitives::IFlyoutBase>(value).Get()));
}

@end

@implementation WXCHyperlinkButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHyperlinkButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHyperlinkButtonFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.HyperlinkButton").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHyperlinkButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCHyperlinkButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IHyperlinkButtonStatics> WXCIHyperlinkButtonStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHyperlinkButtonStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.HyperlinkButton").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)navigateUriProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIHyperlinkButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_NavigateUriProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WFUri*)navigateUri {
    ComPtr<ABI::Windows::Foundation::IUriRuntimeClass> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHyperlinkButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_NavigateUri(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WFUri>(unmarshalledReturn.Get());
}

- (void)setNavigateUri:(WFUri*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHyperlinkButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_NavigateUri(_getRtInterface<ABI::Windows::Foundation::IUriRuntimeClass>(value).Get()));
}

@end

@implementation WXCListViewBase

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBase> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBaseStatics4> WXCIListViewBaseStatics4_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBaseStatics4> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListViewBase").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isMultiSelectCheckBoxEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsMultiSelectCheckBoxEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBaseStatics2> WXCIListViewBaseStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBaseStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListViewBase").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)showsScrollingPlaceholdersProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_ShowsScrollingPlaceholdersProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)footerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_FooterProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)footerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_FooterTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)footerTransitionsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_FooterTransitionsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBaseStatics3> WXCIListViewBaseStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBaseStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListViewBase").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)reorderModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_ReorderModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBaseStatics> WXCIListViewBaseStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBaseStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListViewBase").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)selectionModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectionModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isSwipeEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsSwipeEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)canDragItemsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CanDragItemsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)canReorderItemsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CanReorderItemsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isItemClickEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsItemClickEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dataFetchSizeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DataFetchSizeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)incrementalLoadingThresholdProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IncrementalLoadingThresholdProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)incrementalLoadingTriggerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IncrementalLoadingTriggerProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)semanticZoomOwnerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SemanticZoomOwnerProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isActiveViewProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsActiveViewProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isZoomedInViewProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsZoomedInViewProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTransitionsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTransitionsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBaseStatics5> WXCIListViewBaseStatics5_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewBaseStatics5> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListViewBase").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)singleSelectionFollowsFocusProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListViewBaseStatics5_inst();
    THROW_NS_IF_FAILED(_comInst->get_SingleSelectionFollowsFocusProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSMutableArray* /* RTObject* */)selectedItems {
    ComPtr<IVector<IInspectable*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedItems(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_RTObject_create(unmarshalledReturn.Get());
}

- (WXCListViewSelectionMode)selectionMode {
    ABI::Windows::UI::Xaml::Controls::ListViewSelectionMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionMode(&unmarshalledReturn));
    return (WXCListViewSelectionMode)unmarshalledReturn;
}

- (void)setSelectionMode:(WXCListViewSelectionMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectionMode((ABI::Windows::UI::Xaml::Controls::ListViewSelectionMode)value));
}

- (BOOL)isSwipeEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSwipeEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSwipeEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSwipeEnabled((boolean)value));
}

- (BOOL)canDragItems {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->get_CanDragItems(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setCanDragItems:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->put_CanDragItems((boolean)value));
}

- (BOOL)canReorderItems {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->get_CanReorderItems(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setCanReorderItems:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->put_CanReorderItems((boolean)value));
}

- (BOOL)isItemClickEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsItemClickEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsItemClickEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsItemClickEnabled((boolean)value));
}

- (double)dataFetchSize {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->get_DataFetchSize(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setDataFetchSize:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->put_DataFetchSize(value));
}

- (double)incrementalLoadingThreshold {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->get_IncrementalLoadingThreshold(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setIncrementalLoadingThreshold:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->put_IncrementalLoadingThreshold(value));
}

- (WXCIncrementalLoadingTrigger)incrementalLoadingTrigger {
    ABI::Windows::UI::Xaml::Controls::IncrementalLoadingTrigger unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->get_IncrementalLoadingTrigger(&unmarshalledReturn));
    return (WXCIncrementalLoadingTrigger)unmarshalledReturn;
}

- (void)setIncrementalLoadingTrigger:(WXCIncrementalLoadingTrigger)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->put_IncrementalLoadingTrigger((ABI::Windows::UI::Xaml::Controls::IncrementalLoadingTrigger)value));
}

- (EventRegistrationToken)addItemClickEvent:(WXCItemClickEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->add_ItemClick(Make<WXCItemClickEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeItemClickEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ItemClick(token));
}

- (EventRegistrationToken)addDragItemsStartingEvent:(WXCDragItemsStartingEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->add_DragItemsStarting(Make<WXCDragItemsStartingEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeDragItemsStartingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->remove_DragItemsStarting(token));
}

- (void)scrollIntoView:(RTObject*)item {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->ScrollIntoView([item comObj].Get()));
}

- (void)selectAll {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->SelectAll());
}

- (void)loadMoreItemsAsyncWithSuccess:(void (^)(WUXDLoadMoreItemsResult*))success failure:(void (^)(NSError*))failure {
    ComPtr<ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::UI::Xaml::Data::LoadMoreItemsResult>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->LoadMoreItemsAsync(&unmarshalledReturn));

    auto successRc = makeBlockHolder(success);
    auto failureRc = makeBlockHolder(failure);
    auto completionHandler = ::Microsoft::WRL::Callback<::Microsoft::WRL::Implements<
        ::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::WinRtClassicComMix>,
        ABI::Windows::Foundation::IAsyncOperationCompletedHandler<ABI::Windows::UI::Xaml::Data::LoadMoreItemsResult>,
        FtmBase>>([successRc, failureRc](ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::UI::Xaml::Data::LoadMoreItemsResult>* op,
                                         AsyncStatus status) {
        @autoreleasepool {
            if (!_handleAsyncErrorCode(op, failureRc)) {
                return S_OK;
            }
            if (status == AsyncStatus::Completed) {
                ABI::Windows::UI::Xaml::Data::LoadMoreItemsResult result;
                HRESULT hr = op->GetResults(&result);
                if (SUCCEEDED(hr)) {
                    if (successRc) {
                        successRc(WUXDLoadMoreItemsResult_create(result));
                    }
                } else {
                    if (failureRc) {
                        failureRc([NSError errorWithDomain:@"HRESULT" code:hr userInfo:nil]);
                    }
                }
            } else {
                if (failureRc) {
                    failureRc([NSError errorWithDomain:@"Async" code:(int)status userInfo:nil]);
                }
            }
            return S_OK;
        }
    });

    unmarshalledReturn->put_Completed(completionHandler.Get());
}

- (void)scrollIntoViewWithAlignment:(RTObject*)item alignment:(WXCScrollIntoViewAlignment)alignment {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(
        _comInst->ScrollIntoViewWithAlignment([item comObj].Get(), (ABI::Windows::UI::Xaml::Controls::ScrollIntoViewAlignment)alignment));
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WUXMATransitionCollection*)headerTransitions {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTransitions(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMATransitionCollection>(unmarshalledReturn.Get());
}

- (void)setHeaderTransitions:(WUXMATransitionCollection*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_HeaderTransitions(_getRtInterface<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>>(value).Get()));
}

- (WXCSemanticZoom*)semanticZoomOwner {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoom> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->get_SemanticZoomOwner(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCSemanticZoom>(unmarshalledReturn.Get());
}

- (void)setSemanticZoomOwner:(WXCSemanticZoom*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->put_SemanticZoomOwner(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(value).Get()));
}

- (BOOL)isActiveView {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsActiveView(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsActiveView:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsActiveView((boolean)value));
}

- (BOOL)isZoomedInView {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsZoomedInView(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsZoomedInView:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsZoomedInView((boolean)value));
}

- (void)initializeViewChange {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->InitializeViewChange());
}

- (void)completeViewChange {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->CompleteViewChange());
}

- (void)makeVisible:(WXCSemanticZoomLocation*)item {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->MakeVisible(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(item).Get()));
}

- (void)startViewChangeFrom:(WXCSemanticZoomLocation*)source destination:(WXCSemanticZoomLocation*)destination {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(
        _comInst->StartViewChangeFrom(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(source).Get(),
                                      _getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(destination).Get()));
}

- (void)startViewChangeTo:(WXCSemanticZoomLocation*)source destination:(WXCSemanticZoomLocation*)destination {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(
        _comInst->StartViewChangeTo(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(source).Get(),
                                    _getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(destination).Get()));
}

- (void)completeViewChangeFrom:(WXCSemanticZoomLocation*)source destination:(WXCSemanticZoomLocation*)destination {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(
        _comInst->CompleteViewChangeFrom(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(source).Get(),
                                         _getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(destination).Get()));
}

- (void)completeViewChangeTo:(WXCSemanticZoomLocation*)source destination:(WXCSemanticZoomLocation*)destination {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(
        _comInst->CompleteViewChangeTo(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(source).Get(),
                                       _getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(destination).Get()));
}

- (BOOL)showsScrollingPlaceholders {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase2>(self);
    THROW_NS_IF_FAILED(_comInst->get_ShowsScrollingPlaceholders(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setShowsScrollingPlaceholders:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase2>(self);
    THROW_NS_IF_FAILED(_comInst->put_ShowsScrollingPlaceholders((boolean)value));
}

- (EventRegistrationToken)addContainerContentChangingEvent:(void (^)(WXCListViewBase*, WXCContainerContentChangingEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase2>(self);
    THROW_NS_IF_FAILED(_comInst->add_ContainerContentChanging(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_ListViewBase_Windows_UI_Xaml_Controls_ContainerContentChangingEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeContainerContentChangingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ContainerContentChanging(token));
}

- (void)setDesiredContainerUpdateDuration:(WFTimeSpan*)duration {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase2>(self);
    THROW_NS_IF_FAILED(_comInst->SetDesiredContainerUpdateDuration(*[duration internalStruct]));
}

- (RTObject*)footer {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase2>(self);
    THROW_NS_IF_FAILED(_comInst->get_Footer(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setFooter:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase2>(self);
    THROW_NS_IF_FAILED(_comInst->put_Footer([value comObj].Get()));
}

- (WXDataTemplate*)footerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase2>(self);
    THROW_NS_IF_FAILED(_comInst->get_FooterTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setFooterTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase2>(self);
    THROW_NS_IF_FAILED(_comInst->put_FooterTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WUXMATransitionCollection*)footerTransitions {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase2>(self);
    THROW_NS_IF_FAILED(_comInst->get_FooterTransitions(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMATransitionCollection>(unmarshalledReturn.Get());
}

- (void)setFooterTransitions:(WUXMATransitionCollection*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase2>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_FooterTransitions(_getRtInterface<IVector<ABI::Windows::UI::Xaml::Media::Animation::Transition*>>(value).Get()));
}

- (WXCListViewReorderMode)reorderMode {
    ABI::Windows::UI::Xaml::Controls::ListViewReorderMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase3>(self);
    THROW_NS_IF_FAILED(_comInst->get_ReorderMode(&unmarshalledReturn));
    return (WXCListViewReorderMode)unmarshalledReturn;
}

- (void)setReorderMode:(WXCListViewReorderMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase3>(self);
    THROW_NS_IF_FAILED(_comInst->put_ReorderMode((ABI::Windows::UI::Xaml::Controls::ListViewReorderMode)value));
}

- (NSArray* /* WUXDItemIndexRange* */)selectedRanges {
    ComPtr<IVectorView<ABI::Windows::UI::Xaml::Data::ItemIndexRange*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase4>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedRanges(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSArray_WUXDItemIndexRange_create(unmarshalledReturn.Get());
}

- (BOOL)isMultiSelectCheckBoxEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase4>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsMultiSelectCheckBoxEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsMultiSelectCheckBoxEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase4>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsMultiSelectCheckBoxEnabled((boolean)value));
}

- (EventRegistrationToken)addDragItemsCompletedEvent:(void (^)(WXCListViewBase*, WXCDragItemsCompletedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase4>(self);
    THROW_NS_IF_FAILED(_comInst->add_DragItemsCompleted(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_ListViewBase_Windows_UI_Xaml_Controls_DragItemsCompletedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeDragItemsCompletedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase4>(self);
    THROW_NS_IF_FAILED(_comInst->remove_DragItemsCompleted(token));
}

- (EventRegistrationToken)addChoosingItemContainerEvent:(void (^)(WXCListViewBase*, WXCChoosingItemContainerEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase4>(self);
    THROW_NS_IF_FAILED(_comInst->add_ChoosingItemContainer(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_ListViewBase_Windows_UI_Xaml_Controls_ChoosingItemContainerEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeChoosingItemContainerEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase4>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ChoosingItemContainer(token));
}

- (EventRegistrationToken)addChoosingGroupHeaderContainerEvent:(void (^)(WXCListViewBase*,
                                                                         WXCChoosingGroupHeaderContainerEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase4>(self);
    THROW_NS_IF_FAILED(_comInst->add_ChoosingGroupHeaderContainer(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_ListViewBase_Windows_UI_Xaml_Controls_ChoosingGroupHeaderContainerEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeChoosingGroupHeaderContainerEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase4>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ChoosingGroupHeaderContainer(token));
}

- (void)selectRange:(WUXDItemIndexRange*)itemIndexRange {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase4>(self);
    THROW_NS_IF_FAILED(_comInst->SelectRange(_getRtInterface<ABI::Windows::UI::Xaml::Data::IItemIndexRange>(itemIndexRange).Get()));
}

- (void)deselectRange:(WUXDItemIndexRange*)itemIndexRange {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase4>(self);
    THROW_NS_IF_FAILED(_comInst->DeselectRange(_getRtInterface<ABI::Windows::UI::Xaml::Data::IItemIndexRange>(itemIndexRange).Get()));
}

- (BOOL)singleSelectionFollowsFocus {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase5>(self);
    THROW_NS_IF_FAILED(_comInst->get_SingleSelectionFollowsFocus(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setSingleSelectionFollowsFocus:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase5>(self);
    THROW_NS_IF_FAILED(_comInst->put_SingleSelectionFollowsFocus((boolean)value));
}

- (BOOL)isDragSource {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewBase5>(self);
    THROW_NS_IF_FAILED(_comInst->IsDragSource(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

@end

@implementation WXCComboBox

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IComboBox> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IComboBoxFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ComboBox").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IComboBox> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIComboBoxOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIComboBoxOverrides)]) {
        typedOuter = Make<WXCIComboBoxOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCComboBox* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IComboBoxStatics> WXCIComboBoxStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IComboBoxStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ComboBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isDropDownOpenProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIComboBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsDropDownOpenProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxDropDownHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIComboBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxDropDownHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IComboBoxStatics3> WXCIComboBoxStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IComboBoxStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ComboBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)lightDismissOverlayModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIComboBoxStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isTextSearchEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIComboBoxStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTextSearchEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IComboBoxStatics2> WXCIComboBoxStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IComboBoxStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ComboBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIComboBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIComboBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)placeholderTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIComboBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)isDropDownOpen {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsDropDownOpen(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsDropDownOpen:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsDropDownOpen((boolean)value));
}

- (BOOL)isEditable {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsEditable(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (BOOL)isSelectionBoxHighlighted {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSelectionBoxHighlighted(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (double)maxDropDownHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxDropDownHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaxDropDownHeight:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxDropDownHeight(value));
}

- (RTObject*)selectionBoxItem {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionBoxItem(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (WXDataTemplate*)selectionBoxItemTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionBoxItemTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (WUXCPComboBoxTemplateSettings*)templateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPComboBoxTemplateSettings>(unmarshalledReturn.Get());
}

- (EventRegistrationToken)addDropDownClosedEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_DropDownClosed(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeDropDownClosedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_DropDownClosed(token));
}

- (EventRegistrationToken)addDropDownOpenedEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_DropDownOpened(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeDropDownOpenedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_DropDownOpened(token));
}

- (void)onDropDownClosed:(RTObject*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBoxOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnDropDownClosed([e comObj].Get()));
}

- (void)onDropDownOpened:(RTObject*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBoxOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnDropDownOpened([e comObj].Get()));
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (NSString*)placeholderText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setPlaceholderText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_PlaceholderText(nsStrToHstr(value).Get()));
}

- (WXCLightDismissOverlayMode)lightDismissOverlayMode {
    ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox3>(self);
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayMode(&unmarshalledReturn));
    return (WXCLightDismissOverlayMode)unmarshalledReturn;
}

- (void)setLightDismissOverlayMode:(WXCLightDismissOverlayMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox3>(self);
    THROW_NS_IF_FAILED(_comInst->put_LightDismissOverlayMode((ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode)value));
}

- (BOOL)isTextSearchEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox3>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTextSearchEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTextSearchEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IComboBox3>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTextSearchEnabled((boolean)value));
}

@end

@implementation WXCFlipView

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlipView> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlipViewFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.FlipView").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlipView> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIItemsControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIItemsControlOverrides)]) {
        typedOuter = Make<WXCIItemsControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCFlipView* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IFlipViewStatics2> WXCIFlipViewStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlipViewStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.FlipView").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)useTouchAnimationsForAllNavigationProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFlipViewStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_UseTouchAnimationsForAllNavigationProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)useTouchAnimationsForAllNavigation {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFlipView2>(self);
    THROW_NS_IF_FAILED(_comInst->get_UseTouchAnimationsForAllNavigation(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setUseTouchAnimationsForAllNavigation:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFlipView2>(self);
    THROW_NS_IF_FAILED(_comInst->put_UseTouchAnimationsForAllNavigation((boolean)value));
}

@end

@implementation WXCListBox

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListBox> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListBoxFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListBox").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListBox> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIItemsControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIItemsControlOverrides)]) {
        typedOuter = Make<WXCIItemsControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCListBox* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IListBoxStatics2> WXCIListBoxStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListBoxStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)singleSelectionFollowsFocusProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_SingleSelectionFollowsFocusProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IListBoxStatics> WXCIListBoxStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListBoxStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)selectionModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectionModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSMutableArray* /* RTObject* */)selectedItems {
    ComPtr<IVector<IInspectable*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedItems(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_RTObject_create(unmarshalledReturn.Get());
}

- (WXCSelectionMode)selectionMode {
    ABI::Windows::UI::Xaml::Controls::SelectionMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionMode(&unmarshalledReturn));
    return (WXCSelectionMode)unmarshalledReturn;
}

- (void)setSelectionMode:(WXCSelectionMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectionMode((ABI::Windows::UI::Xaml::Controls::SelectionMode)value));
}

- (void)scrollIntoView:(RTObject*)item {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListBox>(self);
    THROW_NS_IF_FAILED(_comInst->ScrollIntoView([item comObj].Get()));
}

- (void)selectAll {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListBox>(self);
    THROW_NS_IF_FAILED(_comInst->SelectAll());
}

- (BOOL)singleSelectionFollowsFocus {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_SingleSelectionFollowsFocus(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setSingleSelectionFollowsFocus:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_SingleSelectionFollowsFocus((boolean)value));
}

@end

@implementation WXCCheckBox

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICheckBox> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICheckBoxFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CheckBox").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICheckBox> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIToggleButtonOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIToggleButtonOverrides)]) {
        typedOuter = Make<WUXCPIToggleButtonOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCCheckBox* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCRadioButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRadioButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRadioButtonFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RadioButton").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRadioButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIToggleButtonOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIToggleButtonOverrides)]) {
        typedOuter = Make<WUXCPIToggleButtonOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCRadioButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IRadioButtonStatics> WXCIRadioButtonStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IRadioButtonStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.RadioButton").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)groupNameProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIRadioButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_GroupNameProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)groupName {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRadioButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_GroupName(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setGroupName:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IRadioButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_GroupName(nsStrToHstr(value).Get()));
}

@end

@implementation WXCCalendarView

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarView> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarViewFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CalendarView").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarView> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCCalendarView* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarViewStatics> WXCICalendarViewStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarViewStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CalendarView").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)calendarIdentifierProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CalendarIdentifierProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dayOfWeekFormatProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DayOfWeekFormatProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isGroupLabelVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsGroupLabelVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)displayModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DisplayModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)firstDayOfWeekProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FirstDayOfWeekProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isOutOfScopeEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsOutOfScopeEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isTodayHighlightedProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTodayHighlightedProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxDateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxDateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)minDateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MinDateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)numberOfWeeksInViewProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_NumberOfWeeksInViewProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedDatesProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedDatesProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectionModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectionModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)templateSettingsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettingsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)focusBorderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FocusBorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedHoverBorderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedHoverBorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedPressedBorderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedPressedBorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedBorderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedBorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)hoverBorderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HoverBorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)pressedBorderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PressedBorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)calendarItemBorderBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CalendarItemBorderBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)outOfScopeBackgroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OutOfScopeBackgroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)calendarItemBackgroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CalendarItemBackgroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)pressedForegroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PressedForegroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)todayForegroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TodayForegroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)blackoutForegroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BlackoutForegroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedForegroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedForegroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)outOfScopeForegroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OutOfScopeForegroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)calendarItemForegroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CalendarItemForegroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dayItemFontFamilyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DayItemFontFamilyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dayItemFontSizeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DayItemFontSizeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dayItemFontStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DayItemFontStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dayItemFontWeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DayItemFontWeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)todayFontWeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TodayFontWeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)firstOfMonthLabelFontFamilyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FirstOfMonthLabelFontFamilyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)firstOfMonthLabelFontSizeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FirstOfMonthLabelFontSizeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)firstOfMonthLabelFontStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FirstOfMonthLabelFontStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)firstOfMonthLabelFontWeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FirstOfMonthLabelFontWeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)monthYearItemFontFamilyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MonthYearItemFontFamilyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)monthYearItemFontSizeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MonthYearItemFontSizeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)monthYearItemFontStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MonthYearItemFontStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)monthYearItemFontWeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MonthYearItemFontWeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)firstOfYearDecadeLabelFontFamilyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FirstOfYearDecadeLabelFontFamilyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)firstOfYearDecadeLabelFontSizeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FirstOfYearDecadeLabelFontSizeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)firstOfYearDecadeLabelFontStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FirstOfYearDecadeLabelFontStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)firstOfYearDecadeLabelFontWeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FirstOfYearDecadeLabelFontWeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)horizontalDayItemAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HorizontalDayItemAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)verticalDayItemAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VerticalDayItemAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)horizontalFirstOfMonthLabelAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HorizontalFirstOfMonthLabelAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)verticalFirstOfMonthLabelAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VerticalFirstOfMonthLabelAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)calendarItemBorderThicknessProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CalendarItemBorderThicknessProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)calendarViewDayItemStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CalendarViewDayItemStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)calendarIdentifier {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_CalendarIdentifier(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setCalendarIdentifier:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_CalendarIdentifier(nsStrToHstr(value).Get()));
}

- (NSString*)dayOfWeekFormat {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_DayOfWeekFormat(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setDayOfWeekFormat:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_DayOfWeekFormat(nsStrToHstr(value).Get()));
}

- (BOOL)isGroupLabelVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsGroupLabelVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsGroupLabelVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsGroupLabelVisible((boolean)value));
}

- (WXCCalendarViewDisplayMode)displayMode {
    ABI::Windows::UI::Xaml::Controls::CalendarViewDisplayMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_DisplayMode(&unmarshalledReturn));
    return (WXCCalendarViewDisplayMode)unmarshalledReturn;
}

- (void)setDisplayMode:(WXCCalendarViewDisplayMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_DisplayMode((ABI::Windows::UI::Xaml::Controls::CalendarViewDisplayMode)value));
}

- (WGDayOfWeek)firstDayOfWeek {
    ABI::Windows::Globalization::DayOfWeek unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstDayOfWeek(&unmarshalledReturn));
    return (WGDayOfWeek)unmarshalledReturn;
}

- (void)setFirstDayOfWeek:(WGDayOfWeek)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_FirstDayOfWeek((ABI::Windows::Globalization::DayOfWeek)value));
}

- (BOOL)isOutOfScopeEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsOutOfScopeEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsOutOfScopeEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsOutOfScopeEnabled((boolean)value));
}

- (BOOL)isTodayHighlighted {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTodayHighlighted(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTodayHighlighted:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTodayHighlighted((boolean)value));
}

- (WFDateTime*)maxDate {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxDate(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (void)setMaxDate:(WFDateTime*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxDate(*[value internalStruct]));
}

- (WFDateTime*)minDate {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_MinDate(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (void)setMinDate:(WFDateTime*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_MinDate(*[value internalStruct]));
}

- (int)numberOfWeeksInView {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_NumberOfWeeksInView(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setNumberOfWeeksInView:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_NumberOfWeeksInView(value));
}

- (NSMutableArray* /* WFDateTime* */)selectedDates {
    ComPtr<IVector<ABI::Windows::Foundation::DateTime>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedDates(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WFDateTime_create(unmarshalledReturn.Get());
}

- (WXCCalendarViewSelectionMode)selectionMode {
    ABI::Windows::UI::Xaml::Controls::CalendarViewSelectionMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionMode(&unmarshalledReturn));
    return (WXCCalendarViewSelectionMode)unmarshalledReturn;
}

- (void)setSelectionMode:(WXCCalendarViewSelectionMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectionMode((ABI::Windows::UI::Xaml::Controls::CalendarViewSelectionMode)value));
}

- (WUXCPCalendarViewTemplateSettings*)templateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPCalendarViewTemplateSettings>(unmarshalledReturn.Get());
}

- (WUXMBrush*)focusBorderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_FocusBorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setFocusBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_FocusBorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)selectedHoverBorderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedHoverBorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setSelectedHoverBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedHoverBorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)selectedPressedBorderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedPressedBorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setSelectedPressedBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedPressedBorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)selectedBorderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedBorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setSelectedBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedBorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)hoverBorderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_HoverBorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setHoverBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_HoverBorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)pressedBorderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_PressedBorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setPressedBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_PressedBorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)calendarItemBorderBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_CalendarItemBorderBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setCalendarItemBorderBrush:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_CalendarItemBorderBrush(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)outOfScopeBackground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_OutOfScopeBackground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setOutOfScopeBackground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_OutOfScopeBackground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)calendarItemBackground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_CalendarItemBackground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setCalendarItemBackground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_CalendarItemBackground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)pressedForeground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_PressedForeground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setPressedForeground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_PressedForeground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)todayForeground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_TodayForeground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setTodayForeground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_TodayForeground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)blackoutForeground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_BlackoutForeground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setBlackoutForeground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_BlackoutForeground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)selectedForeground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedForeground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setSelectedForeground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedForeground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)outOfScopeForeground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_OutOfScopeForeground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setOutOfScopeForeground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_OutOfScopeForeground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMBrush*)calendarItemForeground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_CalendarItemForeground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setCalendarItemForeground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_CalendarItemForeground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (WUXMFontFamily*)dayItemFontFamily {
    ComPtr<ABI::Windows::UI::Xaml::Media::IFontFamily> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_DayItemFontFamily(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMFontFamily>(unmarshalledReturn.Get());
}

- (void)setDayItemFontFamily:(WUXMFontFamily*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_DayItemFontFamily(_getRtInterface<ABI::Windows::UI::Xaml::Media::IFontFamily>(value).Get()));
}

- (double)dayItemFontSize {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_DayItemFontSize(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setDayItemFontSize:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_DayItemFontSize(value));
}

- (WUTFontStyle)dayItemFontStyle {
    ABI::Windows::UI::Text::FontStyle unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_DayItemFontStyle(&unmarshalledReturn));
    return (WUTFontStyle)unmarshalledReturn;
}

- (void)setDayItemFontStyle:(WUTFontStyle)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_DayItemFontStyle((ABI::Windows::UI::Text::FontStyle)value));
}

- (WUTFontWeight*)dayItemFontWeight {
    ABI::Windows::UI::Text::FontWeight unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_DayItemFontWeight(&unmarshalledReturn));
    return WUTFontWeight_create(unmarshalledReturn);
}

- (void)setDayItemFontWeight:(WUTFontWeight*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_DayItemFontWeight(*[value internalStruct]));
}

- (WUTFontWeight*)todayFontWeight {
    ABI::Windows::UI::Text::FontWeight unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_TodayFontWeight(&unmarshalledReturn));
    return WUTFontWeight_create(unmarshalledReturn);
}

- (void)setTodayFontWeight:(WUTFontWeight*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_TodayFontWeight(*[value internalStruct]));
}

- (WUXMFontFamily*)firstOfMonthLabelFontFamily {
    ComPtr<ABI::Windows::UI::Xaml::Media::IFontFamily> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstOfMonthLabelFontFamily(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMFontFamily>(unmarshalledReturn.Get());
}

- (void)setFirstOfMonthLabelFontFamily:(WUXMFontFamily*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_FirstOfMonthLabelFontFamily(_getRtInterface<ABI::Windows::UI::Xaml::Media::IFontFamily>(value).Get()));
}

- (double)firstOfMonthLabelFontSize {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstOfMonthLabelFontSize(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setFirstOfMonthLabelFontSize:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_FirstOfMonthLabelFontSize(value));
}

- (WUTFontStyle)firstOfMonthLabelFontStyle {
    ABI::Windows::UI::Text::FontStyle unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstOfMonthLabelFontStyle(&unmarshalledReturn));
    return (WUTFontStyle)unmarshalledReturn;
}

- (void)setFirstOfMonthLabelFontStyle:(WUTFontStyle)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_FirstOfMonthLabelFontStyle((ABI::Windows::UI::Text::FontStyle)value));
}

- (WUTFontWeight*)firstOfMonthLabelFontWeight {
    ABI::Windows::UI::Text::FontWeight unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstOfMonthLabelFontWeight(&unmarshalledReturn));
    return WUTFontWeight_create(unmarshalledReturn);
}

- (void)setFirstOfMonthLabelFontWeight:(WUTFontWeight*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_FirstOfMonthLabelFontWeight(*[value internalStruct]));
}

- (WUXMFontFamily*)monthYearItemFontFamily {
    ComPtr<ABI::Windows::UI::Xaml::Media::IFontFamily> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_MonthYearItemFontFamily(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMFontFamily>(unmarshalledReturn.Get());
}

- (void)setMonthYearItemFontFamily:(WUXMFontFamily*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_MonthYearItemFontFamily(_getRtInterface<ABI::Windows::UI::Xaml::Media::IFontFamily>(value).Get()));
}

- (double)monthYearItemFontSize {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_MonthYearItemFontSize(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMonthYearItemFontSize:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_MonthYearItemFontSize(value));
}

- (WUTFontStyle)monthYearItemFontStyle {
    ABI::Windows::UI::Text::FontStyle unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_MonthYearItemFontStyle(&unmarshalledReturn));
    return (WUTFontStyle)unmarshalledReturn;
}

- (void)setMonthYearItemFontStyle:(WUTFontStyle)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_MonthYearItemFontStyle((ABI::Windows::UI::Text::FontStyle)value));
}

- (WUTFontWeight*)monthYearItemFontWeight {
    ABI::Windows::UI::Text::FontWeight unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_MonthYearItemFontWeight(&unmarshalledReturn));
    return WUTFontWeight_create(unmarshalledReturn);
}

- (void)setMonthYearItemFontWeight:(WUTFontWeight*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_MonthYearItemFontWeight(*[value internalStruct]));
}

- (WUXMFontFamily*)firstOfYearDecadeLabelFontFamily {
    ComPtr<ABI::Windows::UI::Xaml::Media::IFontFamily> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstOfYearDecadeLabelFontFamily(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMFontFamily>(unmarshalledReturn.Get());
}

- (void)setFirstOfYearDecadeLabelFontFamily:(WUXMFontFamily*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_FirstOfYearDecadeLabelFontFamily(_getRtInterface<ABI::Windows::UI::Xaml::Media::IFontFamily>(value).Get()));
}

- (double)firstOfYearDecadeLabelFontSize {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstOfYearDecadeLabelFontSize(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setFirstOfYearDecadeLabelFontSize:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_FirstOfYearDecadeLabelFontSize(value));
}

- (WUTFontStyle)firstOfYearDecadeLabelFontStyle {
    ABI::Windows::UI::Text::FontStyle unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstOfYearDecadeLabelFontStyle(&unmarshalledReturn));
    return (WUTFontStyle)unmarshalledReturn;
}

- (void)setFirstOfYearDecadeLabelFontStyle:(WUTFontStyle)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_FirstOfYearDecadeLabelFontStyle((ABI::Windows::UI::Text::FontStyle)value));
}

- (WUTFontWeight*)firstOfYearDecadeLabelFontWeight {
    ABI::Windows::UI::Text::FontWeight unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstOfYearDecadeLabelFontWeight(&unmarshalledReturn));
    return WUTFontWeight_create(unmarshalledReturn);
}

- (void)setFirstOfYearDecadeLabelFontWeight:(WUTFontWeight*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_FirstOfYearDecadeLabelFontWeight(*[value internalStruct]));
}

- (WXHorizontalAlignment)horizontalDayItemAlignment {
    ABI::Windows::UI::Xaml::HorizontalAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalDayItemAlignment(&unmarshalledReturn));
    return (WXHorizontalAlignment)unmarshalledReturn;
}

- (void)setHorizontalDayItemAlignment:(WXHorizontalAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_HorizontalDayItemAlignment((ABI::Windows::UI::Xaml::HorizontalAlignment)value));
}

- (WXVerticalAlignment)verticalDayItemAlignment {
    ABI::Windows::UI::Xaml::VerticalAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalDayItemAlignment(&unmarshalledReturn));
    return (WXVerticalAlignment)unmarshalledReturn;
}

- (void)setVerticalDayItemAlignment:(WXVerticalAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_VerticalDayItemAlignment((ABI::Windows::UI::Xaml::VerticalAlignment)value));
}

- (WXHorizontalAlignment)horizontalFirstOfMonthLabelAlignment {
    ABI::Windows::UI::Xaml::HorizontalAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalFirstOfMonthLabelAlignment(&unmarshalledReturn));
    return (WXHorizontalAlignment)unmarshalledReturn;
}

- (void)setHorizontalFirstOfMonthLabelAlignment:(WXHorizontalAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_HorizontalFirstOfMonthLabelAlignment((ABI::Windows::UI::Xaml::HorizontalAlignment)value));
}

- (WXVerticalAlignment)verticalFirstOfMonthLabelAlignment {
    ABI::Windows::UI::Xaml::VerticalAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalFirstOfMonthLabelAlignment(&unmarshalledReturn));
    return (WXVerticalAlignment)unmarshalledReturn;
}

- (void)setVerticalFirstOfMonthLabelAlignment:(WXVerticalAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_VerticalFirstOfMonthLabelAlignment((ABI::Windows::UI::Xaml::VerticalAlignment)value));
}

- (WXThickness*)calendarItemBorderThickness {
    ABI::Windows::UI::Xaml::Thickness unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_CalendarItemBorderThickness(&unmarshalledReturn));
    return WXThickness_create(unmarshalledReturn);
}

- (void)setCalendarItemBorderThickness:(WXThickness*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_CalendarItemBorderThickness(*[value internalStruct]));
}

- (WXStyle*)calendarViewDayItemStyle {
    ComPtr<ABI::Windows::UI::Xaml::IStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->get_CalendarViewDayItemStyle(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXStyle>(unmarshalledReturn.Get());
}

- (void)setCalendarViewDayItemStyle:(WXStyle*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->put_CalendarViewDayItemStyle(_getRtInterface<ABI::Windows::UI::Xaml::IStyle>(value).Get()));
}

- (EventRegistrationToken)addCalendarViewDayItemChangingEvent:(void (^)(WXCCalendarView*, WXCCalendarViewDayItemChangingEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->add_CalendarViewDayItemChanging(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_CalendarView_Windows_UI_Xaml_Controls_CalendarViewDayItemChangingEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeCalendarViewDayItemChangingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->remove_CalendarViewDayItemChanging(token));
}

- (EventRegistrationToken)addSelectedDatesChangedEvent:(void (^)(WXCCalendarView*, WXCCalendarViewSelectedDatesChangedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->add_SelectedDatesChanged(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_CalendarView_Windows_UI_Xaml_Controls_CalendarViewSelectedDatesChangedEventArgs>(
            value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeSelectedDatesChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->remove_SelectedDatesChanged(token));
}

- (void)setDisplayDate:(WFDateTime*)date {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->SetDisplayDate(*[date internalStruct]));
}

- (void)setYearDecadeDisplayDimensions:(int)columns rows:(int)rows {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarView>(self);
    THROW_NS_IF_FAILED(_comInst->SetYearDecadeDisplayDimensions(columns, rows));
}

@end

@implementation WXCCalendarViewDayItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CalendarViewDayItem").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItem> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCCalendarViewDayItem* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics> WXCICalendarViewDayItemStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CalendarViewDayItem").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)isBlackoutProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewDayItemStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsBlackoutProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarViewDayItemStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)isBlackout {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsBlackout(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsBlackout:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItem>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsBlackout((boolean)value));
}

- (WFDateTime*)date {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_Date(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (void)setDensityColors:(id<NSFastEnumeration> /* WUColor* */)colors {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarViewDayItem>(self);
    THROW_NS_IF_FAILED(_comInst->SetDensityColors(
        static_cast<IIterable<typename ABI::Windows::Foundation::Internal::GetLogicalType<ABI::Windows::UI::Color>::type>*>(
            ConvertToIterable<WUColor, ABI::Windows::UI::Color>(colors).Get())));
}

@end

@implementation WXCHubSection

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHubSection> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHubSectionFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.HubSection").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHubSection> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCHubSection* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IHubSectionStatics> WXCIHubSectionStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHubSectionStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.HubSection").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIHubSectionStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIHubSectionStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)contentTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIHubSectionStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isHeaderInteractiveProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIHubSectionStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsHeaderInteractiveProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHubSection>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHubSection>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHubSection>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHubSection>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WXDataTemplate*)contentTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHubSection>(self);
    THROW_NS_IF_FAILED(_comInst->get_ContentTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setContentTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHubSection>(self);
    THROW_NS_IF_FAILED(_comInst->put_ContentTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (BOOL)isHeaderInteractive {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHubSection>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsHeaderInteractive(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsHeaderInteractive:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHubSection>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsHeaderInteractive((boolean)value));
}

@end

@implementation WXCMenuFlyoutItemBase

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItemBase> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCAppBarSeparator

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarSeparator> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarSeparatorFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBarSeparator").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarSeparator> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCAppBarSeparator* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3> WXCIAppBarSeparatorStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBarSeparator").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isInOverflowProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarSeparatorStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsInOverflowProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dynamicOverflowOrderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarSeparatorStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_DynamicOverflowOrderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics> WXCIAppBarSeparatorStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBarSeparator").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isCompactProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarSeparatorStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsCompactProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)isCompact {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsCompact(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsCompact:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsCompact((boolean)value));
}

- (BOOL)isInOverflow {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsInOverflow(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (int)dynamicOverflowOrder {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2>(self);
    THROW_NS_IF_FAILED(_comInst->get_DynamicOverflowOrder(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setDynamicOverflowOrder:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2>(self);
    THROW_NS_IF_FAILED(_comInst->put_DynamicOverflowOrder(value));
}

@end

@implementation WXCCalendarDatePicker

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarDatePickerFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CalendarDatePicker").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCCalendarDatePicker* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2> WXCICalendarDatePickerStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CalendarDatePicker").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)lightDismissOverlayModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics> WXCICalendarDatePickerStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICalendarDatePickerStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CalendarDatePicker").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)dateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isCalendarOpenProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsCalendarOpenProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dateFormatProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DateFormatProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)placeholderTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)calendarViewStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CalendarViewStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)minDateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MinDateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxDateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxDateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isTodayHighlightedProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsTodayHighlightedProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)displayModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DisplayModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)firstDayOfWeekProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FirstDayOfWeekProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dayOfWeekFormatProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DayOfWeekFormatProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)calendarIdentifierProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CalendarIdentifierProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isOutOfScopeEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsOutOfScopeEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isGroupLabelVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICalendarDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsGroupLabelVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (id /* WFDateTime* */)date {
    ComPtr<IReference<ABI::Windows::Foundation::DateTime>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_Date(unmarshalledReturn.GetAddressOf()));
    return MakeFromNullable<WFDateTime, ABI::Windows::Foundation::DateTime>::convert(unmarshalledReturn.Get());
}

- (void)setDate:(id /* WFDateTime* */)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_Date(BuildNullable<ABI::Windows::Foundation::DateTime>(value)));
}

- (BOOL)isCalendarOpen {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsCalendarOpen(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsCalendarOpen:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsCalendarOpen((boolean)value));
}

- (NSString*)dateFormat {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_DateFormat(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setDateFormat:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_DateFormat(nsStrToHstr(value).Get()));
}

- (NSString*)placeholderText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setPlaceholderText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_PlaceholderText(nsStrToHstr(value).Get()));
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WXStyle*)calendarViewStyle {
    ComPtr<ABI::Windows::UI::Xaml::IStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_CalendarViewStyle(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXStyle>(unmarshalledReturn.Get());
}

- (void)setCalendarViewStyle:(WXStyle*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_CalendarViewStyle(_getRtInterface<ABI::Windows::UI::Xaml::IStyle>(value).Get()));
}

- (WFDateTime*)minDate {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_MinDate(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (void)setMinDate:(WFDateTime*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_MinDate(*[value internalStruct]));
}

- (WFDateTime*)maxDate {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxDate(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (void)setMaxDate:(WFDateTime*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxDate(*[value internalStruct]));
}

- (BOOL)isTodayHighlighted {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsTodayHighlighted(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsTodayHighlighted:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsTodayHighlighted((boolean)value));
}

- (WXCCalendarViewDisplayMode)displayMode {
    ABI::Windows::UI::Xaml::Controls::CalendarViewDisplayMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_DisplayMode(&unmarshalledReturn));
    return (WXCCalendarViewDisplayMode)unmarshalledReturn;
}

- (void)setDisplayMode:(WXCCalendarViewDisplayMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_DisplayMode((ABI::Windows::UI::Xaml::Controls::CalendarViewDisplayMode)value));
}

- (WGDayOfWeek)firstDayOfWeek {
    ABI::Windows::Globalization::DayOfWeek unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_FirstDayOfWeek(&unmarshalledReturn));
    return (WGDayOfWeek)unmarshalledReturn;
}

- (void)setFirstDayOfWeek:(WGDayOfWeek)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_FirstDayOfWeek((ABI::Windows::Globalization::DayOfWeek)value));
}

- (NSString*)dayOfWeekFormat {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_DayOfWeekFormat(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setDayOfWeekFormat:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_DayOfWeekFormat(nsStrToHstr(value).Get()));
}

- (NSString*)calendarIdentifier {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_CalendarIdentifier(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setCalendarIdentifier:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_CalendarIdentifier(nsStrToHstr(value).Get()));
}

- (BOOL)isOutOfScopeEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsOutOfScopeEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsOutOfScopeEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsOutOfScopeEnabled((boolean)value));
}

- (BOOL)isGroupLabelVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsGroupLabelVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsGroupLabelVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsGroupLabelVisible((boolean)value));
}

- (EventRegistrationToken)addCalendarViewDayItemChangingEvent:(WXCCalendarViewDayItemChangingEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_CalendarViewDayItemChanging(Make<WXCCalendarViewDayItemChangingEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeCalendarViewDayItemChangingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->remove_CalendarViewDayItemChanging(token));
}

- (EventRegistrationToken)addDateChangedEvent:(void (^)(WXCCalendarDatePicker*, WXCCalendarDatePickerDateChangedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->add_DateChanged(
        Make<
            ITypedEventHandler_Windows_UI_Xaml_Controls_CalendarDatePicker_Windows_UI_Xaml_Controls_CalendarDatePickerDateChangedEventArgs>(
            value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeDateChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->remove_DateChanged(token));
}

- (EventRegistrationToken)addOpenedEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->add_Opened(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeOpenedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Opened(token));
}

- (EventRegistrationToken)addClosedEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->add_Closed(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeClosedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Closed(token));
}

- (void)setDisplayDate:(WFDateTime*)date {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->SetDisplayDate(*[date internalStruct]));
}

- (void)setYearDecadeDisplayDimensions:(int)columns rows:(int)rows {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->SetYearDecadeDisplayDimensions(columns, rows));
}

- (WXCLightDismissOverlayMode)lightDismissOverlayMode {
    ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker2>(self);
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayMode(&unmarshalledReturn));
    return (WXCLightDismissOverlayMode)unmarshalledReturn;
}

- (void)setLightDismissOverlayMode:(WXCLightDismissOverlayMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker2>(self);
    THROW_NS_IF_FAILED(_comInst->put_LightDismissOverlayMode((ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode)value));
}

@end

@implementation WXCDatePicker

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePicker> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.DatePicker").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePicker> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCDatePicker* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerStatics2> WXCIDatePickerStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.DatePicker").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)lightDismissOverlayModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerStatics> WXCIDatePickerStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.DatePicker").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)calendarIdentifierProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CalendarIdentifierProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dayVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DayVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)monthVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MonthVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)yearVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_YearVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dayFormatProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DayFormatProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)monthFormatProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MonthFormatProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)yearFormatProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_YearFormatProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)minYearProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MinYearProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxYearProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxYearProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)orientationProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OrientationProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (NSString*)calendarIdentifier {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_CalendarIdentifier(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setCalendarIdentifier:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_CalendarIdentifier(nsStrToHstr(value).Get()));
}

- (WFDateTime*)date {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_Date(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (void)setDate:(WFDateTime*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_Date(*[value internalStruct]));
}

- (BOOL)dayVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_DayVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setDayVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_DayVisible((boolean)value));
}

- (BOOL)monthVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_MonthVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setMonthVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_MonthVisible((boolean)value));
}

- (BOOL)yearVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_YearVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setYearVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_YearVisible((boolean)value));
}

- (NSString*)dayFormat {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_DayFormat(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setDayFormat:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_DayFormat(nsStrToHstr(value).Get()));
}

- (NSString*)monthFormat {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_MonthFormat(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setMonthFormat:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_MonthFormat(nsStrToHstr(value).Get()));
}

- (NSString*)yearFormat {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_YearFormat(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setYearFormat:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_YearFormat(nsStrToHstr(value).Get()));
}

- (WFDateTime*)minYear {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_MinYear(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (void)setMinYear:(WFDateTime*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_MinYear(*[value internalStruct]));
}

- (WFDateTime*)maxYear {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxYear(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (void)setMaxYear:(WFDateTime*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxYear(*[value internalStruct]));
}

- (WXCOrientation)orientation {
    ABI::Windows::UI::Xaml::Controls::Orientation unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_Orientation(&unmarshalledReturn));
    return (WXCOrientation)unmarshalledReturn;
}

- (void)setOrientation:(WXCOrientation)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_Orientation((ABI::Windows::UI::Xaml::Controls::Orientation)value));
}

- (EventRegistrationToken)addDateChangedEvent:(void (^)(RTObject*, WXCDatePickerValueChangedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->add_DateChanged(Make<EventHandler_Windows_UI_Xaml_Controls_DatePickerValueChangedEventArgs>(value).Get(),
                                                 &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeDateChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker>(self);
    THROW_NS_IF_FAILED(_comInst->remove_DateChanged(token));
}

- (WXCLightDismissOverlayMode)lightDismissOverlayMode {
    ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker2>(self);
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayMode(&unmarshalledReturn));
    return (WXCLightDismissOverlayMode)unmarshalledReturn;
}

- (void)setLightDismissOverlayMode:(WXCLightDismissOverlayMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePicker2>(self);
    THROW_NS_IF_FAILED(_comInst->put_LightDismissOverlayMode((ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode)value));
}

@end

@implementation WXCHub

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHub> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHubFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Hub").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHub> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCHub* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IHubStatics> WXCIHubStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IHubStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Hub").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIHubStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIHubStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)orientationProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIHubStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OrientationProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)defaultSectionIndexProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIHubStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DefaultSectionIndexProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)semanticZoomOwnerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIHubStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SemanticZoomOwnerProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isActiveViewProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIHubStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsActiveViewProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isZoomedInViewProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIHubStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsZoomedInViewProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WXCOrientation)orientation {
    ABI::Windows::UI::Xaml::Controls::Orientation unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->get_Orientation(&unmarshalledReturn));
    return (WXCOrientation)unmarshalledReturn;
}

- (void)setOrientation:(WXCOrientation)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->put_Orientation((ABI::Windows::UI::Xaml::Controls::Orientation)value));
}

- (int)defaultSectionIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->get_DefaultSectionIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setDefaultSectionIndex:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->put_DefaultSectionIndex(value));
}

- (NSMutableArray* /* WXCHubSection* */)sections {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Controls::HubSection*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->get_Sections(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WXCHubSection_create(unmarshalledReturn.Get());
}

- (NSMutableArray* /* WXCHubSection* */)sectionsInView {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Controls::HubSection*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->get_SectionsInView(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WXCHubSection_create(unmarshalledReturn.Get());
}

- (NSMutableArray<RTObservableCollection>* /* RTObject* */)sectionHeaders {
    ComPtr<IObservableVector<IInspectable*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->get_SectionHeaders(unmarshalledReturn.GetAddressOf()));
    return RTProxiedObservableNSMutableArray_RTObject_create(unmarshalledReturn.Get());
}

- (EventRegistrationToken)addSectionHeaderClickEvent:(WXCHubSectionHeaderClickEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->add_SectionHeaderClick(Make<WXCHubSectionHeaderClickEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeSectionHeaderClickEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->remove_SectionHeaderClick(token));
}

- (EventRegistrationToken)addSectionsInViewChangedEvent:(WXCSectionsInViewChangedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_SectionsInViewChanged(Make<WXCSectionsInViewChangedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeSectionsInViewChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->remove_SectionsInViewChanged(token));
}

- (void)scrollToSection:(WXCHubSection*)section {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IHub>(self);
    THROW_NS_IF_FAILED(_comInst->ScrollToSection(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IHubSection>(section).Get()));
}

- (WXCSemanticZoom*)semanticZoomOwner {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISemanticZoom> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->get_SemanticZoomOwner(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCSemanticZoom>(unmarshalledReturn.Get());
}

- (void)setSemanticZoomOwner:(WXCSemanticZoom*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->put_SemanticZoomOwner(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoom>(value).Get()));
}

- (BOOL)isActiveView {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsActiveView(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsActiveView:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsActiveView((boolean)value));
}

- (BOOL)isZoomedInView {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsZoomedInView(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsZoomedInView:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsZoomedInView((boolean)value));
}

- (void)initializeViewChange {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->InitializeViewChange());
}

- (void)completeViewChange {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->CompleteViewChange());
}

- (void)makeVisible:(WXCSemanticZoomLocation*)item {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(_comInst->MakeVisible(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(item).Get()));
}

- (void)startViewChangeFrom:(WXCSemanticZoomLocation*)source destination:(WXCSemanticZoomLocation*)destination {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(
        _comInst->StartViewChangeFrom(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(source).Get(),
                                      _getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(destination).Get()));
}

- (void)startViewChangeTo:(WXCSemanticZoomLocation*)source destination:(WXCSemanticZoomLocation*)destination {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(
        _comInst->StartViewChangeTo(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(source).Get(),
                                    _getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(destination).Get()));
}

- (void)completeViewChangeFrom:(WXCSemanticZoomLocation*)source destination:(WXCSemanticZoomLocation*)destination {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(
        _comInst->CompleteViewChangeFrom(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(source).Get(),
                                         _getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(destination).Get()));
}

- (void)completeViewChangeTo:(WXCSemanticZoomLocation*)source destination:(WXCSemanticZoomLocation*)destination {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation>(self);
    THROW_NS_IF_FAILED(
        _comInst->CompleteViewChangeTo(_getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(source).Get(),
                                       _getRtInterface<ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation>(destination).Get()));
}

@end

@implementation WXCMediaPlayerElement

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElementFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MediaPlayerElement").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCMediaPlayerElement* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElementStatics> WXCIMediaPlayerElementStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElementStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MediaPlayerElement").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)sourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaPlayerElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)areTransportControlsEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaPlayerElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AreTransportControlsEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)posterSourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaPlayerElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PosterSourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)stretchProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaPlayerElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_StretchProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)autoPlayProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaPlayerElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AutoPlayProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isFullWindowProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaPlayerElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsFullWindowProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)mediaPlayerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMediaPlayerElementStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MediaPlayerProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject<WMPIMediaPlaybackSource>*)source {
    ComPtr<ABI::Windows::Media::Playback::IMediaPlaybackSource> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_Source(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WMPIMediaPlaybackSource>(unmarshalledReturn.Get());
}

- (void)setSource:(RTObject<WMPIMediaPlaybackSource>*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_Source(_getRtInterface<ABI::Windows::Media::Playback::IMediaPlaybackSource>(value).Get()));
}

- (WXCMediaTransportControls*)transportControls {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_TransportControls(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCMediaTransportControls>(unmarshalledReturn.Get());
}

- (void)setTransportControls:(WXCMediaTransportControls*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_TransportControls(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IMediaTransportControls>(value).Get()));
}

- (BOOL)areTransportControlsEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_AreTransportControlsEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setAreTransportControlsEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_AreTransportControlsEnabled((boolean)value));
}

- (WUXMImageSource*)posterSource {
    ComPtr<ABI::Windows::UI::Xaml::Media::IImageSource> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_PosterSource(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMImageSource>(unmarshalledReturn.Get());
}

- (void)setPosterSource:(WUXMImageSource*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_PosterSource(_getRtInterface<ABI::Windows::UI::Xaml::Media::IImageSource>(value).Get()));
}

- (WUXMStretch)stretch {
    ABI::Windows::UI::Xaml::Media::Stretch unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_Stretch(&unmarshalledReturn));
    return (WUXMStretch)unmarshalledReturn;
}

- (void)setStretch:(WUXMStretch)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_Stretch((ABI::Windows::UI::Xaml::Media::Stretch)value));
}

- (BOOL)autoPlay {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_AutoPlay(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setAutoPlay:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_AutoPlay((boolean)value));
}

- (BOOL)isFullWindow {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsFullWindow(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsFullWindow:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsFullWindow((boolean)value));
}

- (WMPMediaPlayer*)mediaPlayer {
    ComPtr<ABI::Windows::Media::Playback::IMediaPlayer> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_MediaPlayer(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WMPMediaPlayer>(unmarshalledReturn.Get());
}

- (void)setMediaPlayer:(WMPMediaPlayer*)mediaPlayer {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMediaPlayerElement>(self);
    THROW_NS_IF_FAILED(_comInst->SetMediaPlayer(_getRtInterface<ABI::Windows::Media::Playback::IMediaPlayer>(mediaPlayer).Get()));
}

@end

@implementation WXCSearchBox

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISearchBox> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISearchBoxFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SearchBox").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISearchBox> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCSearchBox* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ISearchBoxStatics> WXCISearchBoxStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISearchBoxStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SearchBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)searchHistoryEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISearchBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SearchHistoryEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)searchHistoryContextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISearchBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SearchHistoryContextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)placeholderTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISearchBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)queryTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISearchBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_QueryTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)focusOnKeyboardInputProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISearchBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FocusOnKeyboardInputProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)chooseSuggestionOnEnterProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISearchBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ChooseSuggestionOnEnterProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)searchHistoryEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_SearchHistoryEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setSearchHistoryEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_SearchHistoryEnabled((boolean)value));
}

- (NSString*)searchHistoryContext {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_SearchHistoryContext(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setSearchHistoryContext:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_SearchHistoryContext(nsStrToHstr(value).Get()));
}

- (NSString*)placeholderText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setPlaceholderText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_PlaceholderText(nsStrToHstr(value).Get()));
}

- (NSString*)queryText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_QueryText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setQueryText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_QueryText(nsStrToHstr(value).Get()));
}

- (BOOL)focusOnKeyboardInput {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_FocusOnKeyboardInput(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setFocusOnKeyboardInput:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_FocusOnKeyboardInput((boolean)value));
}

- (BOOL)chooseSuggestionOnEnter {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_ChooseSuggestionOnEnter(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setChooseSuggestionOnEnter:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_ChooseSuggestionOnEnter((boolean)value));
}

- (EventRegistrationToken)addQueryChangedEvent:(void (^)(WXCSearchBox*, WXCSearchBoxQueryChangedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_QueryChanged(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_SearchBox_Windows_UI_Xaml_Controls_SearchBoxQueryChangedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeQueryChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_QueryChanged(token));
}

- (EventRegistrationToken)addSuggestionsRequestedEvent:(void (^)(WXCSearchBox*, WXCSearchBoxSuggestionsRequestedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_SuggestionsRequested(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_SearchBox_Windows_UI_Xaml_Controls_SearchBoxSuggestionsRequestedEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeSuggestionsRequestedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_SuggestionsRequested(token));
}

- (EventRegistrationToken)addQuerySubmittedEvent:(void (^)(WXCSearchBox*, WXCSearchBoxQuerySubmittedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_QuerySubmitted(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_SearchBox_Windows_UI_Xaml_Controls_SearchBoxQuerySubmittedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeQuerySubmittedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_QuerySubmitted(token));
}

- (EventRegistrationToken)addResultSuggestionChosenEvent:(void (^)(WXCSearchBox*, WXCSearchBoxResultSuggestionChosenEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_ResultSuggestionChosen(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_SearchBox_Windows_UI_Xaml_Controls_SearchBoxResultSuggestionChosenEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeResultSuggestionChosenEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ResultSuggestionChosen(token));
}

- (EventRegistrationToken)addPrepareForFocusOnKeyboardInputEvent:(void (^)(WXCSearchBox*, WXRoutedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_PrepareForFocusOnKeyboardInput(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_SearchBox_Windows_UI_Xaml_RoutedEventArgs>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePrepareForFocusOnKeyboardInputEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_PrepareForFocusOnKeyboardInput(token));
}

- (void)setLocalContentSuggestionSettings:(WASLocalContentSuggestionSettings*)settings {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISearchBox>(self);
    THROW_NS_IF_FAILED(_comInst->SetLocalContentSuggestionSettings(
        _getRtInterface<ABI::Windows::ApplicationModel::Search::ILocalContentSuggestionSettings>(settings).Get()));
}

@end

@implementation WXCSplitView

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISplitView> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISplitViewFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SplitView").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISplitView> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCSplitView* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ISplitViewStatics> WXCISplitViewStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISplitViewStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SplitView").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)contentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISplitViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)paneProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISplitViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaneProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isPaneOpenProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISplitViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsPaneOpenProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)openPaneLengthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISplitViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_OpenPaneLengthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)compactPaneLengthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISplitViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CompactPaneLengthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)panePlacementProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISplitViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PanePlacementProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)displayModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISplitViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DisplayModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)templateSettingsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISplitViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettingsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)paneBackgroundProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISplitViewStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaneBackgroundProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ISplitViewStatics2> WXCISplitViewStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ISplitViewStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.SplitView").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)lightDismissOverlayModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCISplitViewStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXUIElement*)content {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->get_Content(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setContent:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->put_Content(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

- (WXUIElement*)pane {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->get_Pane(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setPane:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->put_Pane(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

- (BOOL)isPaneOpen {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsPaneOpen(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsPaneOpen:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsPaneOpen((boolean)value));
}

- (double)openPaneLength {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->get_OpenPaneLength(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setOpenPaneLength:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->put_OpenPaneLength(value));
}

- (double)compactPaneLength {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->get_CompactPaneLength(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setCompactPaneLength:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->put_CompactPaneLength(value));
}

- (WXCSplitViewPanePlacement)panePlacement {
    ABI::Windows::UI::Xaml::Controls::SplitViewPanePlacement unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->get_PanePlacement(&unmarshalledReturn));
    return (WXCSplitViewPanePlacement)unmarshalledReturn;
}

- (void)setPanePlacement:(WXCSplitViewPanePlacement)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->put_PanePlacement((ABI::Windows::UI::Xaml::Controls::SplitViewPanePlacement)value));
}

- (WXCSplitViewDisplayMode)displayMode {
    ABI::Windows::UI::Xaml::Controls::SplitViewDisplayMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->get_DisplayMode(&unmarshalledReturn));
    return (WXCSplitViewDisplayMode)unmarshalledReturn;
}

- (void)setDisplayMode:(WXCSplitViewDisplayMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->put_DisplayMode((ABI::Windows::UI::Xaml::Controls::SplitViewDisplayMode)value));
}

- (WUXCPSplitViewTemplateSettings*)templateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::ISplitViewTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPSplitViewTemplateSettings>(unmarshalledReturn.Get());
}

- (WUXMBrush*)paneBackground {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->get_PaneBackground(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (void)setPaneBackground:(WUXMBrush*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->put_PaneBackground(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(value).Get()));
}

- (EventRegistrationToken)addPaneClosingEvent:(void (^)(WXCSplitView*, WXCSplitViewPaneClosingEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->add_PaneClosing(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_SplitView_Windows_UI_Xaml_Controls_SplitViewPaneClosingEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePaneClosingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->remove_PaneClosing(token));
}

- (EventRegistrationToken)addPaneClosedEvent:(void (^)(WXCSplitView*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->add_PaneClosed(Make<ITypedEventHandler_Windows_UI_Xaml_Controls_SplitView_System_Object>(value).Get(),
                                                &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePaneClosedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView>(self);
    THROW_NS_IF_FAILED(_comInst->remove_PaneClosed(token));
}

- (WXCLightDismissOverlayMode)lightDismissOverlayMode {
    ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView2>(self);
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayMode(&unmarshalledReturn));
    return (WXCLightDismissOverlayMode)unmarshalledReturn;
}

- (void)setLightDismissOverlayMode:(WXCLightDismissOverlayMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ISplitView2>(self);
    THROW_NS_IF_FAILED(_comInst->put_LightDismissOverlayMode((ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode)value));
}

@end

@implementation WXCTimePicker

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePicker> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePickerFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.TimePicker").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePicker> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCTimePicker* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePickerStatics2> WXCITimePickerStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePickerStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.TimePicker").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)lightDismissOverlayModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITimePickerStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePickerStatics> WXCITimePickerStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePickerStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.TimePicker").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITimePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITimePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)clockIdentifierProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITimePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ClockIdentifierProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)minuteIncrementProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITimePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MinuteIncrementProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)timeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITimePickerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TimeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (NSString*)clockIdentifier {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_ClockIdentifier(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setClockIdentifier:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_ClockIdentifier(nsStrToHstr(value).Get()));
}

- (int)minuteIncrement {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_MinuteIncrement(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMinuteIncrement:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_MinuteIncrement(value));
}

- (WFTimeSpan*)time {
    ABI::Windows::Foundation::TimeSpan unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker>(self);
    THROW_NS_IF_FAILED(_comInst->get_Time(&unmarshalledReturn));
    return WFTimeSpan_create(unmarshalledReturn);
}

- (void)setTime:(WFTimeSpan*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker>(self);
    THROW_NS_IF_FAILED(_comInst->put_Time(*[value internalStruct]));
}

- (EventRegistrationToken)addTimeChangedEvent:(void (^)(RTObject*, WXCTimePickerValueChangedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker>(self);
    THROW_NS_IF_FAILED(_comInst->add_TimeChanged(Make<EventHandler_Windows_UI_Xaml_Controls_TimePickerValueChangedEventArgs>(value).Get(),
                                                 &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTimeChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TimeChanged(token));
}

- (WXCLightDismissOverlayMode)lightDismissOverlayMode {
    ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker2>(self);
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayMode(&unmarshalledReturn));
    return (WXCLightDismissOverlayMode)unmarshalledReturn;
}

- (void)setLightDismissOverlayMode:(WXCLightDismissOverlayMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePicker2>(self);
    THROW_NS_IF_FAILED(_comInst->put_LightDismissOverlayMode((ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode)value));
}

@end

@implementation WXCAppBar

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBar> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBar").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBar> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIAppBarOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIAppBarOverrides)]) {
        typedOuter = Make<WXCIAppBarOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCAppBar* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarStatics2> WXCIAppBarStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBar").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)closedDisplayModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_ClosedDisplayModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarStatics4> WXCIAppBarStatics4_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarStatics4> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBar").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)lightDismissOverlayModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarStatics4_inst();
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarStatics> WXCIAppBarStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBar").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)isOpenProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsOpenProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isStickyProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsStickyProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)isOpen {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsOpen(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsOpen:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsOpen((boolean)value));
}

- (BOOL)isSticky {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSticky(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSticky:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSticky((boolean)value));
}

- (EventRegistrationToken)addOpenedEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar>(self);
    THROW_NS_IF_FAILED(_comInst->add_Opened(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeOpenedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Opened(token));
}

- (EventRegistrationToken)addClosedEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar>(self);
    THROW_NS_IF_FAILED(_comInst->add_Closed(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeClosedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Closed(token));
}

- (void)onClosed:(RTObject*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnClosed([e comObj].Get()));
}

- (void)onOpened:(RTObject*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnOpened([e comObj].Get()));
}

- (WXCAppBarClosedDisplayMode)closedDisplayMode {
    ABI::Windows::UI::Xaml::Controls::AppBarClosedDisplayMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar2>(self);
    THROW_NS_IF_FAILED(_comInst->get_ClosedDisplayMode(&unmarshalledReturn));
    return (WXCAppBarClosedDisplayMode)unmarshalledReturn;
}

- (void)setClosedDisplayMode:(WXCAppBarClosedDisplayMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar2>(self);
    THROW_NS_IF_FAILED(_comInst->put_ClosedDisplayMode((ABI::Windows::UI::Xaml::Controls::AppBarClosedDisplayMode)value));
}

- (WUXCPAppBarTemplateSettings*)templateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::IAppBarTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar3>(self);
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPAppBarTemplateSettings>(unmarshalledReturn.Get());
}

- (EventRegistrationToken)addOpeningEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar3>(self);
    THROW_NS_IF_FAILED(_comInst->add_Opening(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeOpeningEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Opening(token));
}

- (EventRegistrationToken)addClosingEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar3>(self);
    THROW_NS_IF_FAILED(_comInst->add_Closing(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeClosingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Closing(token));
}

- (void)onClosing:(RTObject*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarOverrides3>(self);
    THROW_NS_IF_FAILED(_comInst->OnClosing([e comObj].Get()));
}

- (void)onOpening:(RTObject*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarOverrides3>(self);
    THROW_NS_IF_FAILED(_comInst->OnOpening([e comObj].Get()));
}

- (WXCLightDismissOverlayMode)lightDismissOverlayMode {
    ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar4>(self);
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayMode(&unmarshalledReturn));
    return (WXCLightDismissOverlayMode)unmarshalledReturn;
}

- (void)setLightDismissOverlayMode:(WXCLightDismissOverlayMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBar4>(self);
    THROW_NS_IF_FAILED(_comInst->put_LightDismissOverlayMode((ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode)value));
}

@end

@implementation WXCAutoSuggestBox

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.AutoSuggestBox").Get(), &out));
    return [_createRtProxy<WXCAutoSuggestBox>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2> WXCIAutoSuggestBoxStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AutoSuggestBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)queryIconProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAutoSuggestBoxStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_QueryIconProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3> WXCIAutoSuggestBoxStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AutoSuggestBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)lightDismissOverlayModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAutoSuggestBoxStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics> WXCIAutoSuggestBoxStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AutoSuggestBox").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)maxSuggestionListHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAutoSuggestBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxSuggestionListHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isSuggestionListOpenProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAutoSuggestBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsSuggestionListOpenProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textMemberPathProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAutoSuggestBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextMemberPathProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAutoSuggestBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)updateTextOnSelectProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAutoSuggestBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_UpdateTextOnSelectProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)placeholderTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAutoSuggestBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAutoSuggestBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)autoMaximizeSuggestionAreaProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAutoSuggestBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_AutoMaximizeSuggestionAreaProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)textBoxStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAutoSuggestBoxStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextBoxStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (double)maxSuggestionListHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxSuggestionListHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaxSuggestionListHeight:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxSuggestionListHeight(value));
}

- (BOOL)isSuggestionListOpen {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSuggestionListOpen(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSuggestionListOpen:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSuggestionListOpen((boolean)value));
}

- (NSString*)textMemberPath {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextMemberPath(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setTextMemberPath:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextMemberPath(nsStrToHstr(value).Get()));
}

- (NSString*)text {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_Text(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_Text(nsStrToHstr(value).Get()));
}

- (BOOL)updateTextOnSelect {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_UpdateTextOnSelect(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setUpdateTextOnSelect:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_UpdateTextOnSelect((boolean)value));
}

- (NSString*)placeholderText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_PlaceholderText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setPlaceholderText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_PlaceholderText(nsStrToHstr(value).Get()));
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

- (BOOL)autoMaximizeSuggestionArea {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_AutoMaximizeSuggestionArea(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setAutoMaximizeSuggestionArea:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_AutoMaximizeSuggestionArea((boolean)value));
}

- (WXStyle*)textBoxStyle {
    ComPtr<ABI::Windows::UI::Xaml::IStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->get_TextBoxStyle(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXStyle>(unmarshalledReturn.Get());
}

- (void)setTextBoxStyle:(WXStyle*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->put_TextBoxStyle(_getRtInterface<ABI::Windows::UI::Xaml::IStyle>(value).Get()));
}

- (EventRegistrationToken)addSuggestionChosenEvent:(void (^)(WXCAutoSuggestBox*, WXCAutoSuggestBoxSuggestionChosenEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_SuggestionChosen(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_AutoSuggestBox_Windows_UI_Xaml_Controls_AutoSuggestBoxSuggestionChosenEventArgs>(
            value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeSuggestionChosenEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_SuggestionChosen(token));
}

- (EventRegistrationToken)addTextChangedEvent:(void (^)(WXCAutoSuggestBox*, WXCAutoSuggestBoxTextChangedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->add_TextChanged(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_AutoSuggestBox_Windows_UI_Xaml_Controls_AutoSuggestBoxTextChangedEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTextChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TextChanged(token));
}

- (WXCIconElement*)queryIcon {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IIconElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox2>(self);
    THROW_NS_IF_FAILED(_comInst->get_QueryIcon(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCIconElement>(unmarshalledReturn.Get());
}

- (void)setQueryIcon:(WXCIconElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox2>(self);
    THROW_NS_IF_FAILED(_comInst->put_QueryIcon(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IIconElement>(value).Get()));
}

- (EventRegistrationToken)addQuerySubmittedEvent:(void (^)(WXCAutoSuggestBox*, WXCAutoSuggestBoxQuerySubmittedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox2>(self);
    THROW_NS_IF_FAILED(_comInst->add_QuerySubmitted(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_AutoSuggestBox_Windows_UI_Xaml_Controls_AutoSuggestBoxQuerySubmittedEventArgs>(
            value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeQuerySubmittedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_QuerySubmitted(token));
}

- (WXCLightDismissOverlayMode)lightDismissOverlayMode {
    ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox3>(self);
    THROW_NS_IF_FAILED(_comInst->get_LightDismissOverlayMode(&unmarshalledReturn));
    return (WXCLightDismissOverlayMode)unmarshalledReturn;
}

- (void)setLightDismissOverlayMode:(WXCLightDismissOverlayMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox3>(self);
    THROW_NS_IF_FAILED(_comInst->put_LightDismissOverlayMode((ABI::Windows::UI::Xaml::Controls::LightDismissOverlayMode)value));
}

@end

@implementation WXCCommandBarOverflowPresenter

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory> factory;
    THROW_NS_IF_FAILED(ABI::Windows::Foundation::GetActivationFactory(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.CommandBarOverflowPresenter").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIItemsControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIItemsControlOverrides)]) {
        typedOuter = Make<WXCIItemsControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCCommandBarOverflowPresenter* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCContentDialog

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialog> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialogFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ContentDialog").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialog> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCContentDialog* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialogStatics> WXCIContentDialogStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IContentDialogStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ContentDialog").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)titleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentDialogStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TitleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)titleTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentDialogStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TitleTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)fullSizeDesiredProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentDialogStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FullSizeDesiredProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)primaryButtonTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentDialogStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PrimaryButtonTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)secondaryButtonTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentDialogStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SecondaryButtonTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)primaryButtonCommandProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentDialogStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PrimaryButtonCommandProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)secondaryButtonCommandProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentDialogStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SecondaryButtonCommandProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)primaryButtonCommandParameterProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentDialogStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PrimaryButtonCommandParameterProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)secondaryButtonCommandParameterProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentDialogStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SecondaryButtonCommandParameterProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isPrimaryButtonEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentDialogStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsPrimaryButtonEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isSecondaryButtonEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIContentDialogStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsSecondaryButtonEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject*)title {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->get_Title(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setTitle:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->put_Title([value comObj].Get()));
}

- (WXDataTemplate*)titleTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->get_TitleTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setTitleTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->put_TitleTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (BOOL)fullSizeDesired {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->get_FullSizeDesired(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setFullSizeDesired:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->put_FullSizeDesired((boolean)value));
}

- (NSString*)primaryButtonText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->get_PrimaryButtonText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setPrimaryButtonText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->put_PrimaryButtonText(nsStrToHstr(value).Get()));
}

- (NSString*)secondaryButtonText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->get_SecondaryButtonText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setSecondaryButtonText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->put_SecondaryButtonText(nsStrToHstr(value).Get()));
}

- (RTObject<WUXIICommand>*)primaryButtonCommand {
    ComPtr<ABI::Windows::UI::Xaml::Input::ICommand> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->get_PrimaryButtonCommand(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXIICommand>(unmarshalledReturn.Get());
}

- (void)setPrimaryButtonCommand:(RTObject<WUXIICommand>*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->put_PrimaryButtonCommand(_getRtInterface<ABI::Windows::UI::Xaml::Input::ICommand>(value).Get()));
}

- (RTObject<WUXIICommand>*)secondaryButtonCommand {
    ComPtr<ABI::Windows::UI::Xaml::Input::ICommand> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->get_SecondaryButtonCommand(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXIICommand>(unmarshalledReturn.Get());
}

- (void)setSecondaryButtonCommand:(RTObject<WUXIICommand>*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->put_SecondaryButtonCommand(_getRtInterface<ABI::Windows::UI::Xaml::Input::ICommand>(value).Get()));
}

- (RTObject*)primaryButtonCommandParameter {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->get_PrimaryButtonCommandParameter(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setPrimaryButtonCommandParameter:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->put_PrimaryButtonCommandParameter([value comObj].Get()));
}

- (RTObject*)secondaryButtonCommandParameter {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->get_SecondaryButtonCommandParameter(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setSecondaryButtonCommandParameter:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->put_SecondaryButtonCommandParameter([value comObj].Get()));
}

- (BOOL)isPrimaryButtonEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsPrimaryButtonEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsPrimaryButtonEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsPrimaryButtonEnabled((boolean)value));
}

- (BOOL)isSecondaryButtonEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsSecondaryButtonEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsSecondaryButtonEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsSecondaryButtonEnabled((boolean)value));
}

- (EventRegistrationToken)addClosingEvent:(void (^)(WXCContentDialog*, WXCContentDialogClosingEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->add_Closing(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_ContentDialog_Windows_UI_Xaml_Controls_ContentDialogClosingEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeClosingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Closing(token));
}

- (EventRegistrationToken)addClosedEvent:(void (^)(WXCContentDialog*, WXCContentDialogClosedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->add_Closed(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_ContentDialog_Windows_UI_Xaml_Controls_ContentDialogClosedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeClosedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Closed(token));
}

- (EventRegistrationToken)addOpenedEvent:(void (^)(WXCContentDialog*, WXCContentDialogOpenedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->add_Opened(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_ContentDialog_Windows_UI_Xaml_Controls_ContentDialogOpenedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeOpenedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Opened(token));
}

- (EventRegistrationToken)addPrimaryButtonClickEvent:(void (^)(WXCContentDialog*, WXCContentDialogButtonClickEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->add_PrimaryButtonClick(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_ContentDialog_Windows_UI_Xaml_Controls_ContentDialogButtonClickEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePrimaryButtonClickEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->remove_PrimaryButtonClick(token));
}

- (EventRegistrationToken)addSecondaryButtonClickEvent:(void (^)(WXCContentDialog*, WXCContentDialogButtonClickEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->add_SecondaryButtonClick(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_ContentDialog_Windows_UI_Xaml_Controls_ContentDialogButtonClickEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeSecondaryButtonClickEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->remove_SecondaryButtonClick(token));
}

- (void)hide {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->Hide());
}

- (void)showAsyncWithSuccess:(void (^)(WXCContentDialogResult))success failure:(void (^)(NSError*))failure {
    ComPtr<ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::UI::Xaml::Controls::ContentDialogResult>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IContentDialog>(self);
    THROW_NS_IF_FAILED(_comInst->ShowAsync(&unmarshalledReturn));

    auto successRc = makeBlockHolder(success);
    auto failureRc = makeBlockHolder(failure);
    auto completionHandler = ::Microsoft::WRL::Callback<::Microsoft::WRL::Implements<
        ::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::WinRtClassicComMix>,
        ABI::Windows::Foundation::IAsyncOperationCompletedHandler<ABI::Windows::UI::Xaml::Controls::ContentDialogResult>,
        FtmBase>>(
        [successRc, failureRc](ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::UI::Xaml::Controls::ContentDialogResult>* op,
                               AsyncStatus status) {
            @autoreleasepool {
                if (!_handleAsyncErrorCode(op, failureRc)) {
                    return S_OK;
                }
                if (status == AsyncStatus::Completed) {
                    ABI::Windows::UI::Xaml::Controls::ContentDialogResult result;
                    HRESULT hr = op->GetResults(&result);
                    if (SUCCEEDED(hr)) {
                        if (successRc) {
                            successRc((WXCContentDialogResult)result);
                        }
                    } else {
                        if (failureRc) {
                            failureRc([NSError errorWithDomain:@"HRESULT" code:hr userInfo:nil]);
                        }
                    }
                } else {
                    if (failureRc) {
                        failureRc([NSError errorWithDomain:@"Async" code:(int)status userInfo:nil]);
                    }
                }
                return S_OK;
            }
        });

    unmarshalledReturn->put_Completed(completionHandler.Get());
}

@end

@implementation WXCFlyoutPresenter

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlyoutPresenter> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlyoutPresenterFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.FlyoutPresenter").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlyoutPresenter> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCFlyoutPresenter* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCFrame

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFrame> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFrameFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Frame").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFrame> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCFrame* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IFrameStatics2> WXCIFrameStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFrameStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Frame").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)backStackProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFrameStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_BackStackProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)forwardStackProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFrameStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_ForwardStackProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IFrameStatics> WXCIFrameStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFrameStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Frame").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)cacheSizeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFrameStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CacheSizeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)canGoBackProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFrameStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CanGoBackProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)canGoForwardProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFrameStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CanGoForwardProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)currentSourcePageTypeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFrameStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CurrentSourcePageTypeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)sourcePageTypeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFrameStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SourcePageTypeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)backStackDepthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFrameStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BackStackDepthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (int)cacheSize {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->get_CacheSize(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setCacheSize:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->put_CacheSize(value));
}

- (BOOL)canGoBack {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->get_CanGoBack(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (BOOL)canGoForward {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->get_CanGoForward(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (WUXITypeName*)currentSourcePageType {
    ABI::Windows::UI::Xaml::Interop::TypeName unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->get_CurrentSourcePageType(&unmarshalledReturn));
    return WUXITypeName_create(unmarshalledReturn);
}

- (WUXITypeName*)sourcePageType {
    ABI::Windows::UI::Xaml::Interop::TypeName unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->get_SourcePageType(&unmarshalledReturn));
    return WUXITypeName_create(unmarshalledReturn);
}

- (void)setSourcePageType:(WUXITypeName*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->put_SourcePageType(*[value internalStruct]));
}

- (int)backStackDepth {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->get_BackStackDepth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (EventRegistrationToken)addNavigatedEvent:(WUXNNavigatedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->add_Navigated(Make<WUXNNavigatedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeNavigatedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Navigated(token));
}

- (EventRegistrationToken)addNavigatingEvent:(WUXNNavigatingCancelEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->add_Navigating(Make<WUXNNavigatingCancelEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeNavigatingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Navigating(token));
}

- (EventRegistrationToken)addNavigationFailedEvent:(WUXNNavigationFailedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->add_NavigationFailed(Make<WUXNNavigationFailedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeNavigationFailedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->remove_NavigationFailed(token));
}

- (EventRegistrationToken)addNavigationStoppedEvent:(WUXNNavigationStoppedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->add_NavigationStopped(Make<WUXNNavigationStoppedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeNavigationStoppedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->remove_NavigationStopped(token));
}

- (void)goBack {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->GoBack());
}

- (void)goForward {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->GoForward());
}

- (BOOL)navigate:(WUXITypeName*)sourcePageType parameter:(RTObject*)parameter {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->Navigate(*[sourcePageType internalStruct], [parameter comObj].Get(), &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (NSString*)getNavigationState {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->GetNavigationState(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setNavigationState:(NSString*)navigationState {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame>(self);
    THROW_NS_IF_FAILED(_comInst->SetNavigationState(nsStrToHstr(navigationState).Get()));
}

- (BOOL)navigate:(WUXITypeName*)sourcePageType {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::INavigate>(self);
    THROW_NS_IF_FAILED(_comInst->Navigate(*[sourcePageType internalStruct], &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (NSMutableArray* /* WUXNPageStackEntry* */)backStack {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Navigation::PageStackEntry*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame2>(self);
    THROW_NS_IF_FAILED(_comInst->get_BackStack(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WUXNPageStackEntry_create(unmarshalledReturn.Get());
}

- (NSMutableArray* /* WUXNPageStackEntry* */)forwardStack {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Navigation::PageStackEntry*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame2>(self);
    THROW_NS_IF_FAILED(_comInst->get_ForwardStack(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WUXNPageStackEntry_create(unmarshalledReturn.Get());
}

- (BOOL)navigate:(WUXITypeName*)sourcePageType parameter:(RTObject*)parameter infoOverride:(WUXMANavigationTransitionInfo*)infoOverride {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame2>(self);
    THROW_NS_IF_FAILED(
        _comInst->Navigate(*[sourcePageType internalStruct],
                           [parameter comObj].Get(),
                           _getRtInterface<ABI::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo>(infoOverride).Get(),
                           &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)goBack:(WUXMANavigationTransitionInfo*)transitionInfoOverride {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFrame3>(self);
    THROW_NS_IF_FAILED(_comInst->GoBack(
        _getRtInterface<ABI::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo>(transitionInfoOverride).Get()));
}

@end

@implementation WXCMenuFlyoutItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MenuFlyoutItem").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCMenuFlyoutItem* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics> WXCIMenuFlyoutItemStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MenuFlyoutItem").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)textProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMenuFlyoutItemStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)commandProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMenuFlyoutItemStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CommandProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)commandParameterProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMenuFlyoutItemStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CommandParameterProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)text {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_Text(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->put_Text(nsStrToHstr(value).Get()));
}

- (RTObject<WUXIICommand>*)command {
    ComPtr<ABI::Windows::UI::Xaml::Input::ICommand> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_Command(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXIICommand>(unmarshalledReturn.Get());
}

- (void)setCommand:(RTObject<WUXIICommand>*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->put_Command(_getRtInterface<ABI::Windows::UI::Xaml::Input::ICommand>(value).Get()));
}

- (RTObject*)commandParameter {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_CommandParameter(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setCommandParameter:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->put_CommandParameter([value comObj].Get()));
}

- (EventRegistrationToken)addClickEvent:(WXRoutedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->add_Click(Make<WXRoutedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeClickEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Click(token));
}

@end

@implementation WXCMenuFlyoutPresenter

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MenuFlyoutPresenter").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIItemsControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIItemsControlOverrides)]) {
        typedOuter = Make<WXCIItemsControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCMenuFlyoutPresenter* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

- (WUXCPMenuFlyoutPresenterTemplateSettings*)templateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::IMenuFlyoutPresenterTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2>(self);
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPMenuFlyoutPresenterTemplateSettings>(unmarshalledReturn.Get());
}

@end

@implementation WXCMenuFlyoutSeparator

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutSeparator> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MenuFlyoutSeparator").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutSeparator> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCMenuFlyoutSeparator* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCMenuFlyoutSubItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.MenuFlyoutSubItem").Get(), &out));
    return [_createRtProxy<WXCMenuFlyoutSubItem>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics> WXCIMenuFlyoutSubItemStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MenuFlyoutSubItem").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)textProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMenuFlyoutSubItemStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSMutableArray* /* WXCMenuFlyoutItemBase* */)items {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Controls::MenuFlyoutItemBase*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_Items(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WXCMenuFlyoutItemBase_create(unmarshalledReturn.Get());
}

- (NSString*)text {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_Text(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>(self);
    THROW_NS_IF_FAILED(_comInst->put_Text(nsStrToHstr(value).Get()));
}

@end

@implementation WXCPage

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPage> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPageFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Page").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPage> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIPageOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIPageOverrides)]) {
        typedOuter = Make<WXCIPageOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCPage* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IPageStatics> WXCIPageStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPageStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Page").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)frameProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPageStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FrameProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)topAppBarProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPageStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TopAppBarProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)bottomAppBarProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPageStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BottomAppBarProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXCFrame*)frame {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFrame> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPage>(self);
    THROW_NS_IF_FAILED(_comInst->get_Frame(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCFrame>(unmarshalledReturn.Get());
}

- (WUXNNavigationCacheMode)navigationCacheMode {
    ABI::Windows::UI::Xaml::Navigation::NavigationCacheMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPage>(self);
    THROW_NS_IF_FAILED(_comInst->get_NavigationCacheMode(&unmarshalledReturn));
    return (WUXNNavigationCacheMode)unmarshalledReturn;
}

- (void)setNavigationCacheMode:(WUXNNavigationCacheMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPage>(self);
    THROW_NS_IF_FAILED(_comInst->put_NavigationCacheMode((ABI::Windows::UI::Xaml::Navigation::NavigationCacheMode)value));
}

- (WXCAppBar*)topAppBar {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBar> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPage>(self);
    THROW_NS_IF_FAILED(_comInst->get_TopAppBar(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCAppBar>(unmarshalledReturn.Get());
}

- (void)setTopAppBar:(WXCAppBar*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPage>(self);
    THROW_NS_IF_FAILED(_comInst->put_TopAppBar(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IAppBar>(value).Get()));
}

- (WXCAppBar*)bottomAppBar {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBar> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPage>(self);
    THROW_NS_IF_FAILED(_comInst->get_BottomAppBar(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCAppBar>(unmarshalledReturn.Get());
}

- (void)setBottomAppBar:(WXCAppBar*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPage>(self);
    THROW_NS_IF_FAILED(_comInst->put_BottomAppBar(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IAppBar>(value).Get()));
}

- (void)onNavigatedFrom:(WUXNNavigationEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPageOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnNavigatedFrom(_getRtInterface<ABI::Windows::UI::Xaml::Navigation::INavigationEventArgs>(e).Get()));
}

- (void)onNavigatedTo:(WUXNNavigationEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPageOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->OnNavigatedTo(_getRtInterface<ABI::Windows::UI::Xaml::Navigation::INavigationEventArgs>(e).Get()));
}

- (void)onNavigatingFrom:(WUXNNavigatingCancelEventArgs*)e {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPageOverrides>(self);
    THROW_NS_IF_FAILED(
        _comInst->OnNavigatingFrom(_getRtInterface<ABI::Windows::UI::Xaml::Navigation::INavigatingCancelEventArgs>(e).Get()));
}

@end

@implementation WXCScrollViewer

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IScrollViewer> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ScrollViewer").Get(), &out));
    return [_createRtProxy<WXCScrollViewer>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IScrollViewerStatics2> WXCIScrollViewerStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IScrollViewerStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ScrollViewer").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)topLeftHeaderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_TopLeftHeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)leftHeaderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_LeftHeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)topHeaderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_TopHeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IScrollViewerStatics> WXCIScrollViewerStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IScrollViewerStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ScrollViewer").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)horizontalSnapPointsAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HorizontalSnapPointsAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)verticalSnapPointsAlignmentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VerticalSnapPointsAlignmentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)horizontalSnapPointsTypeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HorizontalSnapPointsTypeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)verticalSnapPointsTypeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VerticalSnapPointsTypeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)zoomSnapPointsTypeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ZoomSnapPointsTypeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)horizontalOffsetProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HorizontalOffsetProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)viewportWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ViewportWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)scrollableWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ScrollableWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)computedHorizontalScrollBarVisibilityProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ComputedHorizontalScrollBarVisibilityProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)extentWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ExtentWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)verticalOffsetProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VerticalOffsetProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)viewportHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ViewportHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)scrollableHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ScrollableHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)computedVerticalScrollBarVisibilityProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ComputedVerticalScrollBarVisibilityProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)extentHeightProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ExtentHeightProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)minZoomFactorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MinZoomFactorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxZoomFactorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxZoomFactorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)zoomFactorProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ZoomFactorProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)zoomSnapPointsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ZoomSnapPointsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)horizontalScrollBarVisibilityProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HorizontalScrollBarVisibilityProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXCScrollBarVisibility)getHorizontalScrollBarVisibility:(WXDependencyObject*)element {
    ABI::Windows::UI::Xaml::Controls::ScrollBarVisibility unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetHorizontalScrollBarVisibility(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                                  &unmarshalledReturn));
    return (WXCScrollBarVisibility)unmarshalledReturn;
}

+ (void)setHorizontalScrollBarVisibility:(WXDependencyObject*)element
           horizontalScrollBarVisibility:(WXCScrollBarVisibility)horizontalScrollBarVisibility {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetHorizontalScrollBarVisibility(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                   (ABI::Windows::UI::Xaml::Controls::ScrollBarVisibility)horizontalScrollBarVisibility));
}

+ (WXDependencyProperty*)verticalScrollBarVisibilityProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VerticalScrollBarVisibilityProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXCScrollBarVisibility)getVerticalScrollBarVisibility:(WXDependencyObject*)element {
    ABI::Windows::UI::Xaml::Controls::ScrollBarVisibility unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetVerticalScrollBarVisibility(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                                &unmarshalledReturn));
    return (WXCScrollBarVisibility)unmarshalledReturn;
}

+ (void)setVerticalScrollBarVisibility:(WXDependencyObject*)element
           verticalScrollBarVisibility:(WXCScrollBarVisibility)verticalScrollBarVisibility {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetVerticalScrollBarVisibility(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                 (ABI::Windows::UI::Xaml::Controls::ScrollBarVisibility)verticalScrollBarVisibility));
}

+ (WXDependencyProperty*)isHorizontalRailEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsHorizontalRailEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getIsHorizontalRailEnabled:(WXDependencyObject*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetIsHorizontalRailEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                            &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setIsHorizontalRailEnabled:(WXDependencyObject*)element isHorizontalRailEnabled:(BOOL)isHorizontalRailEnabled {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetIsHorizontalRailEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                            (boolean)isHorizontalRailEnabled));
}

+ (WXDependencyProperty*)isVerticalRailEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsVerticalRailEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getIsVerticalRailEnabled:(WXDependencyObject*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetIsVerticalRailEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(), &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setIsVerticalRailEnabled:(WXDependencyObject*)element isVerticalRailEnabled:(BOOL)isVerticalRailEnabled {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetIsVerticalRailEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                          (boolean)isVerticalRailEnabled));
}

+ (WXDependencyProperty*)isHorizontalScrollChainingEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsHorizontalScrollChainingEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getIsHorizontalScrollChainingEnabled:(WXDependencyObject*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetIsHorizontalScrollChainingEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                       &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setIsHorizontalScrollChainingEnabled:(WXDependencyObject*)element
           isHorizontalScrollChainingEnabled:(BOOL)isHorizontalScrollChainingEnabled {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetIsHorizontalScrollChainingEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                       (boolean)isHorizontalScrollChainingEnabled));
}

+ (WXDependencyProperty*)isVerticalScrollChainingEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsVerticalScrollChainingEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getIsVerticalScrollChainingEnabled:(WXDependencyObject*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetIsVerticalScrollChainingEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                     &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setIsVerticalScrollChainingEnabled:(WXDependencyObject*)element
           isVerticalScrollChainingEnabled:(BOOL)isVerticalScrollChainingEnabled {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->SetIsVerticalScrollChainingEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                     (boolean)isVerticalScrollChainingEnabled));
}

+ (WXDependencyProperty*)isZoomChainingEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsZoomChainingEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getIsZoomChainingEnabled:(WXDependencyObject*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetIsZoomChainingEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(), &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setIsZoomChainingEnabled:(WXDependencyObject*)element isZoomChainingEnabled:(BOOL)isZoomChainingEnabled {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetIsZoomChainingEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                          (boolean)isZoomChainingEnabled));
}

+ (WXDependencyProperty*)isScrollInertiaEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsScrollInertiaEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getIsScrollInertiaEnabled:(WXDependencyObject*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetIsScrollInertiaEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                           &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setIsScrollInertiaEnabled:(WXDependencyObject*)element isScrollInertiaEnabled:(BOOL)isScrollInertiaEnabled {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetIsScrollInertiaEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                           (boolean)isScrollInertiaEnabled));
}

+ (WXDependencyProperty*)isZoomInertiaEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsZoomInertiaEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getIsZoomInertiaEnabled:(WXDependencyObject*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetIsZoomInertiaEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(), &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setIsZoomInertiaEnabled:(WXDependencyObject*)element isZoomInertiaEnabled:(BOOL)isZoomInertiaEnabled {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetIsZoomInertiaEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                         (boolean)isZoomInertiaEnabled));
}

+ (WXDependencyProperty*)horizontalScrollModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HorizontalScrollModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXCScrollMode)getHorizontalScrollMode:(WXDependencyObject*)element {
    ABI::Windows::UI::Xaml::Controls::ScrollMode unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetHorizontalScrollMode(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(), &unmarshalledReturn));
    return (WXCScrollMode)unmarshalledReturn;
}

+ (void)setHorizontalScrollMode:(WXDependencyObject*)element horizontalScrollMode:(WXCScrollMode)horizontalScrollMode {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetHorizontalScrollMode(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                         (ABI::Windows::UI::Xaml::Controls::ScrollMode)horizontalScrollMode));
}

+ (WXDependencyProperty*)verticalScrollModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_VerticalScrollModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXCScrollMode)getVerticalScrollMode:(WXDependencyObject*)element {
    ABI::Windows::UI::Xaml::Controls::ScrollMode unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetVerticalScrollMode(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(), &unmarshalledReturn));
    return (WXCScrollMode)unmarshalledReturn;
}

+ (void)setVerticalScrollMode:(WXDependencyObject*)element verticalScrollMode:(WXCScrollMode)verticalScrollMode {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetVerticalScrollMode(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                       (ABI::Windows::UI::Xaml::Controls::ScrollMode)verticalScrollMode));
}

+ (WXDependencyProperty*)zoomModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ZoomModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXCZoomMode)getZoomMode:(WXDependencyObject*)element {
    ABI::Windows::UI::Xaml::Controls::ZoomMode unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetZoomMode(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(), &unmarshalledReturn));
    return (WXCZoomMode)unmarshalledReturn;
}

+ (void)setZoomMode:(WXDependencyObject*)element zoomMode:(WXCZoomMode)zoomMode {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetZoomMode(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                             (ABI::Windows::UI::Xaml::Controls::ZoomMode)zoomMode));
}

+ (WXDependencyProperty*)isDeferredScrollingEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsDeferredScrollingEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getIsDeferredScrollingEnabled:(WXDependencyObject*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetIsDeferredScrollingEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                               &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setIsDeferredScrollingEnabled:(WXDependencyObject*)element isDeferredScrollingEnabled:(BOOL)isDeferredScrollingEnabled {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetIsDeferredScrollingEnabled(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                               (boolean)isDeferredScrollingEnabled));
}

+ (WXDependencyProperty*)bringIntoViewOnFocusChangeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_BringIntoViewOnFocusChangeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (BOOL)getBringIntoViewOnFocusChange:(WXDependencyObject*)element {
    boolean unmarshalledReturn;
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->GetBringIntoViewOnFocusChange(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                               &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

+ (void)setBringIntoViewOnFocusChange:(WXDependencyObject*)element bringIntoViewOnFocusChange:(BOOL)bringIntoViewOnFocusChange {
    auto _comInst = WXCIScrollViewerStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetBringIntoViewOnFocusChange(_getRtInterface<ABI::Windows::UI::Xaml::IDependencyObject>(element).Get(),
                                                               (boolean)bringIntoViewOnFocusChange));
}

- (WXCScrollBarVisibility)horizontalScrollBarVisibility {
    ABI::Windows::UI::Xaml::Controls::ScrollBarVisibility unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalScrollBarVisibility(&unmarshalledReturn));
    return (WXCScrollBarVisibility)unmarshalledReturn;
}

- (void)setHorizontalScrollBarVisibility:(WXCScrollBarVisibility)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_HorizontalScrollBarVisibility((ABI::Windows::UI::Xaml::Controls::ScrollBarVisibility)value));
}

- (WXCScrollBarVisibility)verticalScrollBarVisibility {
    ABI::Windows::UI::Xaml::Controls::ScrollBarVisibility unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalScrollBarVisibility(&unmarshalledReturn));
    return (WXCScrollBarVisibility)unmarshalledReturn;
}

- (void)setVerticalScrollBarVisibility:(WXCScrollBarVisibility)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_VerticalScrollBarVisibility((ABI::Windows::UI::Xaml::Controls::ScrollBarVisibility)value));
}

- (BOOL)isHorizontalRailEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsHorizontalRailEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsHorizontalRailEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsHorizontalRailEnabled((boolean)value));
}

- (BOOL)isVerticalRailEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsVerticalRailEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsVerticalRailEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsVerticalRailEnabled((boolean)value));
}

- (BOOL)isHorizontalScrollChainingEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsHorizontalScrollChainingEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsHorizontalScrollChainingEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsHorizontalScrollChainingEnabled((boolean)value));
}

- (BOOL)isVerticalScrollChainingEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsVerticalScrollChainingEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsVerticalScrollChainingEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsVerticalScrollChainingEnabled((boolean)value));
}

- (BOOL)isZoomChainingEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsZoomChainingEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsZoomChainingEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsZoomChainingEnabled((boolean)value));
}

- (BOOL)isScrollInertiaEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsScrollInertiaEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsScrollInertiaEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsScrollInertiaEnabled((boolean)value));
}

- (BOOL)isZoomInertiaEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsZoomInertiaEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsZoomInertiaEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsZoomInertiaEnabled((boolean)value));
}

- (WXCScrollMode)horizontalScrollMode {
    ABI::Windows::UI::Xaml::Controls::ScrollMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalScrollMode(&unmarshalledReturn));
    return (WXCScrollMode)unmarshalledReturn;
}

- (void)setHorizontalScrollMode:(WXCScrollMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_HorizontalScrollMode((ABI::Windows::UI::Xaml::Controls::ScrollMode)value));
}

- (WXCScrollMode)verticalScrollMode {
    ABI::Windows::UI::Xaml::Controls::ScrollMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalScrollMode(&unmarshalledReturn));
    return (WXCScrollMode)unmarshalledReturn;
}

- (void)setVerticalScrollMode:(WXCScrollMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_VerticalScrollMode((ABI::Windows::UI::Xaml::Controls::ScrollMode)value));
}

- (WXCZoomMode)zoomMode {
    ABI::Windows::UI::Xaml::Controls::ZoomMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_ZoomMode(&unmarshalledReturn));
    return (WXCZoomMode)unmarshalledReturn;
}

- (void)setZoomMode:(WXCZoomMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_ZoomMode((ABI::Windows::UI::Xaml::Controls::ZoomMode)value));
}

- (WUXCPSnapPointsAlignment)horizontalSnapPointsAlignment {
    ABI::Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalSnapPointsAlignment(&unmarshalledReturn));
    return (WUXCPSnapPointsAlignment)unmarshalledReturn;
}

- (void)setHorizontalSnapPointsAlignment:(WUXCPSnapPointsAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_HorizontalSnapPointsAlignment((ABI::Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment)value));
}

- (WUXCPSnapPointsAlignment)verticalSnapPointsAlignment {
    ABI::Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalSnapPointsAlignment(&unmarshalledReturn));
    return (WUXCPSnapPointsAlignment)unmarshalledReturn;
}

- (void)setVerticalSnapPointsAlignment:(WUXCPSnapPointsAlignment)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_VerticalSnapPointsAlignment((ABI::Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment)value));
}

- (WXCSnapPointsType)horizontalSnapPointsType {
    ABI::Windows::UI::Xaml::Controls::SnapPointsType unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalSnapPointsType(&unmarshalledReturn));
    return (WXCSnapPointsType)unmarshalledReturn;
}

- (void)setHorizontalSnapPointsType:(WXCSnapPointsType)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_HorizontalSnapPointsType((ABI::Windows::UI::Xaml::Controls::SnapPointsType)value));
}

- (WXCSnapPointsType)verticalSnapPointsType {
    ABI::Windows::UI::Xaml::Controls::SnapPointsType unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalSnapPointsType(&unmarshalledReturn));
    return (WXCSnapPointsType)unmarshalledReturn;
}

- (void)setVerticalSnapPointsType:(WXCSnapPointsType)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_VerticalSnapPointsType((ABI::Windows::UI::Xaml::Controls::SnapPointsType)value));
}

- (WXCSnapPointsType)zoomSnapPointsType {
    ABI::Windows::UI::Xaml::Controls::SnapPointsType unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_ZoomSnapPointsType(&unmarshalledReturn));
    return (WXCSnapPointsType)unmarshalledReturn;
}

- (void)setZoomSnapPointsType:(WXCSnapPointsType)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_ZoomSnapPointsType((ABI::Windows::UI::Xaml::Controls::SnapPointsType)value));
}

- (double)horizontalOffset {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_HorizontalOffset(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)viewportWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_ViewportWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)scrollableWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_ScrollableWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (WXVisibility)computedHorizontalScrollBarVisibility {
    ABI::Windows::UI::Xaml::Visibility unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_ComputedHorizontalScrollBarVisibility(&unmarshalledReturn));
    return (WXVisibility)unmarshalledReturn;
}

- (double)extentWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_ExtentWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)verticalOffset {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_VerticalOffset(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)viewportHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_ViewportHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (double)scrollableHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_ScrollableHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (WXVisibility)computedVerticalScrollBarVisibility {
    ABI::Windows::UI::Xaml::Visibility unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_ComputedVerticalScrollBarVisibility(&unmarshalledReturn));
    return (WXVisibility)unmarshalledReturn;
}

- (double)extentHeight {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_ExtentHeight(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (float)minZoomFactor {
    float unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_MinZoomFactor(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMinZoomFactor:(float)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_MinZoomFactor(value));
}

- (float)maxZoomFactor {
    float unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxZoomFactor(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaxZoomFactor:(float)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxZoomFactor(value));
}

- (float)zoomFactor {
    float unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_ZoomFactor(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (NSMutableArray* /* float */)zoomSnapPoints {
    ComPtr<IVector<float>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_ZoomSnapPoints(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_Single_create(unmarshalledReturn.Get());
}

- (EventRegistrationToken)addViewChangedEvent:(void (^)(RTObject*, WXCScrollViewerViewChangedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->add_ViewChanged(Make<EventHandler_Windows_UI_Xaml_Controls_ScrollViewerViewChangedEventArgs>(value).Get(),
                                                 &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeViewChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ViewChanged(token));
}

- (void)scrollToHorizontalOffset:(double)offset {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->ScrollToHorizontalOffset(offset));
}

- (void)scrollToVerticalOffset:(double)offset {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->ScrollToVerticalOffset(offset));
}

- (void)zoomToFactor:(float)factor {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->ZoomToFactor(factor));
}

- (void)invalidateScrollInfo {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->InvalidateScrollInfo());
}

- (BOOL)isDeferredScrollingEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsDeferredScrollingEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsDeferredScrollingEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsDeferredScrollingEnabled((boolean)value));
}

- (BOOL)bringIntoViewOnFocusChange {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->get_BringIntoViewOnFocusChange(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setBringIntoViewOnFocusChange:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer>(self);
    THROW_NS_IF_FAILED(_comInst->put_BringIntoViewOnFocusChange((boolean)value));
}

- (WXUIElement*)topLeftHeader {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer2>(self);
    THROW_NS_IF_FAILED(_comInst->get_TopLeftHeader(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setTopLeftHeader:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer2>(self);
    THROW_NS_IF_FAILED(_comInst->put_TopLeftHeader(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

- (WXUIElement*)leftHeader {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer2>(self);
    THROW_NS_IF_FAILED(_comInst->get_LeftHeader(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setLeftHeader:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer2>(self);
    THROW_NS_IF_FAILED(_comInst->put_LeftHeader(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

- (WXUIElement*)topHeader {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer2>(self);
    THROW_NS_IF_FAILED(_comInst->get_TopHeader(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setTopHeader:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer2>(self);
    THROW_NS_IF_FAILED(_comInst->put_TopHeader(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

- (EventRegistrationToken)addViewChangingEvent:(void (^)(RTObject*, WXCScrollViewerViewChangingEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer2>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_ViewChanging(Make<EventHandler_Windows_UI_Xaml_Controls_ScrollViewerViewChangingEventArgs>(value).Get(),
                                   &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeViewChangingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer2>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ViewChanging(token));
}

- (BOOL)changeView:(id /* double */)horizontalOffset verticalOffset:(id /* double */)verticalOffset zoomFactor:(id /* float */)zoomFactor {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer2>(self);
    THROW_NS_IF_FAILED(_comInst->ChangeView(BuildNullable<double>(horizontalOffset),
                                            BuildNullable<double>(verticalOffset),
                                            BuildNullable<float>(zoomFactor),
                                            &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (BOOL)changeViewWithOptionalAnimation:(id /* double */)horizontalOffset
                         verticalOffset:(id /* double */)verticalOffset
                             zoomFactor:(id /* float */)zoomFactor
                       disableAnimation:(BOOL)disableAnimation {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer2>(self);
    THROW_NS_IF_FAILED(_comInst->ChangeViewWithOptionalAnimation(BuildNullable<double>(horizontalOffset),
                                                                 BuildNullable<double>(verticalOffset),
                                                                 BuildNullable<float>(zoomFactor),
                                                                 (boolean)disableAnimation,
                                                                 &unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (EventRegistrationToken)addDirectManipulationStartedEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer3>(self);
    THROW_NS_IF_FAILED(_comInst->add_DirectManipulationStarted(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeDirectManipulationStartedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_DirectManipulationStarted(token));
}

- (EventRegistrationToken)addDirectManipulationCompletedEvent:(void (^)(RTObject*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer3>(self);
    THROW_NS_IF_FAILED(_comInst->add_DirectManipulationCompleted(Make<EventHandler_System_Object>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeDirectManipulationCompletedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IScrollViewer3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_DirectManipulationCompleted(token));
}

@end

@implementation WXCCommandBar

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBar> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBarFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CommandBar").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBar> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIAppBarOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIAppBarOverrides)]) {
        typedOuter = Make<WXCIAppBarOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCCommandBar* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBarStatics3> WXCICommandBarStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBarStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CommandBar").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)defaultLabelPositionProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICommandBarStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_DefaultLabelPositionProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)overflowButtonVisibilityProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICommandBarStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_OverflowButtonVisibilityProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isDynamicOverflowEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICommandBarStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsDynamicOverflowEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBarStatics2> WXCICommandBarStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBarStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CommandBar").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)commandBarOverflowPresenterStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICommandBarStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_CommandBarOverflowPresenterStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBarStatics> WXCICommandBarStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ICommandBarStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.CommandBar").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)primaryCommandsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICommandBarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PrimaryCommandsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)secondaryCommandsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCICommandBarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SecondaryCommandsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSMutableArray<RTObservableCollection>* /* RTObject<WXCICommandBarElement>* */)primaryCommands {
    ComPtr<IObservableVector<ABI::Windows::UI::Xaml::Controls::ICommandBarElement*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar>(self);
    THROW_NS_IF_FAILED(_comInst->get_PrimaryCommands(unmarshalledReturn.GetAddressOf()));
    return RTProxiedObservableNSMutableArray_RTObject_WXCICommandBarElement_create(unmarshalledReturn.Get());
}

- (NSMutableArray<RTObservableCollection>* /* RTObject<WXCICommandBarElement>* */)secondaryCommands {
    ComPtr<IObservableVector<ABI::Windows::UI::Xaml::Controls::ICommandBarElement*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar>(self);
    THROW_NS_IF_FAILED(_comInst->get_SecondaryCommands(unmarshalledReturn.GetAddressOf()));
    return RTProxiedObservableNSMutableArray_RTObject_WXCICommandBarElement_create(unmarshalledReturn.Get());
}

- (WXStyle*)commandBarOverflowPresenterStyle {
    ComPtr<ABI::Windows::UI::Xaml::IStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar2>(self);
    THROW_NS_IF_FAILED(_comInst->get_CommandBarOverflowPresenterStyle(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXStyle>(unmarshalledReturn.Get());
}

- (void)setCommandBarOverflowPresenterStyle:(WXStyle*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar2>(self);
    THROW_NS_IF_FAILED(_comInst->put_CommandBarOverflowPresenterStyle(_getRtInterface<ABI::Windows::UI::Xaml::IStyle>(value).Get()));
}

- (WUXCPCommandBarTemplateSettings*)commandBarTemplateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::ICommandBarTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar2>(self);
    THROW_NS_IF_FAILED(_comInst->get_CommandBarTemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPCommandBarTemplateSettings>(unmarshalledReturn.Get());
}

- (WXCCommandBarDefaultLabelPosition)defaultLabelPosition {
    ABI::Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar3>(self);
    THROW_NS_IF_FAILED(_comInst->get_DefaultLabelPosition(&unmarshalledReturn));
    return (WXCCommandBarDefaultLabelPosition)unmarshalledReturn;
}

- (void)setDefaultLabelPosition:(WXCCommandBarDefaultLabelPosition)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar3>(self);
    THROW_NS_IF_FAILED(_comInst->put_DefaultLabelPosition((ABI::Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition)value));
}

- (WXCCommandBarOverflowButtonVisibility)overflowButtonVisibility {
    ABI::Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar3>(self);
    THROW_NS_IF_FAILED(_comInst->get_OverflowButtonVisibility(&unmarshalledReturn));
    return (WXCCommandBarOverflowButtonVisibility)unmarshalledReturn;
}

- (void)setOverflowButtonVisibility:(WXCCommandBarOverflowButtonVisibility)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar3>(self);
    THROW_NS_IF_FAILED(_comInst->put_OverflowButtonVisibility((ABI::Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility)value));
}

- (BOOL)isDynamicOverflowEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar3>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsDynamicOverflowEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsDynamicOverflowEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar3>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsDynamicOverflowEnabled((boolean)value));
}

- (EventRegistrationToken)addDynamicOverflowItemsChangingEvent:(void (^)(WXCCommandBar*, WXCDynamicOverflowItemsChangingEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar3>(self);
    THROW_NS_IF_FAILED(_comInst->add_DynamicOverflowItemsChanging(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_CommandBar_Windows_UI_Xaml_Controls_DynamicOverflowItemsChangingEventArgs>(value)
            .Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeDynamicOverflowItemsChangingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBar3>(self);
    THROW_NS_IF_FAILED(_comInst->remove_DynamicOverflowItemsChanging(token));
}

@end

@implementation WXCGridViewHeaderItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGridViewHeaderItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.GridViewHeaderItem").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGridViewHeaderItem> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCGridViewHeaderItem* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCGridViewItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGridViewItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGridViewItemFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.GridViewItem").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGridViewItem> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCGridViewItem* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

- (WUXCPGridViewItemTemplateSettings*)templateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IGridViewItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPGridViewItemTemplateSettings>(unmarshalledReturn.Get());
}

@end

@implementation WXCListViewHeaderItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewHeaderItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewHeaderItemFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListViewHeaderItem").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewHeaderItem> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCListViewHeaderItem* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCListViewItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewItemFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListViewItem").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewItem> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCListViewItem* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

- (WUXCPListViewItemTemplateSettings*)templateSettings {
    ComPtr<ABI::Windows::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListViewItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_TemplateSettings(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXCPListViewItemTemplateSettings>(unmarshalledReturn.Get());
}

@end

@implementation WXCToggleMenuFlyoutItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ToggleMenuFlyoutItem").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCToggleMenuFlyoutItem* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics> WXCIToggleMenuFlyoutItemStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ToggleMenuFlyoutItem").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)isCheckedProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIToggleMenuFlyoutItemStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsCheckedProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (BOOL)isChecked {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsChecked(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsChecked:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsChecked((boolean)value));
}

@end

@implementation WXCAppBarButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarButtonFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBarButton").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCAppBarButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarButtonStatics> WXCIAppBarButtonStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarButtonStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBarButton").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)labelProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_LabelProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)iconProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IconProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isCompactProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsCompactProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarButtonStatics3> WXCIAppBarButtonStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarButtonStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBarButton").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)labelPositionProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarButtonStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_LabelPositionProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isInOverflowProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarButtonStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsInOverflowProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dynamicOverflowOrderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarButtonStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_DynamicOverflowOrderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)label {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_Label(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setLabel:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_Label(nsStrToHstr(value).Get()));
}

- (WXCIconElement*)icon {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IIconElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_Icon(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCIconElement>(unmarshalledReturn.Get());
}

- (void)setIcon:(WXCIconElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_Icon(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IIconElement>(value).Get()));
}

- (BOOL)isCompact {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsCompact(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsCompact:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsCompact((boolean)value));
}

- (WXCCommandBarLabelPosition)labelPosition {
    ABI::Windows::UI::Xaml::Controls::CommandBarLabelPosition unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarButton3>(self);
    THROW_NS_IF_FAILED(_comInst->get_LabelPosition(&unmarshalledReturn));
    return (WXCCommandBarLabelPosition)unmarshalledReturn;
}

- (void)setLabelPosition:(WXCCommandBarLabelPosition)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarButton3>(self);
    THROW_NS_IF_FAILED(_comInst->put_LabelPosition((ABI::Windows::UI::Xaml::Controls::CommandBarLabelPosition)value));
}

- (BOOL)isInOverflow {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsInOverflow(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (int)dynamicOverflowOrder {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2>(self);
    THROW_NS_IF_FAILED(_comInst->get_DynamicOverflowOrder(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setDynamicOverflowOrder:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2>(self);
    THROW_NS_IF_FAILED(_comInst->put_DynamicOverflowOrder(value));
}

@end

@implementation WXCAppBarToggleButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBarToggleButton").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIToggleButtonOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIToggleButtonOverrides)]) {
        typedOuter = Make<WUXCPIToggleButtonOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCAppBarToggleButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics> WXCIAppBarToggleButtonStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBarToggleButton").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)labelProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarToggleButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_LabelProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)iconProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarToggleButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IconProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isCompactProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarToggleButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsCompactProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3> WXCIAppBarToggleButtonStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.AppBarToggleButton").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)labelPositionProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarToggleButtonStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_LabelPositionProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isInOverflowProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarToggleButtonStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsInOverflowProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dynamicOverflowOrderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIAppBarToggleButtonStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_DynamicOverflowOrderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)label {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_Label(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setLabel:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_Label(nsStrToHstr(value).Get()));
}

- (WXCIconElement*)icon {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IIconElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_Icon(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCIconElement>(unmarshalledReturn.Get());
}

- (void)setIcon:(WXCIconElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_Icon(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IIconElement>(value).Get()));
}

- (BOOL)isCompact {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsCompact(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsCompact:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsCompact((boolean)value));
}

- (WXCCommandBarLabelPosition)labelPosition {
    ABI::Windows::UI::Xaml::Controls::CommandBarLabelPosition unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButton3>(self);
    THROW_NS_IF_FAILED(_comInst->get_LabelPosition(&unmarshalledReturn));
    return (WXCCommandBarLabelPosition)unmarshalledReturn;
}

- (void)setLabelPosition:(WXCCommandBarLabelPosition)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IAppBarToggleButton3>(self);
    THROW_NS_IF_FAILED(_comInst->put_LabelPosition((ABI::Windows::UI::Xaml::Controls::CommandBarLabelPosition)value));
}

- (BOOL)isInOverflow {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsInOverflow(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (int)dynamicOverflowOrder {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2>(self);
    THROW_NS_IF_FAILED(_comInst->get_DynamicOverflowOrder(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setDynamicOverflowOrder:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ICommandBarElement2>(self);
    THROW_NS_IF_FAILED(_comInst->put_DynamicOverflowOrder(value));
}

@end

@implementation WXCGridView

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGridView> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGridViewFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.GridView").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IGridView> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIItemsControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIItemsControlOverrides)]) {
        typedOuter = Make<WXCIItemsControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCGridView* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCListView

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListView> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListViewFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListView").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListView> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIItemsControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIItemsControlOverrides)]) {
        typedOuter = Make<WXCIItemsControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCListView* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCFlyout

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlyout> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlyoutFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Flyout").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlyout> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIFlyoutBaseOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIFlyoutBaseOverrides)]) {
        typedOuter = Make<WUXCPIFlyoutBaseOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCFlyout* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IFlyoutStatics> WXCIFlyoutStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IFlyoutStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Flyout").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)contentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)flyoutPresenterStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_FlyoutPresenterStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXUIElement*)content {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_Content(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setContent:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_Content(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

- (WXStyle*)flyoutPresenterStyle {
    ComPtr<ABI::Windows::UI::Xaml::IStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_FlyoutPresenterStyle(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXStyle>(unmarshalledReturn.Get());
}

- (void)setFlyoutPresenterStyle:(WXStyle*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_FlyoutPresenterStyle(_getRtInterface<ABI::Windows::UI::Xaml::IStyle>(value).Get()));
}

@end

@implementation WXCMenuFlyout

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyout> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MenuFlyout").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyout> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIFlyoutBaseOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIFlyoutBaseOverrides)]) {
        typedOuter = Make<WUXCPIFlyoutBaseOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCMenuFlyout* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutStatics> WXCIMenuFlyoutStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.MenuFlyout").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)menuFlyoutPresenterStyleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIMenuFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MenuFlyoutPresenterStyleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSMutableArray* /* WXCMenuFlyoutItemBase* */)items {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Controls::MenuFlyoutItemBase*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_Items(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WXCMenuFlyoutItemBase_create(unmarshalledReturn.Get());
}

- (WXStyle*)menuFlyoutPresenterStyle {
    ComPtr<ABI::Windows::UI::Xaml::IStyle> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_MenuFlyoutPresenterStyle(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXStyle>(unmarshalledReturn.Get());
}

- (void)setMenuFlyoutPresenterStyle:(WXStyle*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_MenuFlyoutPresenterStyle(_getRtInterface<ABI::Windows::UI::Xaml::IStyle>(value).Get()));
}

- (void)showAt:(WXUIElement*)targetElement point:(WFPoint*)point {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IMenuFlyout2>(self);
    THROW_NS_IF_FAILED(_comInst->ShowAt(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(targetElement).Get(), *[point internalStruct]));
}

@end

@implementation WXCWebViewBrush

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewBrush> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.WebViewBrush").Get(), &out));
    return [_createRtProxy<WXCWebViewBrush>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewBrushStatics> WXCIWebViewBrushStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IWebViewBrushStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.WebViewBrush").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)sourceNameProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIWebViewBrushStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SourceNameProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)sourceName {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewBrush>(self);
    THROW_NS_IF_FAILED(_comInst->get_SourceName(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setSourceName:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewBrush>(self);
    THROW_NS_IF_FAILED(_comInst->put_SourceName(nsStrToHstr(value).Get()));
}

- (void)redraw {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewBrush>(self);
    THROW_NS_IF_FAILED(_comInst->Redraw());
}

- (void)setSource:(WXCWebView*)source {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IWebViewBrush>(self);
    THROW_NS_IF_FAILED(_comInst->SetSource(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IWebView>(source).Get()));
}

@end

@implementation WXCInkToolbarCustomPen

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPen> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WUIIInkDrawingAttributes*)createInkDrawingAttributes:(WUXMBrush*)brush strokeWidth:(double)strokeWidth {
    ComPtr<ABI::Windows::UI::Input::Inking::IInkDrawingAttributes> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPen>(self);
    THROW_NS_IF_FAILED(_comInst->CreateInkDrawingAttributes(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(brush).Get(),
                                                            strokeWidth,
                                                            unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUIIInkDrawingAttributes>(unmarshalledReturn.Get());
}

- (WUIIInkDrawingAttributes*)createInkDrawingAttributesCore:(WUXMBrush*)brush strokeWidth:(double)strokeWidth {
    ComPtr<ABI::Windows::UI::Input::Inking::IInkDrawingAttributes> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides>(self);
    THROW_NS_IF_FAILED(_comInst->CreateInkDrawingAttributesCore(_getRtInterface<ABI::Windows::UI::Xaml::Media::IBrush>(brush).Get(),
                                                                strokeWidth,
                                                                unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUIIInkDrawingAttributes>(unmarshalledReturn.Get());
}

@end

@implementation WXCInkToolbar

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbar> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbar").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbar> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCInkToolbar* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarStatics> WXCIInkToolbarStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbar").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)initialControlsProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_InitialControlsProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)childrenProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ChildrenProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)activeToolProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ActiveToolProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)inkDrawingAttributesProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_InkDrawingAttributesProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isRulerButtonCheckedProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsRulerButtonCheckedProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)targetInkCanvasProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TargetInkCanvasProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXCInkToolbarInitialControls)initialControls {
    ABI::Windows::UI::Xaml::Controls::InkToolbarInitialControls unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->get_InitialControls(&unmarshalledReturn));
    return (WXCInkToolbarInitialControls)unmarshalledReturn;
}

- (void)setInitialControls:(WXCInkToolbarInitialControls)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->put_InitialControls((ABI::Windows::UI::Xaml::Controls::InkToolbarInitialControls)value));
}

- (WXDependencyObjectCollection*)children {
    ComPtr<IObservableVector<ABI::Windows::UI::Xaml::DependencyObject*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->get_Children(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyObjectCollection>(unmarshalledReturn.Get());
}

- (WXCInkToolbarToolButton*)activeTool {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarToolButton> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->get_ActiveTool(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCInkToolbarToolButton>(unmarshalledReturn.Get());
}

- (void)setActiveTool:(WXCInkToolbarToolButton*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->put_ActiveTool(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarToolButton>(value).Get()));
}

- (WUIIInkDrawingAttributes*)inkDrawingAttributes {
    ComPtr<ABI::Windows::UI::Input::Inking::IInkDrawingAttributes> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->get_InkDrawingAttributes(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUIIInkDrawingAttributes>(unmarshalledReturn.Get());
}

- (BOOL)isRulerButtonChecked {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsRulerButtonChecked(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsRulerButtonChecked:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsRulerButtonChecked((boolean)value));
}

- (WXCInkCanvas*)targetInkCanvas {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkCanvas> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->get_TargetInkCanvas(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCInkCanvas>(unmarshalledReturn.Get());
}

- (void)setTargetInkCanvas:(WXCInkCanvas*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->put_TargetInkCanvas(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IInkCanvas>(value).Get()));
}

- (EventRegistrationToken)addActiveToolChangedEvent:(void (^)(WXCInkToolbar*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_ActiveToolChanged(Make<ITypedEventHandler_Windows_UI_Xaml_Controls_InkToolbar_System_Object>(value).Get(),
                                        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeActiveToolChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ActiveToolChanged(token));
}

- (EventRegistrationToken)addInkDrawingAttributesChangedEvent:(void (^)(WXCInkToolbar*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_InkDrawingAttributesChanged(Make<ITypedEventHandler_Windows_UI_Xaml_Controls_InkToolbar_System_Object>(value).Get(),
                                                  &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeInkDrawingAttributesChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->remove_InkDrawingAttributesChanged(token));
}

- (EventRegistrationToken)addEraseAllClickedEvent:(void (^)(WXCInkToolbar*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_EraseAllClicked(Make<ITypedEventHandler_Windows_UI_Xaml_Controls_InkToolbar_System_Object>(value).Get(),
                                      &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeEraseAllClickedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->remove_EraseAllClicked(token));
}

- (EventRegistrationToken)addIsRulerButtonCheckedChangedEvent:(void (^)(WXCInkToolbar*, RTObject*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(
        _comInst->add_IsRulerButtonCheckedChanged(Make<ITypedEventHandler_Windows_UI_Xaml_Controls_InkToolbar_System_Object>(value).Get(),
                                                  &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeIsRulerButtonCheckedChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->remove_IsRulerButtonCheckedChanged(token));
}

- (WXCInkToolbarToolButton*)getToolButton:(WXCInkToolbarTool)tool {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarToolButton> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(_comInst->GetToolButton((ABI::Windows::UI::Xaml::Controls::InkToolbarTool)tool, unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCInkToolbarToolButton>(unmarshalledReturn.Get());
}

- (WXCInkToolbarToggleButton*)getToggleButton:(WXCInkToolbarToggle)tool {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarToggleButton> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbar>(self);
    THROW_NS_IF_FAILED(
        _comInst->GetToggleButton((ABI::Windows::UI::Xaml::Controls::InkToolbarToggle)tool, unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCInkToolbarToggleButton>(unmarshalledReturn.Get());
}

@end

@implementation WXCInkToolbarPenConfigurationControl

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory> factory;
    THROW_NS_IF_FAILED(ABI::Windows::Foundation::GetActivationFactory(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarPenConfigurationControl").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIControlOverrides)]) {
        typedOuter = Make<WXCIControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCInkToolbarPenConfigurationControl* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics> WXCIInkToolbarPenConfigurationControlStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics> inst;
    THROW_NS_IF_FAILED(ABI::Windows::Foundation::GetActivationFactory(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarPenConfigurationControl").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)penButtonProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarPenConfigurationControlStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PenButtonProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXCInkToolbarPenButton*)penButton {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl>(self);
    THROW_NS_IF_FAILED(_comInst->get_PenButton(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCInkToolbarPenButton>(unmarshalledReturn.Get());
}

@end

@implementation WXCInkToolbarToggleButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarToggleButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

- (WXCInkToolbarToggle)toggleKind {
    ABI::Windows::UI::Xaml::Controls::InkToolbarToggle unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarToggleButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_ToggleKind(&unmarshalledReturn));
    return (WXCInkToolbarToggle)unmarshalledReturn;
}

@end

@implementation WXCInkToolbarToolButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarToolButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics> WXCIInkToolbarToolButtonStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarToolButton").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)isExtensionGlyphShownProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarToolButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsExtensionGlyphShownProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXCInkToolbarTool)toolKind {
    ABI::Windows::UI::Xaml::Controls::InkToolbarTool unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarToolButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_ToolKind(&unmarshalledReturn));
    return (WXCInkToolbarTool)unmarshalledReturn;
}

- (BOOL)isExtensionGlyphShown {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarToolButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsExtensionGlyphShown(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsExtensionGlyphShown:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarToolButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsExtensionGlyphShown((boolean)value));
}

@end

@implementation WXCInkToolbarCustomToggleButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory> factory;
    THROW_NS_IF_FAILED(ABI::Windows::Foundation::GetActivationFactory(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIToggleButtonOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIToggleButtonOverrides)]) {
        typedOuter = Make<WUXCPIToggleButtonOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCInkToolbarCustomToggleButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCInkToolbarCustomToolButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarCustomToolButton").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIToggleButtonOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIToggleButtonOverrides)]) {
        typedOuter = Make<WUXCPIToggleButtonOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCInkToolbarCustomToolButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics> WXCIInkToolbarCustomToolButtonStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarCustomToolButton").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)configurationContentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarCustomToolButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ConfigurationContentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXUIElement*)configurationContent {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_ConfigurationContent(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setConfigurationContent:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_ConfigurationContent(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

@end

@implementation WXCInkToolbarEraserButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarEraserButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarEraserButton").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarEraserButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIToggleButtonOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIToggleButtonOverrides)]) {
        typedOuter = Make<WUXCPIToggleButtonOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCInkToolbarEraserButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCInkToolbarPenButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics> WXCIInkToolbarPenButtonStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarPenButton").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)paletteProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarPenButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PaletteProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)minStrokeWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarPenButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MinStrokeWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxStrokeWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarPenButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxStrokeWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedBrushProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarPenButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedBrushProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedBrushIndexProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarPenButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedBrushIndexProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedStrokeWidthProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarPenButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedStrokeWidthProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSMutableArray* /* WUXMBrush* */)palette {
    ComPtr<IVector<ABI::Windows::UI::Xaml::Media::Brush*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_Palette(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_WUXMBrush_create(unmarshalledReturn.Get());
}

- (void)setPalette:(NSMutableArray* /* WUXMBrush* */)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton>(self);
    THROW_NS_IF_FAILED(
        _comInst->put_Palette(static_cast<IVector<typename ABI::Windows::Foundation::Internal::GetLogicalType<
                                  ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Media::Brush*,
                                                                                    ABI::Windows::UI::Xaml::Media::IBrush*>>::type>*>(
            ConvertToVector<WUXMBrush,
                            ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Media::Brush*,
                                                                              ABI::Windows::UI::Xaml::Media::IBrush*>>(value)
                .Get())));
}

- (double)minStrokeWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_MinStrokeWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMinStrokeWidth:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_MinStrokeWidth(value));
}

- (double)maxStrokeWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxStrokeWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMaxStrokeWidth:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxStrokeWidth(value));
}

- (WUXMBrush*)selectedBrush {
    ComPtr<ABI::Windows::UI::Xaml::Media::IBrush> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedBrush(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXMBrush>(unmarshalledReturn.Get());
}

- (int)selectedBrushIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedBrushIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setSelectedBrushIndex:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedBrushIndex(value));
}

- (double)selectedStrokeWidth {
    double unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedStrokeWidth(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setSelectedStrokeWidth:(double)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedStrokeWidth(value));
}

@end

@implementation WXCInkToolbarRulerButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarRulerButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarRulerButton").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarRulerButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIToggleButtonOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIToggleButtonOverrides)]) {
        typedOuter = Make<WUXCPIToggleButtonOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCInkToolbarRulerButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics> WXCIInkToolbarRulerButtonStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarRulerButton").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)rulerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarRulerButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_RulerProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WUIIInkPresenterRuler*)ruler {
    ComPtr<ABI::Windows::UI::Input::Inking::IInkPresenterRuler> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarRulerButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_Ruler(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUIIInkPresenterRuler>(unmarshalledReturn.Get());
}

@end

@implementation WXCInkToolbarBallpointPenButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory> factory;
    THROW_NS_IF_FAILED(ABI::Windows::Foundation::GetActivationFactory(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarBallpointPenButton").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIToggleButtonOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIToggleButtonOverrides)]) {
        typedOuter = Make<WUXCPIToggleButtonOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCInkToolbarBallpointPenButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCInkToolbarCustomPenButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarCustomPenButton").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIToggleButtonOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIToggleButtonOverrides)]) {
        typedOuter = Make<WUXCPIToggleButtonOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCInkToolbarCustomPenButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics> WXCIInkToolbarCustomPenButtonStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarCustomPenButton").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)customPenProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarCustomPenButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CustomPenProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)configurationContentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIInkToolbarCustomPenButtonStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ConfigurationContentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXCInkToolbarCustomPen*)customPen {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPen> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_CustomPen(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCInkToolbarCustomPen>(unmarshalledReturn.Get());
}

- (void)setCustomPen:(WXCInkToolbarCustomPen*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_CustomPen(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPen>(value).Get()));
}

- (WXUIElement*)configurationContent {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->get_ConfigurationContent(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setConfigurationContent:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>(self);
    THROW_NS_IF_FAILED(_comInst->put_ConfigurationContent(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

@end

@implementation WXCInkToolbarHighlighterButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory> factory;
    THROW_NS_IF_FAILED(ABI::Windows::Foundation::GetActivationFactory(
        HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarHighlighterButton").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIToggleButtonOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIToggleButtonOverrides)]) {
        typedOuter = Make<WUXCPIToggleButtonOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCInkToolbarHighlighterButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCInkToolbarPencilButton

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarPencilButton> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.InkToolbarPencilButton").Get(),
                                                       &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IInkToolbarPencilButton> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WUXCPIToggleButtonOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WUXCPIToggleButtonOverrides)]) {
        typedOuter = Make<WUXCPIToggleButtonOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCInkToolbarPencilButton* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

@end

@implementation WXCPivotItemEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotItemEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.PivotItemEventArgs").Get(), &out));
    return [_createRtProxy<WXCPivotItemEventArgs>(out.Get()) retain];
}

- (WXCPivotItem*)item {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotItem> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivotItemEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_Item(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXCPivotItem>(unmarshalledReturn.Get());
}

- (void)setItem:(WXCPivotItem*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivotItemEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->put_Item(_getRtInterface<ABI::Windows::UI::Xaml::Controls::IPivotItem>(value).Get()));
}

@end

@implementation WXCDatePickedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.DatePickedEventArgs").Get(), &out));
    return [_createRtProxy<WXCDatePickedEventArgs>(out.Get()) retain];
}

- (WFDateTime*)oldDate {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_OldDate(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (WFDateTime*)newDate __attribute__((ns_returns_not_retained)) {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_NewDate(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

@end

@implementation WXCDatePickerFlyoutItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics> WXCIDatePickerFlyoutItemStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.DatePickerFlyoutItem").Get(),
                                                       &inst));
    return inst;
}

+ (WXDependencyProperty*)primaryTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerFlyoutItemStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_PrimaryTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)secondaryTextProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerFlyoutItemStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SecondaryTextProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)primaryText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_PrimaryText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setPrimaryText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->put_PrimaryText(nsStrToHstr(value).Get()));
}

- (NSString*)secondaryText {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_SecondaryText(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setSecondaryText:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>(self);
    THROW_NS_IF_FAILED(_comInst->put_SecondaryText(nsStrToHstr(value).Get()));
}

- (RTObject<WUXDICustomProperty>*)getCustomProperty:(NSString*)name {
    ComPtr<ABI::Windows::UI::Xaml::Data::ICustomProperty> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Data::ICustomPropertyProvider>(self);
    THROW_NS_IF_FAILED(_comInst->GetCustomProperty(nsStrToHstr(name).Get(), unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDICustomProperty>(unmarshalledReturn.Get());
}

- (RTObject<WUXDICustomProperty>*)getIndexedProperty:(NSString*)name type:(WUXITypeName*)type {
    ComPtr<ABI::Windows::UI::Xaml::Data::ICustomProperty> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Data::ICustomPropertyProvider>(self);
    THROW_NS_IF_FAILED(_comInst->GetIndexedProperty(nsStrToHstr(name).Get(), *[type internalStruct], unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WUXDICustomProperty>(unmarshalledReturn.Get());
}

- (NSString*)getStringRepresentation {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Data::ICustomPropertyProvider>(self);
    THROW_NS_IF_FAILED(_comInst->GetStringRepresentation(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (WUXITypeName*)type {
    ABI::Windows::UI::Xaml::Interop::TypeName unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Data::ICustomPropertyProvider>(self);
    THROW_NS_IF_FAILED(_comInst->get_Type(&unmarshalledReturn));
    return WUXITypeName_create(unmarshalledReturn);
}

@end

@implementation WXCItemsPickedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IItemsPickedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ItemsPickedEventArgs").Get(), &out));
    return [_createRtProxy<WXCItemsPickedEventArgs>(out.Get()) retain];
}

- (NSMutableArray* /* RTObject* */)addedItems {
    ComPtr<IVector<IInspectable*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPickedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_AddedItems(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_RTObject_create(unmarshalledReturn.Get());
}

- (NSMutableArray* /* RTObject* */)removedItems {
    ComPtr<IVector<IInspectable*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IItemsPickedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_RemovedItems(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_RTObject_create(unmarshalledReturn.Get());
}

@end

@implementation WXCPickerConfirmedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.PickerConfirmedEventArgs").Get(), &out));
    return [_createRtProxy<WXCPickerConfirmedEventArgs>(out.Get()) retain];
}

@end

@implementation WXCTimePickedEventArgs

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePickedEventArgs> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(
        Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.TimePickedEventArgs").Get(), &out));
    return [_createRtProxy<WXCTimePickedEventArgs>(out.Get()) retain];
}

- (WFTimeSpan*)oldTime {
    ABI::Windows::Foundation::TimeSpan unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_OldTime(&unmarshalledReturn));
    return WFTimeSpan_create(unmarshalledReturn);
}

- (WFTimeSpan*)newTime __attribute__((ns_returns_not_retained)) {
    ABI::Windows::Foundation::TimeSpan unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickedEventArgs>(self);
    THROW_NS_IF_FAILED(_comInst->get_NewTime(&unmarshalledReturn));
    return WFTimeSpan_create(unmarshalledReturn);
}

@end

@implementation WXCDatePickerFlyoutPresenter

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCListPickerFlyoutPresenter

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCTimePickerFlyoutPresenter

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCPickerFlyoutPresenter

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPickerFlyoutPresenter> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

@end

@implementation WXCPivot

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPivot> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Pivot").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPivot> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIItemsControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIItemsControlOverrides)]) {
        typedOuter = Make<WXCIItemsControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCPivot* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotStatics2> WXCIPivotStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Pivot").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)leftHeaderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_LeftHeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)leftHeaderTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_LeftHeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)rightHeaderProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_RightHeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)rightHeaderTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_RightHeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotStatics> WXCIPivotStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Pivot").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)titleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TitleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)titleTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TitleTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)headerTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedIndexProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedIndexProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedItemProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedItemProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isLockedProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsLockedProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)slideInAnimationGroupProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SlideInAnimationGroupProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXCPivotSlideInAnimationGroup)getSlideInAnimationGroup:(WXFrameworkElement*)element {
    ABI::Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup unmarshalledReturn;
    auto _comInst = WXCIPivotStatics_inst();
    THROW_NS_IF_FAILED(
        _comInst->GetSlideInAnimationGroup(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(element).Get(), &unmarshalledReturn));
    return (WXCPivotSlideInAnimationGroup)unmarshalledReturn;
}

+ (void)setSlideInAnimationGroup:(WXFrameworkElement*)element value:(WXCPivotSlideInAnimationGroup)value {
    auto _comInst = WXCIPivotStatics_inst();
    THROW_NS_IF_FAILED(_comInst->SetSlideInAnimationGroup(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(element).Get(),
                                                          (ABI::Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup)value));
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotStatics3> WXCIPivotStatics3_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotStatics3> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.Pivot").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)headerFocusVisualPlacementProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderFocusVisualPlacementProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)isHeaderItemsCarouselEnabledProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotStatics3_inst();
    THROW_NS_IF_FAILED(_comInst->get_IsHeaderItemsCarouselEnabledProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject*)title {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->get_Title(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setTitle:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->put_Title([value comObj].Get()));
}

- (WXDataTemplate*)titleTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->get_TitleTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setTitleTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->put_TitleTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WXDataTemplate*)headerTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (int)selectedIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setSelectedIndex:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedIndex(value));
}

- (RTObject*)selectedItem {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedItem(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setSelectedItem:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedItem([value comObj].Get()));
}

- (BOOL)isLocked {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsLocked(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsLocked:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsLocked((boolean)value));
}

- (EventRegistrationToken)addSelectionChangedEvent:(WXCSelectionChangedEventHandler)value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->add_SelectionChanged(Make<WXCSelectionChangedEventHandler_shim>(value).Get(), &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeSelectionChangedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->remove_SelectionChanged(token));
}

- (EventRegistrationToken)addPivotItemLoadingEvent:(void (^)(WXCPivot*, WXCPivotItemEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->add_PivotItemLoading(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_Pivot_Windows_UI_Xaml_Controls_PivotItemEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePivotItemLoadingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->remove_PivotItemLoading(token));
}

- (EventRegistrationToken)addPivotItemLoadedEvent:(void (^)(WXCPivot*, WXCPivotItemEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->add_PivotItemLoaded(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_Pivot_Windows_UI_Xaml_Controls_PivotItemEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePivotItemLoadedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->remove_PivotItemLoaded(token));
}

- (EventRegistrationToken)addPivotItemUnloadingEvent:(void (^)(WXCPivot*, WXCPivotItemEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->add_PivotItemUnloading(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_Pivot_Windows_UI_Xaml_Controls_PivotItemEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePivotItemUnloadingEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->remove_PivotItemUnloading(token));
}

- (EventRegistrationToken)addPivotItemUnloadedEvent:(void (^)(WXCPivot*, WXCPivotItemEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->add_PivotItemUnloaded(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_Pivot_Windows_UI_Xaml_Controls_PivotItemEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removePivotItemUnloadedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot>(self);
    THROW_NS_IF_FAILED(_comInst->remove_PivotItemUnloaded(token));
}

- (RTObject*)leftHeader {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot2>(self);
    THROW_NS_IF_FAILED(_comInst->get_LeftHeader(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setLeftHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot2>(self);
    THROW_NS_IF_FAILED(_comInst->put_LeftHeader([value comObj].Get()));
}

- (WXDataTemplate*)leftHeaderTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot2>(self);
    THROW_NS_IF_FAILED(_comInst->get_LeftHeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setLeftHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot2>(self);
    THROW_NS_IF_FAILED(_comInst->put_LeftHeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (RTObject*)rightHeader {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot2>(self);
    THROW_NS_IF_FAILED(_comInst->get_RightHeader(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setRightHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot2>(self);
    THROW_NS_IF_FAILED(_comInst->put_RightHeader([value comObj].Get()));
}

- (WXDataTemplate*)rightHeaderTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot2>(self);
    THROW_NS_IF_FAILED(_comInst->get_RightHeaderTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setRightHeaderTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot2>(self);
    THROW_NS_IF_FAILED(_comInst->put_RightHeaderTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (WXCPivotHeaderFocusVisualPlacement)headerFocusVisualPlacement {
    ABI::Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot3>(self);
    THROW_NS_IF_FAILED(_comInst->get_HeaderFocusVisualPlacement(&unmarshalledReturn));
    return (WXCPivotHeaderFocusVisualPlacement)unmarshalledReturn;
}

- (void)setHeaderFocusVisualPlacement:(WXCPivotHeaderFocusVisualPlacement)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot3>(self);
    THROW_NS_IF_FAILED(_comInst->put_HeaderFocusVisualPlacement((ABI::Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement)value));
}

- (BOOL)isHeaderItemsCarouselEnabled {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot3>(self);
    THROW_NS_IF_FAILED(_comInst->get_IsHeaderItemsCarouselEnabled(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setIsHeaderItemsCarouselEnabled:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivot3>(self);
    THROW_NS_IF_FAILED(_comInst->put_IsHeaderItemsCarouselEnabled((boolean)value));
}

@end

@implementation WXCPivotItem

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotItem> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotItemFactory> factory;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.PivotItem").Get(), &factory));
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotItem> instance;
    ComPtr<IInspectable> outer = nullptr;
    ComPtr<IInspectable> inner = nullptr;
    ComPtr<WXCIContentControlOverrides_RtProxy> typedOuter;
    if ([self conformsToProtocol:@protocol(WXCIContentControlOverrides)]) {
        typedOuter = Make<WXCIContentControlOverrides_RtProxy>();
        outer = typedOuter;
    }
    factory->CreateInstance(outer.Get(), &inner, &instance);
    WXCPivotItem* ret = [_createRtProxy(self, instance.Get()) retain];
    [ret setInnerInterface:inner.Get()];
    if (typedOuter) {
        typedOuter->_inner = (id)ret;
        typedOuter->SetComposableBasePointers(inner.Get());
    }
    return ret;
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotItemStatics> WXCIPivotItemStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPivotItemStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.PivotItem").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)headerProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPivotItemStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_HeaderProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject*)header {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivotItem>(self);
    THROW_NS_IF_FAILED(_comInst->get_Header(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setHeader:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPivotItem>(self);
    THROW_NS_IF_FAILED(_comInst->put_Header([value comObj].Get()));
}

@end

@implementation WXCDatePickerFlyout

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.DatePickerFlyout").Get(), &out));
    return [_createRtProxy<WXCDatePickerFlyout>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2> WXCIDatePickerFlyoutStatics2_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.DatePickerFlyout").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)dayFormatProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerFlyoutStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_DayFormatProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)monthFormatProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerFlyoutStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_MonthFormatProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)yearFormatProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerFlyoutStatics2_inst();
    THROW_NS_IF_FAILED(_comInst->get_YearFormatProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics> WXCIDatePickerFlyoutStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.DatePickerFlyout").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)calendarIdentifierProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_CalendarIdentifierProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)dayVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DayVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)monthVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MonthVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)yearVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_YearVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)minYearProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MinYearProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)maxYearProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIDatePickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MaxYearProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)calendarIdentifier {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_CalendarIdentifier(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setCalendarIdentifier:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_CalendarIdentifier(nsStrToHstr(value).Get()));
}

- (WFDateTime*)date {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_Date(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (void)setDate:(WFDateTime*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_Date(*[value internalStruct]));
}

- (BOOL)dayVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_DayVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setDayVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_DayVisible((boolean)value));
}

- (BOOL)monthVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_MonthVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setMonthVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_MonthVisible((boolean)value));
}

- (BOOL)yearVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_YearVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setYearVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_YearVisible((boolean)value));
}

- (WFDateTime*)minYear {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_MinYear(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (void)setMinYear:(WFDateTime*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_MinYear(*[value internalStruct]));
}

- (WFDateTime*)maxYear {
    ABI::Windows::Foundation::DateTime unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_MaxYear(&unmarshalledReturn));
    return WFDateTime_create(unmarshalledReturn);
}

- (void)setMaxYear:(WFDateTime*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_MaxYear(*[value internalStruct]));
}

- (EventRegistrationToken)addDatePickedEvent:(void (^)(WXCDatePickerFlyout*, WXCDatePickedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->add_DatePicked(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_DatePickerFlyout_Windows_UI_Xaml_Controls_DatePickedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeDatePickedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->remove_DatePicked(token));
}

- (void)showAtAsync:(WXFrameworkElement*)target success:(void (^)(id /* WFDateTime* */))success failure:(void (^)(NSError*))failure {
    ComPtr<ABI::Windows::Foundation::IAsyncOperation<IReference<ABI::Windows::Foundation::DateTime>*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout>(self);
    THROW_NS_IF_FAILED(
        _comInst->ShowAtAsync(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(target).Get(), &unmarshalledReturn));

    auto successRc = makeBlockHolder(success);
    auto failureRc = makeBlockHolder(failure);
    auto completionHandler = ::Microsoft::WRL::Callback<::Microsoft::WRL::Implements<
        ::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::WinRtClassicComMix>,
        ABI::Windows::Foundation::IAsyncOperationCompletedHandler<IReference<ABI::Windows::Foundation::DateTime>*>,
        FtmBase>>([successRc, failureRc](ABI::Windows::Foundation::IAsyncOperation<IReference<ABI::Windows::Foundation::DateTime>*>* op,
                                         AsyncStatus status) {
        @autoreleasepool {
            if (!_handleAsyncErrorCode(op, failureRc)) {
                return S_OK;
            }
            if (status == AsyncStatus::Completed) {
                ComPtr<IReference<ABI::Windows::Foundation::DateTime>> result;
                HRESULT hr = op->GetResults(result.GetAddressOf());
                if (SUCCEEDED(hr)) {
                    if (successRc) {
                        successRc(MakeFromNullable<WFDateTime, ABI::Windows::Foundation::DateTime>::convert(result.Get()));
                    }
                } else {
                    if (failureRc) {
                        failureRc([NSError errorWithDomain:@"HRESULT" code:hr userInfo:nil]);
                    }
                }
            } else {
                if (failureRc) {
                    failureRc([NSError errorWithDomain:@"Async" code:(int)status userInfo:nil]);
                }
            }
            return S_OK;
        }
    });

    unmarshalledReturn->put_Completed(completionHandler.Get());
}

- (NSString*)dayFormat {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout2>(self);
    THROW_NS_IF_FAILED(_comInst->get_DayFormat(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setDayFormat:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout2>(self);
    THROW_NS_IF_FAILED(_comInst->put_DayFormat(nsStrToHstr(value).Get()));
}

- (NSString*)monthFormat {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout2>(self);
    THROW_NS_IF_FAILED(_comInst->get_MonthFormat(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setMonthFormat:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout2>(self);
    THROW_NS_IF_FAILED(_comInst->put_MonthFormat(nsStrToHstr(value).Get()));
}

- (NSString*)yearFormat {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout2>(self);
    THROW_NS_IF_FAILED(_comInst->get_YearFormat(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setYearFormat:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout2>(self);
    THROW_NS_IF_FAILED(_comInst->put_YearFormat(nsStrToHstr(value).Get()));
}

@end

@implementation WXCListPickerFlyout

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListPickerFlyout").Get(), &out));
    return [_createRtProxy<WXCListPickerFlyout>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IListPickerFlyoutStatics> WXCIListPickerFlyoutStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IListPickerFlyoutStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.ListPickerFlyout").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)itemsSourceProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListPickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemsSourceProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)itemTemplateProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListPickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ItemTemplateProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)displayMemberPathProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListPickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_DisplayMemberPathProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectionModeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListPickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectionModeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedIndexProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListPickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedIndexProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedItemProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListPickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedItemProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedValueProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListPickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedValueProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)selectedValuePathProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIListPickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_SelectedValuePathProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (RTObject*)itemsSource {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemsSource(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setItemsSource:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemsSource([value comObj].Get()));
}

- (WXDataTemplate*)itemTemplate {
    ComPtr<ABI::Windows::UI::Xaml::IDataTemplate> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_ItemTemplate(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDataTemplate>(unmarshalledReturn.Get());
}

- (void)setItemTemplate:(WXDataTemplate*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_ItemTemplate(_getRtInterface<ABI::Windows::UI::Xaml::IDataTemplate>(value).Get()));
}

- (NSString*)displayMemberPath {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_DisplayMemberPath(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setDisplayMemberPath:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_DisplayMemberPath(nsStrToHstr(value).Get()));
}

- (WXCListPickerFlyoutSelectionMode)selectionMode {
    ABI::Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectionMode(&unmarshalledReturn));
    return (WXCListPickerFlyoutSelectionMode)unmarshalledReturn;
}

- (void)setSelectionMode:(WXCListPickerFlyoutSelectionMode)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectionMode((ABI::Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode)value));
}

- (int)selectedIndex {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedIndex(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setSelectedIndex:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedIndex(value));
}

- (RTObject*)selectedItem {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedItem(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setSelectedItem:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedItem([value comObj].Get()));
}

- (RTObject*)selectedValue {
    ComPtr<IInspectable> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedValue(unmarshalledReturn.GetAddressOf()));
    return _createBareRTObj(unmarshalledReturn.Get());
}

- (void)setSelectedValue:(RTObject*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedValue([value comObj].Get()));
}

- (NSString*)selectedValuePath {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedValuePath(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setSelectedValuePath:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_SelectedValuePath(nsStrToHstr(value).Get()));
}

- (NSMutableArray* /* RTObject* */)selectedItems {
    ComPtr<IVector<IInspectable*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_SelectedItems(unmarshalledReturn.GetAddressOf()));
    return RTProxiedNSMutableArray_RTObject_create(unmarshalledReturn.Get());
}

- (EventRegistrationToken)addItemsPickedEvent:(void (^)(WXCListPickerFlyout*, WXCItemsPickedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->add_ItemsPicked(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_ListPickerFlyout_Windows_UI_Xaml_Controls_ItemsPickedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeItemsPickedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->remove_ItemsPicked(token));
}

- (void)showAtAsync:(WXFrameworkElement*)target success:(void (^)(NSArray* /* RTObject* */))success failure:(void (^)(NSError*))failure {
    ComPtr<ABI::Windows::Foundation::IAsyncOperation<IVectorView<IInspectable*>*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IListPickerFlyout>(self);
    THROW_NS_IF_FAILED(
        _comInst->ShowAtAsync(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(target).Get(), &unmarshalledReturn));

    auto successRc = makeBlockHolder(success);
    auto failureRc = makeBlockHolder(failure);
    auto completionHandler = ::Microsoft::WRL::Callback<
        ::Microsoft::WRL::Implements<::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::WinRtClassicComMix>,
                                     ABI::Windows::Foundation::IAsyncOperationCompletedHandler<IVectorView<IInspectable*>*>,
                                     FtmBase>>(
        [successRc, failureRc](ABI::Windows::Foundation::IAsyncOperation<IVectorView<IInspectable*>*>* op, AsyncStatus status) {
            @autoreleasepool {
                if (!_handleAsyncErrorCode(op, failureRc)) {
                    return S_OK;
                }
                if (status == AsyncStatus::Completed) {
                    ComPtr<IVectorView<IInspectable*>> result;
                    HRESULT hr = op->GetResults(result.GetAddressOf());
                    if (SUCCEEDED(hr)) {
                        if (successRc) {
                            successRc(RTProxiedNSArray_RTObject_create(result.Get()));
                        }
                    } else {
                        if (failureRc) {
                            failureRc([NSError errorWithDomain:@"HRESULT" code:hr userInfo:nil]);
                        }
                    }
                } else {
                    if (failureRc) {
                        failureRc([NSError errorWithDomain:@"Async" code:(int)status userInfo:nil]);
                    }
                }
                return S_OK;
            }
        });

    unmarshalledReturn->put_Completed(completionHandler.Get());
}

@end

@implementation WXCPickerFlyout

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPickerFlyout> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.PickerFlyout").Get(), &out));
    return [_createRtProxy<WXCPickerFlyout>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::IPickerFlyoutStatics> WXCIPickerFlyoutStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::IPickerFlyoutStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.PickerFlyout").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)contentProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ContentProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)confirmationButtonsVisibleProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCIPickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ConfirmationButtonsVisibleProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (WXUIElement*)content {
    ComPtr<ABI::Windows::UI::Xaml::IUIElement> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_Content(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXUIElement>(unmarshalledReturn.Get());
}

- (void)setContent:(WXUIElement*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_Content(_getRtInterface<ABI::Windows::UI::Xaml::IUIElement>(value).Get()));
}

- (BOOL)confirmationButtonsVisible {
    boolean unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_ConfirmationButtonsVisible(&unmarshalledReturn));
    return (BOOL)unmarshalledReturn;
}

- (void)setConfirmationButtonsVisible:(BOOL)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_ConfirmationButtonsVisible((boolean)value));
}

- (EventRegistrationToken)addConfirmedEvent:(void (^)(WXCPickerFlyout*, WXCPickerConfirmedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->add_Confirmed(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_PickerFlyout_Windows_UI_Xaml_Controls_PickerConfirmedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeConfirmedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->remove_Confirmed(token));
}

- (void)showAtAsync:(WXFrameworkElement*)target success:(void (^)(BOOL))success failure:(void (^)(NSError*))failure {
    ComPtr<ABI::Windows::Foundation::IAsyncOperation<bool>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::IPickerFlyout>(self);
    THROW_NS_IF_FAILED(
        _comInst->ShowAtAsync(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(target).Get(), &unmarshalledReturn));

    auto successRc = makeBlockHolder(success);
    auto failureRc = makeBlockHolder(failure);
    auto completionHandler =
        ::Microsoft::WRL::Callback<::Microsoft::WRL::Implements<::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::WinRtClassicComMix>,
                                                                ABI::Windows::Foundation::IAsyncOperationCompletedHandler<bool>,
                                                                FtmBase>>(
            [successRc, failureRc](ABI::Windows::Foundation::IAsyncOperation<bool>* op, AsyncStatus status) {
                @autoreleasepool {
                    if (!_handleAsyncErrorCode(op, failureRc)) {
                        return S_OK;
                    }
                    if (status == AsyncStatus::Completed) {
                        boolean result;
                        HRESULT hr = op->GetResults(&result);
                        if (SUCCEEDED(hr)) {
                            if (successRc) {
                                successRc((BOOL)result);
                            }
                        } else {
                            if (failureRc) {
                                failureRc([NSError errorWithDomain:@"HRESULT" code:hr userInfo:nil]);
                            }
                        }
                    } else {
                        if (failureRc) {
                            failureRc([NSError errorWithDomain:@"Async" code:(int)status userInfo:nil]);
                        }
                    }
                    return S_OK;
                }
            });

    unmarshalledReturn->put_Completed(completionHandler.Get());
}

@end

@implementation WXCTimePickerFlyout

+ (instancetype)createWith:(IInspectable*)obj {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyout> defaultInterface;
    ComPtr<IInspectable> inspectableInterface(obj);
    return SUCCEEDED(inspectableInterface.As(&defaultInterface)) ? _createRtProxy(self, obj) : nil;
}

+ (instancetype)make {
    ComPtr<IInspectable> out;
    LOG_IF_FAILED(Windows::Foundation::ActivateInstance(HString::MakeReference(L"Windows.UI.Xaml.Controls.TimePickerFlyout").Get(), &out));
    return [_createRtProxy<WXCTimePickerFlyout>(out.Get()) retain];
}

ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics> WXCITimePickerFlyoutStatics_inst() {
    ComPtr<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics> inst;
    THROW_NS_IF_FAILED(
        ABI::Windows::Foundation::GetActivationFactory(HString::MakeReference(L"Windows.UI.Xaml.Controls.TimePickerFlyout").Get(), &inst));
    return inst;
}

+ (WXDependencyProperty*)clockIdentifierProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITimePickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_ClockIdentifierProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)timeProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITimePickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_TimeProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

+ (WXDependencyProperty*)minuteIncrementProperty {
    ComPtr<ABI::Windows::UI::Xaml::IDependencyProperty> unmarshalledReturn;
    auto _comInst = WXCITimePickerFlyoutStatics_inst();
    THROW_NS_IF_FAILED(_comInst->get_MinuteIncrementProperty(unmarshalledReturn.GetAddressOf()));
    return _createRtProxy<WXDependencyProperty>(unmarshalledReturn.Get());
}

- (NSString*)clockIdentifier {
    HSTRING unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_ClockIdentifier(&unmarshalledReturn));
    return hstrToNSStr(unmarshalledReturn);
}

- (void)setClockIdentifier:(NSString*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_ClockIdentifier(nsStrToHstr(value).Get()));
}

- (WFTimeSpan*)time {
    ABI::Windows::Foundation::TimeSpan unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_Time(&unmarshalledReturn));
    return WFTimeSpan_create(unmarshalledReturn);
}

- (void)setTime:(WFTimeSpan*)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_Time(*[value internalStruct]));
}

- (int)minuteIncrement {
    int unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->get_MinuteIncrement(&unmarshalledReturn));
    return unmarshalledReturn;
}

- (void)setMinuteIncrement:(int)value {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->put_MinuteIncrement(value));
}

- (EventRegistrationToken)addTimePickedEvent:(void (^)(WXCTimePickerFlyout*, WXCTimePickedEventArgs*))value {
    EventRegistrationToken unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->add_TimePicked(
        Make<ITypedEventHandler_Windows_UI_Xaml_Controls_TimePickerFlyout_Windows_UI_Xaml_Controls_TimePickedEventArgs>(value).Get(),
        &unmarshalledReturn));
    return (EventRegistrationToken)unmarshalledReturn;
}

- (void)removeTimePickedEvent:(EventRegistrationToken)token {
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyout>(self);
    THROW_NS_IF_FAILED(_comInst->remove_TimePicked(token));
}

- (void)showAtAsync:(WXFrameworkElement*)target success:(void (^)(id /* WFTimeSpan* */))success failure:(void (^)(NSError*))failure {
    ComPtr<ABI::Windows::Foundation::IAsyncOperation<IReference<ABI::Windows::Foundation::TimeSpan>*>> unmarshalledReturn;
    auto _comInst = _getInnerInterface<ABI::Windows::UI::Xaml::Controls::ITimePickerFlyout>(self);
    THROW_NS_IF_FAILED(
        _comInst->ShowAtAsync(_getRtInterface<ABI::Windows::UI::Xaml::IFrameworkElement>(target).Get(), &unmarshalledReturn));

    auto successRc = makeBlockHolder(success);
    auto failureRc = makeBlockHolder(failure);
    auto completionHandler = ::Microsoft::WRL::Callback<::Microsoft::WRL::Implements<
        ::Microsoft::WRL::RuntimeClassFlags<::Microsoft::WRL::WinRtClassicComMix>,
        ABI::Windows::Foundation::IAsyncOperationCompletedHandler<IReference<ABI::Windows::Foundation::TimeSpan>*>,
        FtmBase>>([successRc, failureRc](ABI::Windows::Foundation::IAsyncOperation<IReference<ABI::Windows::Foundation::TimeSpan>*>* op,
                                         AsyncStatus status) {
        @autoreleasepool {
            if (!_handleAsyncErrorCode(op, failureRc)) {
                return S_OK;
            }
            if (status == AsyncStatus::Completed) {
                ComPtr<IReference<ABI::Windows::Foundation::TimeSpan>> result;
                HRESULT hr = op->GetResults(result.GetAddressOf());
                if (SUCCEEDED(hr)) {
                    if (successRc) {
                        successRc(MakeFromNullable<WFTimeSpan, ABI::Windows::Foundation::TimeSpan>::convert(result.Get()));
                    }
                } else {
                    if (failureRc) {
                        failureRc([NSError errorWithDomain:@"HRESULT" code:hr userInfo:nil]);
                    }
                }
            } else {
                if (failureRc) {
                    failureRc([NSError errorWithDomain:@"Async" code:(int)status userInfo:nil]);
                }
            }
            return S_OK;
        }
    });

    unmarshalledReturn->put_Completed(completionHandler.Get());
}

@end

id RTProxiedIterableNSArray_NSString_create(IInspectable* val) {
    std::unique_ptr<IterableArrayAdapter> adapter = std::make_unique<
        IterableArrayAdapterObj<IIterable<HSTRING>,
                                RTIterableObj<HSTRING, IIterable<HSTRING>, NSString, HSTRING, dummyObjCCreator, dummyWRLCreator>>>(val);
    return [[[RTProxiedIterableNSArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedIterableNSArray_WUColor_create(IInspectable* val) {
    std::unique_ptr<IterableArrayAdapter> adapter =
        std::make_unique<IterableArrayAdapterObj<IIterable<ABI::Windows::UI::Color>,
                                                 RTIterableObj<ABI::Windows::UI::Color,
                                                               IIterable<ABI::Windows::UI::Color>,
                                                               WUColor,
                                                               ABI::Windows::UI::Color,
                                                               dummyObjCCreator,
                                                               dummyWRLCreator>>>(val);
    return [[[RTProxiedIterableNSArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSArray_RTObject_create(IInspectable* val) {
    std::unique_ptr<ArrayAdapter> adapter = std::make_unique<
        ArrayAdapterObj<IVectorView<IInspectable*>,
                        RTArrayObj<IInspectable*, IVectorView<IInspectable*>, RTObject, IInspectable*, dummyObjCCreator, dummyWRLCreator>>>(
        val);
    return [[[RTProxiedNSArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSArray_Single_create(IInspectable* val) {
    std::unique_ptr<ArrayAdapter> adapter = std::make_unique<
        ArrayAdapterObj<IVectorView<float>, RTArrayObj<float, IVectorView<float>, float, float, dummyObjCCreator, dummyWRLCreator>>>(val);
    return [[[RTProxiedNSArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSArray_WFDateTime_create(IInspectable* val) {
    std::unique_ptr<ArrayAdapter> adapter = std::make_unique<ArrayAdapterObj<IVectorView<ABI::Windows::Foundation::DateTime>,
                                                                             RTArrayObj<ABI::Windows::Foundation::DateTime,
                                                                                        IVectorView<ABI::Windows::Foundation::DateTime>,
                                                                                        WFDateTime,
                                                                                        ABI::Windows::Foundation::DateTime,
                                                                                        dummyObjCCreator,
                                                                                        dummyWRLCreator>>>(val);
    return [[[RTProxiedNSArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSArray_WUXDItemIndexRange_create(IInspectable* val) {
    std::unique_ptr<ArrayAdapter> adapter =
        std::make_unique<ArrayAdapterObj<IVectorView<ABI::Windows::UI::Xaml::Data::ItemIndexRange*>,
                                         RTArrayObj<ABI::Windows::UI::Xaml::Data::IItemIndexRange*,
                                                    IVectorView<ABI::Windows::UI::Xaml::Data::ItemIndexRange*>,
                                                    WUXDItemIndexRange,
                                                    ABI::Windows::UI::Xaml::Data::ItemIndexRange*,
                                                    dummyObjCCreator,
                                                    dummyWRLCreator>>>(val);
    return [[[RTProxiedNSArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSMutableArray_RTObject_create(IInspectable* val) {
    std::unique_ptr<MutableArrayAdapter> adapter = std::make_unique<MutableArrayAdapterObj<
        IVector<IInspectable*>,
        RTMutableArrayObj<IInspectable*, IVector<IInspectable*>, RTObject, IInspectable*, dummyObjCCreator, dummyWRLCreator>>>(val);
    return [[[RTProxiedNSMutableArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSMutableArray_Single_create(IInspectable* val) {
    std::unique_ptr<MutableArrayAdapter> adapter = std::make_unique<
        MutableArrayAdapterObj<IVector<float>, RTMutableArrayObj<float, IVector<float>, float, float, dummyObjCCreator, dummyWRLCreator>>>(
        val);
    return [[[RTProxiedNSMutableArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSMutableArray_WFDateTime_create(IInspectable* val) {
    std::unique_ptr<MutableArrayAdapter> adapter =
        std::make_unique<MutableArrayAdapterObj<IVector<ABI::Windows::Foundation::DateTime>,
                                                RTMutableArrayObj<ABI::Windows::Foundation::DateTime,
                                                                  IVector<ABI::Windows::Foundation::DateTime>,
                                                                  WFDateTime,
                                                                  ABI::Windows::Foundation::DateTime,
                                                                  dummyObjCCreator,
                                                                  dummyWRLCreator>>>(val);
    return [[[RTProxiedNSMutableArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSMutableArray_WFUri_create(IInspectable* val) {
    std::unique_ptr<MutableArrayAdapter> adapter =
        std::make_unique<MutableArrayAdapterObj<IVector<ABI::Windows::Foundation::Uri*>,
                                                RTMutableArrayObj<ABI::Windows::Foundation::IUriRuntimeClass*,
                                                                  IVector<ABI::Windows::Foundation::Uri*>,
                                                                  WFUri,
                                                                  ABI::Windows::Foundation::Uri*,
                                                                  dummyObjCCreator,
                                                                  dummyWRLCreator>>>(val);
    return [[[RTProxiedNSMutableArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSMutableArray_WUXMBrush_create(IInspectable* val) {
    std::unique_ptr<MutableArrayAdapter> adapter =
        std::make_unique<MutableArrayAdapterObj<IVector<ABI::Windows::UI::Xaml::Media::Brush*>,
                                                RTMutableArrayObj<ABI::Windows::UI::Xaml::Media::IBrush*,
                                                                  IVector<ABI::Windows::UI::Xaml::Media::Brush*>,
                                                                  WUXMBrush,
                                                                  ABI::Windows::UI::Xaml::Media::Brush*,
                                                                  dummyObjCCreator,
                                                                  dummyWRLCreator>>>(val);
    return [[[RTProxiedNSMutableArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSMutableArray_WUXNPageStackEntry_create(IInspectable* val) {
    std::unique_ptr<MutableArrayAdapter> adapter =
        std::make_unique<MutableArrayAdapterObj<IVector<ABI::Windows::UI::Xaml::Navigation::PageStackEntry*>,
                                                RTMutableArrayObj<ABI::Windows::UI::Xaml::Navigation::IPageStackEntry*,
                                                                  IVector<ABI::Windows::UI::Xaml::Navigation::PageStackEntry*>,
                                                                  WUXNPageStackEntry,
                                                                  ABI::Windows::UI::Xaml::Navigation::PageStackEntry*,
                                                                  dummyObjCCreator,
                                                                  dummyWRLCreator>>>(val);
    return [[[RTProxiedNSMutableArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSMutableArray_WXCHubSection_create(IInspectable* val) {
    std::unique_ptr<MutableArrayAdapter> adapter =
        std::make_unique<MutableArrayAdapterObj<IVector<ABI::Windows::UI::Xaml::Controls::HubSection*>,
                                                RTMutableArrayObj<ABI::Windows::UI::Xaml::Controls::IHubSection*,
                                                                  IVector<ABI::Windows::UI::Xaml::Controls::HubSection*>,
                                                                  WXCHubSection,
                                                                  ABI::Windows::UI::Xaml::Controls::HubSection*,
                                                                  dummyObjCCreator,
                                                                  dummyWRLCreator>>>(val);
    return [[[RTProxiedNSMutableArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSMutableArray_WXCMenuFlyoutItemBase_create(IInspectable* val) {
    std::unique_ptr<MutableArrayAdapter> adapter =
        std::make_unique<MutableArrayAdapterObj<IVector<ABI::Windows::UI::Xaml::Controls::MenuFlyoutItemBase*>,
                                                RTMutableArrayObj<ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItemBase*,
                                                                  IVector<ABI::Windows::UI::Xaml::Controls::MenuFlyoutItemBase*>,
                                                                  WXCMenuFlyoutItemBase,
                                                                  ABI::Windows::UI::Xaml::Controls::MenuFlyoutItemBase*,
                                                                  dummyObjCCreator,
                                                                  dummyWRLCreator>>>(val);
    return [[[RTProxiedNSMutableArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedNSMutableArray_WXCWebViewDeferredPermissionRequest_create(IInspectable* val) {
    std::unique_ptr<MutableArrayAdapter> adapter = std::make_unique<
        MutableArrayAdapterObj<IVector<ABI::Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest*>,
                               RTMutableArrayObj<ABI::Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest*,
                                                 IVector<ABI::Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest*>,
                                                 WXCWebViewDeferredPermissionRequest,
                                                 ABI::Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest*,
                                                 dummyObjCCreator,
                                                 dummyWRLCreator>>>(val);
    return [[[RTProxiedNSMutableArrayFull alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedObservableNSMutableArray_RTObject_create(IInspectable* val) {
    std::unique_ptr<ObservableArrayAdapter> adapter = std::make_unique<ObservableArrayAdapterObj<
        IObservableVector<IInspectable*>,
        RTObservableArrayObj<IInspectable*, IVector<IInspectable*>, RTObject, IInspectable*, dummyObjCCreator, dummyWRLCreator>>>(val);
    return [[[RTProxiedObservableNSMutableArray alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedObservableNSMutableArray_RTObject_WXCICommandBarElement_create(IInspectable* val) {
    std::unique_ptr<ObservableArrayAdapter> adapter =
        std::make_unique<ObservableArrayAdapterObj<IObservableVector<ABI::Windows::UI::Xaml::Controls::ICommandBarElement*>,
                                                   RTObservableArrayObj<ABI::Windows::UI::Xaml::Controls::ICommandBarElement*,
                                                                        IVector<ABI::Windows::UI::Xaml::Controls::ICommandBarElement*>,
                                                                        RTObject<WXCICommandBarElement>,
                                                                        ABI::Windows::UI::Xaml::Controls::ICommandBarElement*,
                                                                        dummyObjCCreator,
                                                                        dummyWRLCreator>>>(val);
    return [[[RTProxiedObservableNSMutableArray alloc] initWithAdapter:std::move(adapter)] autorelease];
}

id RTProxiedObservableNSMutableArray_WXCGroupStyle_create(IInspectable* val) {
    std::unique_ptr<ObservableArrayAdapter> adapter =
        std::make_unique<ObservableArrayAdapterObj<IObservableVector<ABI::Windows::UI::Xaml::Controls::GroupStyle*>,
                                                   RTObservableArrayObj<ABI::Windows::UI::Xaml::Controls::IGroupStyle*,
                                                                        IVector<ABI::Windows::UI::Xaml::Controls::GroupStyle*>,
                                                                        WXCGroupStyle,
                                                                        ABI::Windows::UI::Xaml::Controls::GroupStyle*,
                                                                        dummyObjCCreator,
                                                                        dummyWRLCreator>>>(val);
    return [[[RTProxiedObservableNSMutableArray alloc] initWithAdapter:std::move(adapter)] autorelease];
}
