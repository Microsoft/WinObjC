variables:
  BuildPlatform: x86
  PackageVersionOverride: ''
  WINOBJC_SDK_ROOT: '$(Build.SourcesDirectory)'

jobs:
  - job: Build

    strategy:
      matrix:
        Debug:
          BuildConfiguration: Debug
        #Release:
          #BuildConfiguration: Release

    steps:
      - checkout: self
        clean: true
        lfs: true
        submodules: recursive

      - task: PowerShell@2
        displayName: Report Build Start
        continueOnError: true
        condition: always()
        inputs:
          targetType: inline
          script: |-
            .\scripts\build\Submit-GithubBuildStatus.ps1 `
              -pullrequest "$(PullRequest)" `
              -Repository "Microsoft/WinObjC" `
              -BuildDefinition "$(Build.DefinitionName) $(BuildConfiguration)" `
              -Status "pending" `
              -AuthUserName $(GithubUser) `
              -AuthToken $(GithubToken)

      - task: NuGetToolInstaller@0
        displayName: Ensure NuGet 4.8.1
        inputs:
          versionSpec: 4.8.1

      - task: NuGetCommand@2
        displayName: Restore Packages for tools.sln
        inputs:
          command: restore
          feedsToUse: config
          configPath: nuget.config
          restoreSolution: tools\tools.sln
          restoreDirectory: '$(Build.SourcesDirectory)\packages'

      - task: VSBuild@1
        displayName: Build tools.sln
        inputs:
          solution: tools\tools.sln
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'
          msbuildArgs: >-
            /p:DeployExtension=false
            /p:PackageVersionOverride=$(PackageVersionOverride)

      - task: VSBuild@1
        displayName: Restore Packages for build.sln
        inputs:
          solution: build\build.sln
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'
          msbuildArgs: >-
            /t:Restore
            /p:BuildProjectReferences=false

      - task: VSBuild@1
        displayName: Build build.sln
        inputs:
          solution: build\build.sln
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'
          msbuildArgs: >-
            /m
            /p:PackageVersionOverride=$(PackageVersionOverride)

      - task: PublishPipelineArtifact@0
        displayName: Publish Tool Packages
        inputs:
          artifactName: 'packages-$(BuildConfiguration)'
          targetPath: 'tools\OutputPackages\$(BuildConfiguration)'

      - task: PublishPipelineArtifact@0
        displayName: Publish Framework Packages
        inputs:
          artifactName: 'packages-$(BuildConfiguration)'
          targetPath: 'build\OutputPackages\$(BuildConfiguration)'

      - task: PublishPipelineArtifact@0
        displayName: Publish WinObjC Test Assets
        inputs:
          artifactName: 'tests-$(BuildConfiguration)'
          targetPath: 'build\$(BuildPlatform)\$(BuildConfiguration)\Universal Windows'

      - task: PublishPipelineArtifact@0
        displayName: Publish WinObjC Test Assets II
        inputs:
          artifactName: 'tests-$(BuildConfiguration)'
          targetPath: 'tests\*.ps1'

  - job: Test
    dependsOn: Build
    pool: Unprivileged Test Runners

    strategy:
      matrix:
        Debug:
          BuildConfiguration: Debug
        #Release:
          #BuildConfiguration: Release

    steps:
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'tests-$(BuildConfiguration)'

      - task: PowerShell@2
        displayName: Run Unit Tests for $(BuildPlatform) $(BuildConfiguration)
        inputs:
          targetType: filePath
          filePath: 'tests\Run-UnitTests.ps1'
          arguments: >-
            -Config $(BuildConfiguration)

      - task: PowerShell@2
        displayName: Run Functional Tests for $(BuildPlatform) $(BuildConfiguration)
        inputs:
          targetType: filePath
          filePath: 'tests\Run-FunctionalTests.ps1'
          arguments: >-
            -Config $(BuildConfiguration)

