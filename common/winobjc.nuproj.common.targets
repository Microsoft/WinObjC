<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="AddSingleConfigBuildOutput"  Returns="@(_PackageContentsForPlat)"> 
    <MSBuild Projects="$(SolutionPath)"
       Targets="GetSolutionConfigurationContents"
       Properties="Configuration=$(Configuration);Platform=$(Platform)">
      <Output TaskParameter="TargetOutputs" ItemName="_SolutionConfigurationContents" />
    </MSBuild>

    <Message Text="AddSingleConfigBuildOutput Platform: $(Platform)" Importance="High"/>

    <MSBuild Projects="$(MSBuildProjectFile)"
       Targets="GetPackageContents"
       Properties="SkipGetPackageContentsForOtherPlatforms=true;BuildingInsideVisualStudio=false;BuildProjectReferences=true;Configuration=$(Configuration);Platform=$(Platform);CurrentSolutionConfigurationContents=%(_SolutionConfigurationContents.Identity);">
      <Output TaskParameter="TargetOutputs" ItemName="_PackageContentsForPlat" />
    </MSBuild>
  </Target>

  <Target Name="AddOtherConfigsBuiltOutput" BeforeTargets="GetPackageContents" Condition="'$(SkipGetPackageContentsForOtherPlatforms)' != 'true' AND '$(Platform)' == 'AnyCPU'">

    <ItemGroup>
      <_PackTargetPlat Include="%(ProjectConfiguration.Platform)"
              Condition="'%(ProjectConfiguration.Configuration)' == '$(Configuration)' AND '%(ProjectConfiguration.Platform)' != '$(Platform)'" />
    </ItemGroup>
    
    <MSBuild Projects="$(MSBuildProjectFile)"
         Targets="AddSingleConfigBuildOutput"
         Properties="Platform=%(_PackTargetPlat.Identity)">
      <Output TaskParameter="TargetOutputs" ItemName="_OtherPackageContents" />
    </MSBuild>

    <ItemGroup>
      <PackageFile Include="@(_OtherPackageContents)" />
    </ItemGroup>

  </Target>

  <!-- 
    In the above AddSingleConfigBuildOutput target, several properties are injected into this project so that this project knows 
    if its being multiplexed or not. Don't pass on this extra information to project references as it can cause issues with MSBuild 
    knowing if a project is already built.
  -->
  <Target Name="RemoveGlobalPropertiesFromMultiplexing" BeforeTargets="BeforeResolveReferences">
    <PropertyGroup>
      <_GlobalPropertiesToRemove>BuildingPackage;</_GlobalPropertiesToRemove>
      <_GlobalPropertiesToRemove Condition="'$(SkipGetPackageContentsForOtherPlatforms)' == 'true'">$(_GlobalPropertiesToRemove);SkipGetPackageContentsForOtherPlatforms;</_GlobalPropertiesToRemove>
    </PropertyGroup>
    <ItemGroup>
      <ProjectReference>
        <GlobalPropertiesToRemove>%(ProjectReference.GlobalPropertiesToRemove);$(_GlobalPropertiesToRemove);</GlobalPropertiesToRemove>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <GetPackageVersionDependsOn>SetPackageVersion;$(GetPackageVersionDependsOn);</GetPackageVersionDependsOn>
  </PropertyGroup>

  <Target Name="SetPackageVersion" DependsOnTargets="GetVersion;ResolveReferences" >
    <PropertyGroup>
        <PackageVersion></PackageVersion>
    </PropertyGroup>

    <Error Condition="'$(GitVersion_BranchName)' == ''"
           Text="Cannot determine git branch. Please make sure GitVersionTask is listed as a nuget dependency for this project and that git.exe is part of the PATH environment variable." />

    <Warning Condition="'$(SolutionPath)' == ''"
           Text="Cannot determine solution build time. Package version dependencies may be inconsistent as a result. Please make sure to build using .sln file." />

    <PropertyGroup>
      <PackageTimestamp Condition="'$(PackageTimestamp)' == '' And Exists('$(SolutionDir)$(SolutionName).timestamp')">$([System.IO.File]::GetLastWriteTime($(SolutionDir)$(SolutionName).timestamp).ToUniversalTime().ToString(yyyyMMddHHmmss))</PackageTimestamp>      
      <PackageTimestamp Condition="'$(PackageTimestamp)' == ''">$([System.DateTime]::Now.ToString(yyyyMMddHHmmss))</PackageTimestamp>
      
      <PackageVersion_Major>$(GitVersion_Major)</PackageVersion_Major>
      <PackageVersion_Minor>$(GitVersion_Minor)</PackageVersion_Minor>
      
      <PackageVersion_Patch Condition="'$(PackageVersion_Patch)' == '' And '$(GitVersion_PreReleaseLabel)' == ''">$(GitVersion_Patch)</PackageVersion_Patch>
      <PackageVersion_Patch Condition="'$(PackageVersion_Patch)' == '' And '$(GitVersion_PreReleaseLabel)' != ''">$([MSBuild]::Add('$(GitVersion_Patch)', '1'))</PackageVersion_Patch>

      <PackageVersion_PreReleaseLabel>$(GitVersion_PreReleaseLabel)</PackageVersion_PreReleaseLabel>
      <PackageVersion_Timestamp>$(PackageTimestamp)</PackageVersion_Timestamp>

      <!-- Replace PreReleaseFormat msbuild property names with positional String.Format args.

           NOTE: If additional property replacements are needed, they must show up here. 
           An extra cool improvement would be to figure out how to delay property expansion until this point to pass the format directly.  -->
      <PackageVersion_PreReleaseFormat>$(PackageVersion_PreReleaseFormat.Replace('PackageVersion_Timestamp', '0'))</PackageVersion_PreReleaseFormat>
      <PackageVersion_PreReleaseFormat>$(PackageVersion_PreReleaseFormat.Replace('PackageVersion_PreReleaseLabel', '1'))</PackageVersion_PreReleaseFormat>

      <PackageVersion_PreRelease Condition="'$(PackageVersion_PreRelease)' == '' And '$(PackageVersion_PreReleaseLabel)' != ''">-$([System.String]::Format('$(PackageVersion_PreReleaseFormat)', $(PackageVersion_Timestamp), $(PackageVersion_PreReleaseLabel)))</PackageVersion_PreRelease>

      <PackageVersion Condition="'$(PackageVersionOverride)' == ''">$(PackageVersion_Major).$(PackageVersion_Minor).$(PackageVersion_Patch)$(PackageVersion_PreRelease)</PackageVersion>
      <PackageVersion Condition="'$(PackageVersionOverride)' != ''">$(PackageVersionOverride)</PackageVersion>
    </PropertyGroup>
  </Target>

  <ItemGroup>
    <ProjectReference Include="$(MsBuildThisFileDirectory)\NuprojInitializer.msbuildproj" Condition="'$(SkipGetPackageContentsForOtherPlatforms)' != 'true'">
      <IncludeInPackage>false</IncludeInPackage>
      <Private>false</Private>
      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
    </ProjectReference>
  </ItemGroup>

</Project>