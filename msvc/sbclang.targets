<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <ItemGroup>
    <PropertyPageSchema
      Include="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).xml" />
    <PropertyPageSchema
      Include="$(MSBuildThisFileDirectory)Islandwood.xml" />
    <AvailableItemName
      Include="ClangCompile">
      <Targets>_ClangCompile</Targets>
    </AvailableItemName>
  </ItemGroup>

  <PropertyGroup>
    <IncludeXamlCompositor Condition="'$(AppContainerApplication)' == 'true'">true</IncludeXamlCompositor>
  </PropertyGroup>

  <UsingTask
    TaskName="Clang"
    AssemblyFile="ClangCompileTask.dll"/>

  <PropertyGroup>
    <ClangCompileDependsOn>_SelectedFiles;MakeDirsForClang;GenerateHeaderMaps;ComputeClangOptions</ClangCompileDependsOn>
    <ClangCompileBeforeTargets>Link;Lib;ImpLib</ClangCompileBeforeTargets>
    <ClangCompileAfterTargets>ClCompile</ClangCompileAfterTargets>
    <BuildCompileTargets>$(BuildCompileTargets);_ClangCompile</BuildCompileTargets>
  </PropertyGroup>

  <PropertyGroup>
    <ClangCompileExtraInputs>$(MSBuildProjectFile)</ClangCompileExtraInputs>
    <CombinedHMapFilename>$(IntDir)$(MSBuildProjectName)-combined</CombinedHMapFilename>
    <ProjectHMapFilename>$(IntDir)$(MSBuildProjectName)-project</ProjectHMapFilename>
    <CombinedHMapRequired>@(ClangCompile->AnyHaveMetadataValue('HeaderMap','Combined'))</CombinedHMapRequired>
    <ProjectHMapRequired>@(ClangCompile->AnyHaveMetadataValue('HeaderMap','Project'))</ProjectHMapRequired>
    <HMapAddFrameworkEntries>@(ClangCompile->AnyHaveMetadataValue('HeaderMapAddFrameworkEntries','true'))</HMapAddFrameworkEntries>
  </PropertyGroup>

  <PropertyGroup>
    <DepWalkerPathFile>$(IntDir)$(ProjectName).dwp</DepWalkerPathFile>
    <DepWalkerOutputFile>$(IntDir)$(ProjectName).dwo</DepWalkerOutputFile>
    <DepWalkerCommand>"$(MSBuildThisFileDirectory)..\bin\depends.exe" /c /f:1 /d:"$(DepWalkerPathFile)" /oc:"$(DepWalkerOutputFile)" "$(TargetPath)"</DepWalkerCommand>
    <LibPathPattern>^,"([^"]*.\DLL)"</LibPathPattern>
  </PropertyGroup>

  <Target
    Name="HandleExplicitLibs"
    Condition="'$(ConfigurationType)' == 'Application'"
    BeforeTargets="SBResourcePackage"
    AfterTargets="Link">

    <ItemGroup>
      <!-- The AppInsights files are required by the Logging lib -->
      <SBResourceCopy Include="$(StarboardLibDirs)\ApplicationInsights.winmd" />
      <SBResourceCopy Include="$(StarboardLibDirs)\ApplicationInsights.dll" />
      <SBResourceCopy Include="$(StarboardLibDirs)\AppInsights_Win10-UAP.dll" />
    </ItemGroup>
  </Target>

  <Target
    Name="ComputeLibsToCopy"
    Condition="'$(ConfigurationType)' == 'Application'"
    BeforeTargets="SBResourcePackage"
    AfterTargets="Link">

    <!-- Write a Dependency Walker Path file -->
    <WriteLinesToFile
      File="$(DepWalkerPathFile)"
      Encoding="ASCII"
      Overwrite="true"
      Lines="UserDir $(StarboardLibDirs);UserDir $(StarboardConfigSpecificLibsDir);UserDir $(StarboardPrebuiltLibsDir);UserDir $(StarboardConfigSpecificPrebuiltLibsDir)" />

    <!-- Call Dependency Walker -->
    <Exec
      IgnoreExitCode="true"
      Command="$(DepWalkerCommand)" />

    <!-- Read Dependency Walker output -->
    <ReadLinesFromFile File="$(DepWalkerOutputFile)">
      <Output TaskParameter="Lines" ItemName="DepWalkerOutputLines"/>
    </ReadLinesFromFile>

    <!-- Extract paths to dependencies -->
    <ItemGroup>
      <SBResourceCopy Include="$([System.Text.RegularExpressions.Regex]::Match('%(DepWalkerOutputLines.Identity)', $(LibPathPattern)).Groups[1].Value)"/>
    </ItemGroup>

    <!-- Clean up -->
    <ItemGroup>
      <DepWalkerOutputLines Remove="@(DepWalkerOutputLines)" />
    </ItemGroup>
  </Target>

  <Target
    Name="ComputeStarboardCRT"
    BeforeTargets="ComputeCrtSDKReference">

    <PropertyGroup>
      <!-- Choose a CRT to use -->
      <ClangCompileCRTs>@(ClangCompile->Metadata('RuntimeLibrary')->Distinct()->ClearMetadata())</ClangCompileCRTs>
      <ClangCompilePreprocessorDefinitions>@(ClangCompile->Metadata('PreprocessorDefinitions')->Distinct()->ClearMetadata())</ClangCompilePreprocessorDefinitions>
      <StarboardCRT>MultiThreadedDLL</StarboardCRT>
      <StarboardCRT Condition="$(ClangCompileCRTs.Contains('MultiThreadedDebugDLL'))">MultiThreadedDebugDLL</StarboardCRT>
      <!-- Choose configuration that corresponds to the CRT -->
      <StarboardCRTConfig>Release</StarboardCRTConfig>
      <StarboardCRTConfig Condition="'$(StarboardCRT)' == 'MultiThreadedDebugDLL'">Debug</StarboardCRTConfig>
    </PropertyGroup>

    <!-- UseStarboardSourceSdk gates whether a project links against the WinObjC source tree (as an SDK) or a packaged SDK. -->
    <PropertyGroup Condition="'$(UseStarboardSourceSdk)' == 'true'">
      <!-- Library directories for in-tree builds and builds linking against the source tree. -->
      <StarboardLibDirs>$(MSBuildThisFileDirectory)..\build\$(Platform)\$(StarboardCRTConfig)\$(TargetOsAndVersion)</StarboardLibDirs>
      <!-- Directory for built libraries whose configuration must match the client's -->
      <StarboardConfigSpecificLibsDir>$(StarboardLibDirs)\$(StarboardCRTConfig)</StarboardConfigSpecificLibsDir>
      <!-- Prebuilts for all configurations -->
      <StarboardPrebuiltLibsDir>$(MSBuildThisFileDirectory)..\deps\prebuilt\$(TargetOsAndVersion)\$(PlatformTarget)</StarboardPrebuiltLibsDir>
      <!-- Configuration-specific prebuilts (libraries that need to use the same allocator as the client -->
      <StarboardConfigSpecificPrebuiltLibsDir>$(StarboardPrebuiltLibsDir)\$(StarboardCRTConfig)</StarboardConfigSpecificPrebuiltLibsDir>
    </PropertyGroup>
    <PropertyGroup Condition="'$(UseStarboardSourceSdk)' != 'true'">
      <!-- Library directories for projects preferring to link against the packaged SDK. -->
      <!-- Prebuilts and WinObjC libraries live in the same directory once packaged -->
      <StarboardLibDirs>$(StarboardSdkRoot)\lib\$(TargetOsAndVersion)\$(PlatformTarget)</StarboardLibDirs>
      <StarboardConfigSpecificLibsDir>$(StarboardLibDirs)\$(StarboardCRTConfig)</StarboardConfigSpecificLibsDir>
      <StarboardPrebuiltLibsDir>$(StarboardLibDirs)</StarboardPrebuiltLibsDir>
      <!-- Configuration-specific prebuilts retain their configuration specificity, as both Debug and Release are shipped as part of the archive. -->
      <StarboardConfigSpecificPrebuiltLibsDir>$(StarboardLibDirs)\$(StarboardCRTConfig)</StarboardConfigSpecificPrebuiltLibsDir>
    </PropertyGroup>

    <!-- Print which WinObjC libraries will be used, when building an Application -->
    <Message
      Condition="'$(UseStarboardSourceSdk)' == 'true' and '$(ConfigurationType)' == 'Application'"
      Importance="High"
      Text="Using $(StarboardCRTConfig) WinObjC libraries due to $(StarboardCRT) CRT." />

    <ItemGroup Condition="'$(AppContainerApplication)' == 'true' And '$(IslandwoodDRT)' == 'true'">
      <ClCompile Include="$(MSBuildThisFileDirectory)ConsumeRuntimeComponent.cpp">
        <PrecompiledHeader>NotUsing</PrecompiledHeader>
        <RuntimeLibrary>$(StarboardCRT)</RuntimeLibrary>
        <AdditionalOptions Condition="'$(ConfigurationType)' == 'Application'">$(AdditionalOptions) -D_WOC_APP</AdditionalOptions>
      </ClCompile>
    </ItemGroup>

    <ItemGroup>
      <Reference Include="XamlCompositorCS" Condition="'$(AppContainerApplication)' == 'true' And '$(IslandwoodDRT)' == 'true'">
        <HintPath>$(StarboardLibDirs)\XamlCompositorCS.winmd</HintPath>
        <IsWinMDFile>true</IsWinMDFile>
      </Reference>
    </ItemGroup>
  </Target>

  <Target
    Name="_ClangCompile"
    BeforeTargets="$(ClangCompileBeforeTargets)"
    AfterTargets="$(ClangCompileAfterTargets)"
    Condition="'@(ClangCompile)' != ''"
    DependsOnTargets="$(ClangCompileDependsOn)">
    <!-- Handle building of selected files -->
    <ItemGroup Condition="'@(SelectedFiles)' != ''">
      <ClangCompile Remove="@(ClangCompile)" Condition="'%(Identity)' != '@(SelectedFiles)'" />
    </ItemGroup>

      <!-- Call Clang, passing AdditionalOptions as the LAST argument -->
    <Clang
      Condition="'@(ClangCompile)' != '' and '%(ClangCompile.ExcludedFromBuild)' != 'true'"
      InternalSystemIncludePaths="%(ClangCompile.InternalSystemIncludePaths)"
      ExcludedSearchPathSubdirectories="%(ClangCompile.ExcludedSearchPathSubdirectories)"
      Autocomplete="$(ClangAutocomplete)"
      AutocompleteCommandLineTemplate="%(ClangCompile.AutocompleteCommandLineTemplate)"
      CommandLineTemplate="%(ClangCompile.WOCStdlibOptions) %(ClangCompile.CommandLineTemplate)"
      CommandTLogFile="%(ClangCompile.CommandTLogFile)"
      CompileAs="%(ClangCompile.CompileAs)"
      DebugInformation="%(ClangCompile.DebugInformation)"
      DependencyFile="%(ClangCompile.DependencyFile)"
      DependencySource="%(ClangCompile.DependencySource)"
      ExceptionHandling="%(ClangCompile.ExceptionHandling)"
      HeaderMapInclude="%(ClangCompile.HeaderMapInclude)"
      IncludePaths="%(ClangCompile.IncludePaths)"
      Input="@(ClangCompile)"
      LLVMDirectory="$(StarboardLLVMDirectory)"
      ObjectiveCARC="%(ClangCompile.ObjectiveCARC)"
      ObjectiveCModules="%(ClangCompile.ObjectiveCModules)"
      ObjectiveCModulesCachePath="%(ClangCompile.ObjectiveCModulesCachePath)"
      ObjectFileName="%(ClangCompile.ObjectFileName)"
      OptimizationLevel="%(ClangCompile.OptimizationLevel)"
      PrefixHeader="%(ClangCompile.PrefixHeader)"
      PreprocessorDefinitions="%(ClangCompile.PreprocessorDefinitions)"
      ProjectFile="$(MSBuildProjectFullPath)"
      RuntimeLibrary="%(ClangCompile.RuntimeLibrary)"
      SystemHeaderDeps="%(ClangCompile.SystemHeaderDeps)"
      UserIncludePaths="%(ClangCompile.UserIncludePaths)"
      ReadTLogFile="%(ClangCompile.ReadTLogFile)"
      AdditionalOptions="%(ClangCompile.OtherFlags) %(ClangCompile.AdditionalOptions)">
      <Output TaskParameter="Outputs" ItemName="ClangOutputs" />
    </Clang>
  </Target>

  <Target
    Name="GenerateHeaderMaps"
    DependsOnTargets="GenerateCombinedHMap;GenerateProjectHMap;WriteHeaderMaps" />

  <Target
    Name="ComputeCombinedHMap">

    <ItemGroup>
      <HeaderMapEntry Include="%(ClangCompile.RootDir)%(ClangCompile.Directory)*.h" />
      <HeaderMapEntry Include="%(ClangCompile.RootDir)%(ClangCompile.Directory)*.hh" />
      <HeaderMapEntry Include="%(ClangCompile.RootDir)%(ClangCompile.Directory)*.hpp" />
      <HeaderMapEntry Include="%(ClangCompile.RootDir)%(ClangCompile.Directory)*.pch" />
      <HeaderMapEntry Include="%(ClInclude.FullPath)" />
      <HeaderMapEntry Condition="'$(HMapAddFrameworkEntries)' == 'true'" Include="%(ClInclude.FullPath)&#x9;$(TargetName)/%(ClInclude.Filename)%(ClInclude.Extension)" />
      <HeaderMap Include="$(CombinedHMapFilename)" />
    </ItemGroup>
  </Target>

  <Target
    Name="GenerateCombinedHMap"
    DependsOnTargets="ComputeCombinedHMap"
    Condition="'$(CombinedHMapRequired)' == 'true'"
    Inputs="@(HeaderMapEntry)"
    Outputs="$(CombinedHMapFilename).txt">

    <!-- Only support ASCII paths for now -->
    <WriteLinesToFile
      File="$(CombinedHMapFilename).txt"
      Lines="@(HeaderMapEntry)"
      Overwrite="true"
      Encoding="ASCII" />

    <ItemGroup>
      <HeaderMapEntry Remove="@(HeaderMapEntry)" />
    </ItemGroup>
  </Target>

  <Target
    Name="ComputeProjectHMap">

    <ItemGroup>
      <HeaderMapEntry Include="%(ClInclude.FullPath)" />
      <HeaderMapEntry Condition="'$(HMapAddFrameworkEntries)' == 'true'" Include="%(ClInclude.FullPath)&#x9;$(TargetName)/%(ClInclude.Filename)%(ClInclude.Extension)" />
      <HeaderMap Include="$(ProjectHMapFilename)" />
    </ItemGroup>

    <ItemGroup Condition="@(HeaderMapEntry) == ''">
      <HeaderMapEntry Include="Empty" />
    </ItemGroup>
  </Target>

  <Target
    Name="GenerateProjectHMap"
    DependsOnTargets="ComputeProjectHMap"
    Condition="'$(ProjectHMapRequired)' == 'true'"
    Inputs="@(HeaderMapEntry)"
    Outputs="$(ProjectHMapFilename).txt">

    <!-- Only support ASCII paths for now -->
    <WriteLinesToFile
      File="$(ProjectHMapFilename).txt"
      Lines="@(HeaderMapEntry)"
      Overwrite="true"
      Encoding="ASCII" />

    <ItemGroup>
      <HeaderMapEntry Remove="@(HeaderMapEntry)" />
    </ItemGroup>
  </Target>

  <Target
    Name="WriteHeaderMaps"
    Condition="'@(HeaderMap)' != ''"
    Inputs="@(HeaderMap->'%(Identity).txt')"
    Outputs="@(HeaderMap->'%(Identity).hmap')">

    <Exec
      Command="&quot;$(MSBuildThisFileDirectory)..\bin\hmapmaker.exe&quot; &quot;%(HeaderMap.Identity).txt&quot; &quot;%(HeaderMap.Identity).hmap&quot;" />
  </Target>

  <!-- Create parent directories for all object files -->
  <Target Name="MakeDirsForClang" Condition="'@(ClangCompile)' != ''" DependsOnTargets="ComputeClangOptions">
    <MakeDir Directories="@(ClangCompile->Metadata('ObjectFileName')->DirectoryName()->Distinct()->ClearMetadata())" />
  </Target>
  
  <Target Name="ComputeClangOptions" Condition="">
    <!-- Figure out what to compile each file as -->
    <ItemGroup>
      <ClangCompile Condition="'%(ClangCompile.CompileAs)' == 'Default' or '%(ClangCompile.CompileAs)' == ''">
        <CompileAs Condition="'%(Extension)'=='.c'">CompileAsC</CompileAs>
        <CompileAs Condition="'%(Extension)'=='.m'">CompileAsObjC</CompileAs>
        <CompileAs Condition="'%(Extension)'=='.cpp' or '%(Extension)'=='.cc' or '%(Extension)'=='.cxx'">CompileAsCpp</CompileAs>
        <CompileAs Condition="'%(Extension)'=='.mm' or '%(Extension)'=='.mxx'">CompileAsObjCpp</CompileAs>
      </ClangCompile>
    </ItemGroup>

    <!-- Figure out language-specific flags -->
    <ItemGroup>
      <ClangCompile>
        <OtherFlags Condition="'%(ClangCompile.CompileAs)' == 'CompileAsC' or
                               '%(ClangCompile.CompileAs)' == 'CompileAsObjC'">%(ClangCompile.OtherCFlags)</OtherFlags>
        <OtherFlags Condition="'%(ClangCompile.CompileAs)' == 'CompileAsCpp' or
                               '%(ClangCompile.CompileAs)' == 'CompileAsObjCpp'">%(ClangCompile.OtherCPlusPlusFlags)</OtherFlags>
      </ClangCompile>
    </ItemGroup>

    <!-- Figure out which header map to use -->
    <ItemGroup>
      <ClangCompile>
        <HeaderMapInclude Condition="'%(ClangCompile.HeaderMap)' == 'Project'">-I"$(ProjectHMapFilename).hmap"</HeaderMapInclude>
        <HeaderMapInclude Condition="'%(ClangCompile.HeaderMap)' == 'Combined'">-I"$(CombinedHMapFilename).hmap"</HeaderMapInclude>
      </ClangCompile>
    </ItemGroup>

    <!-- Figure out WOCStdlib options to use -->
    <ItemGroup>
      <ClangCompile>
        <WOCStdlibOptions Condition="'%(ClangCompile.WOCStdlib)' == 'true'">-cc1 -internal-isystem "$(StarboardSdkRoot)\include\WOCStdLib" -include WOCStdlib.h</WOCStdlibOptions>
      </ClangCompile>
    </ItemGroup>

  </Target>

  <!-- Ensure Link/Lib/ImpLib pick up the object files -->
  <ItemDefinitionGroup>
    <ClangOutputs>
      <LinkCompiled>$(LinkCompiled)</LinkCompiled>
      <LibCompiled>$(LibCompiled)</LibCompiled>
      <ImpLibCompiled>$(ImpLibCompiled)</ImpLibCompiled>
    </ClangOutputs>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <ComputeLinkInputsTargets>$(ComputeLinkInputsTargets);ComputeClangLinkInputs;ComputeRuntimeInputs</ComputeLinkInputsTargets>
    <ComputeLibInputsTargets>$(ComputeLibInputsTargets);ComputeClangLibInputs;</ComputeLibInputsTargets>
    <ComputeImpLibInputsTargets>$(ComputeImpLibInputsTargets);ComputeClangImpLibInputs;</ComputeImpLibInputsTargets>
  </PropertyGroup>

  <Target
    Name="FixLinkAdditionalLibraryDirectories"
    DependsOnTargets="$(ComputeLinkInputsTargets)"
    BeforeTargets="Link">

    <ItemGroup>
      <Link>
        <AdditionalLibraryDirectories>%(Link.AdditionalLibraryDirectories);$(StarboardLibDirs);$(StarboardConfigSpecificLibsDir);$(StarboardPrebuiltLibsDir);$(StarboardConfigSpecificPrebuiltLibsDir)</AdditionalLibraryDirectories>
      </Link>
    </ItemGroup>

  </Target>

  <Target Name="ComputeRuntimeInputs" DependsOnTargets="ComputeClangOptions">
    <PropertyGroup>
      <StarboardRuntimeLib Condition="'$(IncludeXamlCompositor)' == 'true'">StarboardXaml.lib</StarboardRuntimeLib>
      <StarboardRuntimeLib Condition="'$(IncludeSwapChainCompositor)' == 'true'">StarboardSwapChain.lib</StarboardRuntimeLib>
    </PropertyGroup>
    <ItemGroup>
      <Link Condition="'$(StarboardLinkObjCRuntime)' == 'true'" Include="$(StarboardObjCRuntimeLib)"/>
      <Link Condition="'$(StarboardRuntimeLib)' != '' And '$(IslandwoodDRT)' == 'true'" Include="$(StarboardRuntimeLib)"/>
      <Link Condition="'$(StarboardDefaultLibs)' != '' And '$(IslandwoodDRT)' == 'true'" Include="$(StarboardDefaultLibs)"/>
    </ItemGroup>
  </Target>

  <Target Name="ComputeClangLinkInputs" DependsOnTargets="_ClangCompile">
    <ItemGroup>
      <Link Condition="'%(ClangOutputs.LinkCompiled)' == 'true'" Include="%(ClangOutputs.ObjectFileName)" />
    </ItemGroup>
  </Target>
  <Target Name="ComputeClangLibInputs" DependsOnTargets="ComputeClangOptions;_ClangCompile">
    <ItemGroup>
      <Lib Condition="'%(ClangOutputs.LibCompiled)' == 'true'" Include="%(ClangOutputs.ObjectFileName)" />
    </ItemGroup>
  </Target>
  <Target Name="ComputeClangImpLibInputs" DependsOnTargets="ComputeClangOptions;_ClangCompile">
    <ItemGroup>
      <ImpLib Condition="'%(ClangOutputs.ImpLibCompiled)' == 'true'" Include="%(ClangOutputs.ObjectFileName)" />
    </ItemGroup>
  </Target>

  <!-- Clean generated files -->
  <PropertyGroup>
    <CleanDependsOn>$(CleanDependsOn);CleanClang;CleanDepWalkerFiles</CleanDependsOn>
  </PropertyGroup>

  <Target Name="CleanClang" Condition="'@(ClangCompile)' != ''" DependsOnTargets="ComputeClangOptions">
    <!-- Delete header maps -->
    <Delete Files="$(CombinedHMapFilename).txt;$(CombinedHMapFilename).hmap;$(ProjectHMapFilename).txt;$(ProjectHMapFilename).hmap" />
    <RemoveDir Directories="@(ClangCompile->Metadata('ObjectiveCModulesCachePath')->Distinct()->ClearMetadata())" />
  </Target>

  <Target Name="CleanDepWalkerFiles">
    <!-- Delete Dependency Walker files -->
    <Delete Files="$(DepWalkerPathFile);$(DepWalkerOutputFile)" />
  </Target>
</Project>
